
weatherballoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb48  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800bde8  0800bde8  0001bde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800be74  0800be74  0001be74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800be78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800be8c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800beec  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  240000d4  0800bf4c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005144  0800bf4c  00025144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026864  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004393  00000000  00000000  000469a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba8  00000000  00000000  0004ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155d  00000000  00000000  0004c8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f3b  00000000  00000000  0004de45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000210b8  00000000  00000000  00052d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017ce02  00000000  00000000  00073e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007788  00000000  00000000  001f0c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001f83c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bdd0 	.word	0x0800bdd0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800bdd0 	.word	0x0800bdd0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getADCValueCurrent>:

/**
 * @brief Gets the ADC value from the current sensor.
 * @return The ADC value.
 */
uint32_t getADCValueCurrent(){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0

	 // Configure ADC for the current sensor connected to PC0
	 ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
 80005f0:	615a      	str	r2, [r3, #20]
 80005f2:	619a      	str	r2, [r3, #24]
	 sConfig.Channel = ADC_CHANNEL_10;  // PC0
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <getADCValueCurrent+0x54>)
 80005f6:	603b      	str	r3, [r7, #0]
	 sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f8:	2306      	movs	r3, #6
 80005fa:	607b      	str	r3, [r7, #4]
	 sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]

	 HAL_ADC_Init(&hadc1);
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <getADCValueCurrent+0x58>)
 8000602:	f001 faa5 	bl	8001b50 <HAL_ADC_Init>

	 // Start ADC conversion for PC0
	 HAL_ADC_Start(&hadc1);
 8000606:	480b      	ldr	r0, [pc, #44]	; (8000634 <getADCValueCurrent+0x58>)
 8000608:	f001 fc44 	bl	8001e94 <HAL_ADC_Start>

	 // Wait for the conversion to complete
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800060c:	f04f 31ff 	mov.w	r1, #4294967295
 8000610:	4808      	ldr	r0, [pc, #32]	; (8000634 <getADCValueCurrent+0x58>)
 8000612:	f001 fd3d 	bl	8002090 <HAL_ADC_PollForConversion>

	 // Read the ADC value
	 uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000616:	4807      	ldr	r0, [pc, #28]	; (8000634 <getADCValueCurrent+0x58>)
 8000618:	f001 fe2e 	bl	8002278 <HAL_ADC_GetValue>
 800061c:	61f8      	str	r0, [r7, #28]

	 // Stop ADC
	 HAL_ADC_Stop(&hadc1);
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <getADCValueCurrent+0x58>)
 8000620:	f001 fd02 	bl	8002028 <HAL_ADC_Stop>

	  return adcValue;
 8000624:	69fb      	ldr	r3, [r7, #28]

}
 8000626:	4618      	mov	r0, r3
 8000628:	3720      	adds	r7, #32
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2a000400 	.word	0x2a000400
 8000634:	24000128 	.word	0x24000128

08000638 <getADCValueVoltage>:

/**
 * @brief Gets the ADC value from the voltage sensor.
 * @return The ADC value.
 */
uint32_t getADCValueVoltage() {
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0

	// Configure ADC for the current sensor connected to PA3
	//hadc1.Init.Channel = ADC_CHANNEL_3;
    // Configure the ADC channel to read from PC0
    ADC_ChannelConfTypeDef sConfig = {0};
 800063e:	463b      	mov	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
 800064c:	615a      	str	r2, [r3, #20]
 800064e:	619a      	str	r2, [r3, #24]
    sConfig.Channel = ADC_CHANNEL_3;  // PA3
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <getADCValueVoltage+0x4c>)
 8000652:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000654:	2306      	movs	r3, #6
 8000656:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 800065c:	480a      	ldr	r0, [pc, #40]	; (8000688 <getADCValueVoltage+0x50>)
 800065e:	f001 fc19 	bl	8001e94 <HAL_ADC_Start>

    // Wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000662:	f04f 31ff 	mov.w	r1, #4294967295
 8000666:	4808      	ldr	r0, [pc, #32]	; (8000688 <getADCValueVoltage+0x50>)
 8000668:	f001 fd12 	bl	8002090 <HAL_ADC_PollForConversion>

    // Read the ADC value
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 800066c:	4806      	ldr	r0, [pc, #24]	; (8000688 <getADCValueVoltage+0x50>)
 800066e:	f001 fe03 	bl	8002278 <HAL_ADC_GetValue>
 8000672:	61f8      	str	r0, [r7, #28]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <getADCValueVoltage+0x50>)
 8000676:	f001 fcd7 	bl	8002028 <HAL_ADC_Stop>

    return adcValue;
 800067a:	69fb      	ldr	r3, [r7, #28]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	0c900008 	.word	0x0c900008
 8000688:	24000128 	.word	0x24000128
 800068c:	00000000 	.word	0x00000000

08000690 <getVoltage>:

/**
 * @brief Converts ADC value to voltage.
 * @return The voltage value.
 */
float getVoltage(){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0


	float adcValue = getADCValueVoltage();
 8000696:	f7ff ffcf 	bl	8000638 <getADCValueVoltage>
 800069a:	ee07 0a90 	vmov	s15, r0
 800069e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006a2:	edc7 7a01 	vstr	s15, [r7, #4]

    float voltage = (adcValue * VREF) / adcMaxValue;
 80006a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80006aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006ae:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80006d8 <getVoltage+0x48>
 80006b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006b6:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80006e0 <getVoltage+0x50>
 80006ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c2:	edc7 7a00 	vstr	s15, [r7]

    return voltage;
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	ee07 3a90 	vmov	s15, r3

}
 80006cc:	eeb0 0a67 	vmov.f32	s0, s15
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	66666666 	.word	0x66666666
 80006dc:	400a6666 	.word	0x400a6666
 80006e0:	00000000 	.word	0x00000000
 80006e4:	40b00000 	.word	0x40b00000

080006e8 <getCurrent>:

/**
 * @brief Converts voltage to current.
 * @return The current value.
 */
float getCurrent(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
	uint32_t adcValue = getADCValueCurrent();
 80006ee:	f7ff ff75 	bl	80005dc <getADCValueCurrent>
 80006f2:	60f8      	str	r0, [r7, #12]

	float voltage = (adcValue * VREF)/ adcMaxValue;
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	ee07 3a90 	vmov	s15, r3
 80006fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80006fe:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8000740 <getCurrent+0x58>
 8000702:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000706:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8000748 <getCurrent+0x60>
 800070a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800070e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000712:	edc7 7a02 	vstr	s15, [r7, #8]

	float current = voltage / sensitivity;
 8000716:	edd7 7a02 	vldr	s15, [r7, #8]
 800071a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800071e:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000750 <getCurrent+0x68>
 8000722:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000726:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800072a:	edc7 7a01 	vstr	s15, [r7, #4]

	return current;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	ee07 3a90 	vmov	s15, r3
}
 8000734:	eeb0 0a67 	vmov.f32	s0, s15
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	66666666 	.word	0x66666666
 8000744:	400a6666 	.word	0x400a6666
 8000748:	00000000 	.word	0x00000000
 800074c:	40b00000 	.word	0x40b00000
 8000750:	7ae147ae 	.word	0x7ae147ae
 8000754:	3fc7ae14 	.word	0x3fc7ae14

08000758 <cutBalloon>:

/**
 * @brief Sets the GPIO pin to high effectively cutting the balloon.
 */
void cutBalloon(){
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4802      	ldr	r0, [pc, #8]	; (800076c <cutBalloon+0x14>)
 8000762:	f003 fb55 	bl	8003e10 <HAL_GPIO_WritePin>

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	58021800 	.word	0x58021800

08000770 <lowPowerMode>:

/**
 * @brief Enters low power mode if battery voltage is low.
 */
void lowPowerMode(){
 8000770:	b580      	push	{r7, lr}
 8000772:	b084      	sub	sp, #16
 8000774:	af00      	add	r7, sp, #0
	float voltage = getVoltage();
 8000776:	f7ff ff8b 	bl	8000690 <getVoltage>
 800077a:	ed87 0a03 	vstr	s0, [r7, #12]
	float current = getCurrent();
 800077e:	f7ff ffb3 	bl	80006e8 <getCurrent>
 8000782:	ed87 0a02 	vstr	s0, [r7, #8]
	float time = HAL_GetTick();
 8000786:	f000 ff61 	bl	800164c <HAL_GetTick>
 800078a:	ee07 0a90 	vmov	s15, r0
 800078e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000792:	edc7 7a01 	vstr	s15, [r7, #4]
	//latitude
	//altitude
	//temp

	//logData(voltage, current, time, longitude, latitude, altitude, temp)
	cutBalloon();
 8000796:	f7ff ffdf 	bl	8000758 <cutBalloon>
	while(1){
 800079a:	e7fe      	b.n	800079a <lowPowerMode+0x2a>

0800079c <checkBattery>:
}

/**
 * @brief Checks battery voltage and enters low power mode if voltage is low (<20%).
 */
void checkBattery(){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
	float batteryVoltage = getVoltage();
 80007a2:	f7ff ff75 	bl	8000690 <getVoltage>
 80007a6:	ed87 0a01 	vstr	s0, [r7, #4]
		if (batteryVoltage <= minVoltage){
 80007aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80007ae:	eeb1 7a0a 	vmov.f32	s14, #26	; 0x40d00000  6.5
 80007b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	d900      	bls.n	80007be <checkBattery+0x22>
			lowPowerMode();
		}
}
 80007bc:	e001      	b.n	80007c2 <checkBattery+0x26>
			lowPowerMode();
 80007be:	f7ff ffd7 	bl	8000770 <lowPowerMode>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <checkAltitude>:
/**
 * @brief Checks if altitude is within acceptable range and calls cutBalloon if altitude exceeds max altitude.
 * @param altitude The current altitude.
 * @return 1 if altitude exceeds max altitude, 0 otherwise.
 */
int checkAltitude(float altitude){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (altitude < prevAltitude){
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <checkAltitude+0x54>)
 80007d8:	edd3 7a00 	vldr	s15, [r3]
 80007dc:	ed97 7a01 	vldr	s14, [r7, #4]
 80007e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007e8:	d504      	bpl.n	80007f4 <checkAltitude+0x28>
		descendFlag+= 1;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <checkAltitude+0x58>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a0c      	ldr	r2, [pc, #48]	; (8000824 <checkAltitude+0x58>)
 80007f2:	6013      	str	r3, [r2, #0]
	}
    if (altitude >= maxAltitude){
 80007f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80007f8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000828 <checkAltitude+0x5c>
 80007fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000804:	db01      	blt.n	800080a <checkAltitude+0x3e>
        return 1;
 8000806:	2301      	movs	r3, #1
 8000808:	e003      	b.n	8000812 <checkAltitude+0x46>
    }
    prevAltitude = altitude;
 800080a:	4a05      	ldr	r2, [pc, #20]	; (8000820 <checkAltitude+0x54>)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6013      	str	r3, [r2, #0]
    return 0;
 8000810:	2300      	movs	r3, #0
}
 8000812:	4618      	mov	r0, r3
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	240007e4 	.word	0x240007e4
 8000824:	240007e0 	.word	0x240007e0
 8000828:	46ea6000 	.word	0x46ea6000
 800082c:	00000000 	.word	0x00000000

08000830 <checkLocation>:

/**
 * @brief Checks if the current location is within acceptable range and calls cutBalloon if not.
 */
void checkLocation(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
   // float longitude = function.longitude();
   // float latitude = function.latitude();
   // float altitude = function.altitude();

	//placeholders so program can build
    float longitude = 0;
 8000836:	f04f 0300 	mov.w	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
    float latitude = 0;
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
    float altitude = 0;
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	607b      	str	r3, [r7, #4]

    //checking if the current location is within the min and max longitude
    if (longitude < maxLongitude && longitude > minLongitude){
 8000848:	edd7 7a03 	vldr	s15, [r7, #12]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80008c0 <checkLocation+0x90>
 8000854:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800085c:	d528      	bpl.n	80008b0 <checkLocation+0x80>
 800085e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000862:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000866:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80008c8 <checkLocation+0x98>
 800086a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800086e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000872:	dd1d      	ble.n	80008b0 <checkLocation+0x80>

    	//checking if the current location is within the min and max latitude
        if(latitude < maxLatitude && latitude > minLatitude){
 8000874:	edd7 7a02 	vldr	s15, [r7, #8]
 8000878:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800087c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 80008d0 <checkLocation+0xa0>
 8000880:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000888:	d512      	bpl.n	80008b0 <checkLocation+0x80>
 800088a:	edd7 7a02 	vldr	s15, [r7, #8]
 800088e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80008d8 <checkLocation+0xa8>
 8000892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800089a:	dd09      	ble.n	80008b0 <checkLocation+0x80>

        	//checking if it is lower than the max altitude
            if(checkAltitude(altitude) == 1){
 800089c:	ed97 0a01 	vldr	s0, [r7, #4]
 80008a0:	f7ff ff94 	bl	80007cc <checkAltitude>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d105      	bne.n	80008b6 <checkLocation+0x86>
                lowPowerMode();
 80008aa:	f7ff ff61 	bl	8000770 <lowPowerMode>
                return;
 80008ae:	e003      	b.n	80008b8 <checkLocation+0x88>
            }
            return;
        }
    }

    cutBalloon();
 80008b0:	f7ff ff52 	bl	8000758 <cutBalloon>
 80008b4:	e000      	b.n	80008b8 <checkLocation+0x88>
            return;
 80008b6:	bf00      	nop
}
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	33333333 	.word	0x33333333
 80008c4:	c05f3333 	.word	0xc05f3333
 80008c8:	33333333 	.word	0x33333333
 80008cc:	c05fd333 	.word	0xc05fd333
 80008d0:	66666666 	.word	0x66666666
 80008d4:	40492666 	.word	0x40492666
 80008d8:	42440000 	.word	0x42440000

080008dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e0:	f000 fe2e 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e4:	f000 f81e 	bl	8000924 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e8:	f000 f9de 	bl	8000ca8 <MX_GPIO_Init>
  MX_ETH_Init();
 80008ec:	f000 f912 	bl	8000b14 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 f95c 	bl	8000bac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80008f4:	f000 f9a6 	bl	8000c44 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 80008f8:	f000 f894 	bl	8000a24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008fc:	f008 fd2c 	bl	8009358 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PollingLoop */
  PollingLoopHandle = osThreadNew(startPollingLoop, NULL, &PollingLoop_attributes);
 8000900:	4a05      	ldr	r2, [pc, #20]	; (8000918 <main+0x3c>)
 8000902:	2100      	movs	r1, #0
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <main+0x40>)
 8000906:	f008 fd71 	bl	80093ec <osThreadNew>
 800090a:	4603      	mov	r3, r0
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <main+0x44>)
 800090e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000910:	f008 fd46 	bl	80093a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000914:	e7fe      	b.n	8000914 <main+0x38>
 8000916:	bf00      	nop
 8000918:	0800be0c 	.word	0x0800be0c
 800091c:	08000e61 	.word	0x08000e61
 8000920:	240007dc 	.word	0x240007dc

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	; 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	224c      	movs	r2, #76	; 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f00b fa12 	bl	800bd5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f00b fa0c 	bl	800bd5c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000944:	2002      	movs	r0, #2
 8000946:	f003 fbc5 	bl	80040d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <SystemClock_Config+0xf8>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	4a32      	ldr	r2, [pc, #200]	; (8000a1c <SystemClock_Config+0xf8>)
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	62d3      	str	r3, [r2, #44]	; 0x2c
 800095a:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <SystemClock_Config+0xf8>)
 800095c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <SystemClock_Config+0xfc>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800096c:	4a2c      	ldr	r2, [pc, #176]	; (8000a20 <SystemClock_Config+0xfc>)
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b2a      	ldr	r3, [pc, #168]	; (8000a20 <SystemClock_Config+0xfc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b27      	ldr	r3, [pc, #156]	; (8000a20 <SystemClock_Config+0xfc>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000990:	2303      	movs	r3, #3
 8000992:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000994:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099a:	2301      	movs	r3, #1
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099e:	2340      	movs	r3, #64	; 0x40
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a6:	2302      	movs	r3, #2
 80009a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009aa:	2301      	movs	r3, #1
 80009ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80009ae:	2318      	movs	r3, #24
 80009b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b2:	2302      	movs	r3, #2
 80009b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b6:	2304      	movs	r3, #4
 80009b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009be:	230c      	movs	r3, #12
 80009c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fbca 	bl	8004168 <HAL_RCC_OscConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80009da:	f000 fa71 	bl	8000ec0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009de:	233f      	movs	r3, #63	; 0x3f
 80009e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f004 f80a 	bl	8004a1c <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000a0e:	f000 fa57 	bl	8000ec0 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	; 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000400 	.word	0x58000400
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a2a:	f107 031c 	add.w	r3, r7, #28
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a4a:	4a30      	ldr	r2, [pc, #192]	; (8000b0c <MX_ADC1_Init+0xe8>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a8a:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aa4:	4818      	ldr	r0, [pc, #96]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000aa6:	f001 f853 	bl	8001b50 <HAL_ADC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ab0:	f000 fa06 	bl	8000ec0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ab8:	f107 031c 	add.w	r3, r7, #28
 8000abc:	4619      	mov	r1, r3
 8000abe:	4812      	ldr	r0, [pc, #72]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000ac0:	f002 fa10 	bl	8002ee4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000aca:	f000 f9f9 	bl	8000ec0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <MX_ADC1_Init+0xec>)
 8000ad0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ada:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ade:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_ADC1_Init+0xe4>)
 8000af2:	f001 fbcf 	bl	8002294 <HAL_ADC_ConfigChannel>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000afc:	f000 f9e0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	; 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	24000128 	.word	0x24000128
 8000b0c:	40022000 	.word	0x40022000
 8000b10:	3ef08000 	.word	0x3ef08000

08000b14 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <MX_ETH_Init+0x84>)
 8000b1c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b2a:	4b1c      	ldr	r3, [pc, #112]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b2c:	22e1      	movs	r2, #225	; 0xe1
 8000b2e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <MX_ETH_Init+0x88>)
 8000b46:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_ETH_Init+0x8c>)
 8000b52:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_ETH_Init+0x90>)
 8000b58:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b5c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b60:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b62:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_ETH_Init+0x80>)
 8000b64:	f002 fb80 	bl	8003268 <HAL_ETH_Init>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b6e:	f000 f9a7 	bl	8000ec0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b72:	2238      	movs	r2, #56	; 0x38
 8000b74:	2100      	movs	r1, #0
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b78:	f00b f8f0 	bl	800bd5c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b7e:	2221      	movs	r2, #33	; 0x21
 8000b80:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b88:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <MX_ETH_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	2400018c 	.word	0x2400018c
 8000b98:	40028000 	.word	0x40028000
 8000b9c:	240007e8 	.word	0x240007e8
 8000ba0:	24000074 	.word	0x24000074
 8000ba4:	24000014 	.word	0x24000014
 8000ba8:	240000f0 	.word	0x240000f0

08000bac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART3_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000bf6:	f006 ff9b 	bl	8007b30 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f95e 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c08:	f007 ff9d 	bl	8008b46 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f000 f955 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c1a:	f007 ffd2 	bl	8008bc2 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f000 f94c 	bl	8000ec0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f007 ff53 	bl	8008ad4 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f000 f944 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	2400023c 	.word	0x2400023c
 8000c40:	40004800 	.word	0x40004800

08000c44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c48:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c4a:	4a16      	ldr	r2, [pc, #88]	; (8000ca4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c50:	2209      	movs	r2, #9
 8000c52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c56:	2202      	movs	r2, #2
 8000c58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c62:	2202      	movs	r2, #2
 8000c64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8c:	f003 f8d9 	bl	8003e42 <HAL_PCD_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000c96:	f000 f913 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	240002d0 	.word	0x240002d0
 8000ca4:	40080000 	.word	0x40080000

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08c      	sub	sp, #48	; 0x30
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 031c 	add.w	r3, r7, #28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc4:	4a60      	ldr	r2, [pc, #384]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cce:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
 8000cda:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a59      	ldr	r2, [pc, #356]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b53      	ldr	r3, [pc, #332]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d00:	4a51      	ldr	r2, [pc, #324]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d0a:	4b4f      	ldr	r3, [pc, #316]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b4b      	ldr	r3, [pc, #300]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1e:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d28:	4b47      	ldr	r3, [pc, #284]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b44      	ldr	r3, [pc, #272]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3c:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d46:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d54:	4b3c      	ldr	r3, [pc, #240]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5a:	4a3b      	ldr	r2, [pc, #236]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d64:	4b38      	ldr	r3, [pc, #224]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d72:	4b35      	ldr	r3, [pc, #212]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d78:	4a33      	ldr	r2, [pc, #204]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d7a:	f043 0310 	orr.w	r3, r3, #16
 8000d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d82:	4b31      	ldr	r3, [pc, #196]	; (8000e48 <MX_GPIO_Init+0x1a0>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	f003 0310 	and.w	r3, r3, #16
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d96:	482d      	ldr	r0, [pc, #180]	; (8000e4c <MX_GPIO_Init+0x1a4>)
 8000d98:	f003 f83a 	bl	8003e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	482b      	ldr	r0, [pc, #172]	; (8000e50 <MX_GPIO_Init+0x1a8>)
 8000da4:	f003 f834 	bl	8003e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2102      	movs	r1, #2
 8000dac:	4829      	ldr	r0, [pc, #164]	; (8000e54 <MX_GPIO_Init+0x1ac>)
 8000dae:	f003 f82f 	bl	8003e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4824      	ldr	r0, [pc, #144]	; (8000e58 <MX_GPIO_Init+0x1b0>)
 8000dc8:	f002 fe72 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dcc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000dd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	4819      	ldr	r0, [pc, #100]	; (8000e4c <MX_GPIO_Init+0x1a4>)
 8000de6:	f002 fe63 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4813      	ldr	r0, [pc, #76]	; (8000e50 <MX_GPIO_Init+0x1a8>)
 8000e04:	f002 fe54 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480f      	ldr	r0, [pc, #60]	; (8000e5c <MX_GPIO_Init+0x1b4>)
 8000e1e:	f002 fe47 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4806      	ldr	r0, [pc, #24]	; (8000e54 <MX_GPIO_Init+0x1ac>)
 8000e3a:	f002 fe39 	bl	8003ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e3e:	bf00      	nop
 8000e40:	3730      	adds	r7, #48	; 0x30
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	58024400 	.word	0x58024400
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58021000 	.word	0x58021000
 8000e58:	58020800 	.word	0x58020800
 8000e5c:	58021800 	.word	0x58021800

08000e60 <startPollingLoop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startPollingLoop */
void startPollingLoop(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int time1Min = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
	int time10Min = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]

	for(;;){

		//checking if 1 minute has passed
		if(HAL_GetTick() - time1Min >= 60000){
 8000e70:	f000 fbec 	bl	800164c <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d907      	bls.n	8000e92 <startPollingLoop+0x32>
		time1Min = HAL_GetTick();
 8000e82:	f000 fbe3 	bl	800164c <HAL_GetTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	60fb      	str	r3, [r7, #12]

		//checking battery percentage
		checkBattery();
 8000e8a:	f7ff fc87 	bl	800079c <checkBattery>

		//checking current location
		checkLocation();
 8000e8e:	f7ff fccf 	bl	8000830 <checkLocation>
		//logData(longitude, latitude, altitude);
		}

		//checking if 10 minutes have passed
		if(HAL_GetTick() - time10Min >= 600000){
 8000e92:	f000 fbdb 	bl	800164c <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <startPollingLoop+0x58>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d9e6      	bls.n	8000e70 <startPollingLoop+0x10>
			time10Min = HAL_GetTick();
 8000ea2:	f000 fbd3 	bl	800164c <HAL_GetTick>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	60bb      	str	r3, [r7, #8]

			if(descendFlag >= 10){
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <startPollingLoop+0x5c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2b09      	cmp	r3, #9
 8000eb0:	ddde      	ble.n	8000e70 <startPollingLoop+0x10>
				lowPowerMode();
 8000eb2:	f7ff fc5d 	bl	8000770 <lowPowerMode>
		if(HAL_GetTick() - time1Min >= 60000){
 8000eb6:	e7db      	b.n	8000e70 <startPollingLoop+0x10>
 8000eb8:	000927bf 	.word	0x000927bf
 8000ebc:	240007e0 	.word	0x240007e0

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>
	...

08000ecc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x38>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_MspInit+0x38>)
 8000eda:	f043 0302 	orr.w	r3, r3, #2
 8000ede:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_MspInit+0x38>)
 8000ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ee8:	f003 0302 	and.w	r3, r3, #2
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	210f      	movs	r1, #15
 8000ef4:	f06f 0001 	mvn.w	r0, #1
 8000ef8:	f002 f98f 	bl	800321a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	58024400 	.word	0x58024400

08000f08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0bc      	sub	sp, #240	; 0xf0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f20:	f107 0318 	add.w	r3, r7, #24
 8000f24:	22c0      	movs	r2, #192	; 0xc0
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00a ff17 	bl	800bd5c <memset>
  if(hadc->Instance==ADC1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a3a      	ldr	r2, [pc, #232]	; (800101c <HAL_ADC_MspInit+0x114>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d16d      	bne.n	8001014 <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000f44:	2320      	movs	r3, #32
 8000f46:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000f48:	2381      	movs	r3, #129	; 0x81
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000f50:	2302      	movs	r3, #2
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000f58:	23c0      	movs	r3, #192	; 0xc0
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f004 f8e0 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000f7a:	f7ff ffa1 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f7e:	4b28      	ldr	r3, [pc, #160]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000f80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000f86:	f043 0320 	orr.w	r3, r3, #32
 8000f8a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f94:	f003 0320 	and.w	r3, r3, #32
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9c:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000fa4:	f043 0304 	orr.w	r3, r3, #4
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fca:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_ADC_MspInit+0x118>)
 8000fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fea:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fee:	4619      	mov	r1, r3
 8000ff0:	480c      	ldr	r0, [pc, #48]	; (8001024 <HAL_ADC_MspInit+0x11c>)
 8000ff2:	f002 fd5d 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800100c:	4619      	mov	r1, r3
 800100e:	4806      	ldr	r0, [pc, #24]	; (8001028 <HAL_ADC_MspInit+0x120>)
 8001010:	f002 fd4e 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001014:	bf00      	nop
 8001016:	37f0      	adds	r7, #240	; 0xf0
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40022000 	.word	0x40022000
 8001020:	58024400 	.word	0x58024400
 8001024:	58020800 	.word	0x58020800
 8001028:	58020000 	.word	0x58020000

0800102c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08e      	sub	sp, #56	; 0x38
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a59      	ldr	r2, [pc, #356]	; (80011b0 <HAL_ETH_MspInit+0x184>)
 800104a:	4293      	cmp	r3, r2
 800104c:	f040 80ab 	bne.w	80011a6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001050:	4b58      	ldr	r3, [pc, #352]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001052:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001056:	4a57      	ldr	r2, [pc, #348]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001060:	4b54      	ldr	r3, [pc, #336]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001074:	4a4f      	ldr	r2, [pc, #316]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107e:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	61fb      	str	r3, [r7, #28]
 800108a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800108e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001092:	4a48      	ldr	r2, [pc, #288]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800109c:	4b45      	ldr	r3, [pc, #276]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800109e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	4a40      	ldr	r2, [pc, #256]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	f003 0304 	and.w	r3, r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	4a39      	ldr	r2, [pc, #228]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d8:	4b36      	ldr	r3, [pc, #216]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a31      	ldr	r2, [pc, #196]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001104:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a2a      	ldr	r2, [pc, #168]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 800110c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <HAL_ETH_MspInit+0x188>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001122:	2332      	movs	r3, #50	; 0x32
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001132:	230b      	movs	r3, #11
 8001134:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113a:	4619      	mov	r1, r3
 800113c:	481e      	ldr	r0, [pc, #120]	; (80011b8 <HAL_ETH_MspInit+0x18c>)
 800113e:	f002 fcb7 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001142:	2386      	movs	r3, #134	; 0x86
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001152:	230b      	movs	r3, #11
 8001154:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4817      	ldr	r0, [pc, #92]	; (80011bc <HAL_ETH_MspInit+0x190>)
 800115e:	f002 fca7 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001174:	230b      	movs	r3, #11
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800117c:	4619      	mov	r1, r3
 800117e:	4810      	ldr	r0, [pc, #64]	; (80011c0 <HAL_ETH_MspInit+0x194>)
 8001180:	f002 fc96 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001184:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001196:	230b      	movs	r3, #11
 8001198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	4619      	mov	r1, r3
 80011a0:	4808      	ldr	r0, [pc, #32]	; (80011c4 <HAL_ETH_MspInit+0x198>)
 80011a2:	f002 fc85 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3738      	adds	r7, #56	; 0x38
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40028000 	.word	0x40028000
 80011b4:	58024400 	.word	0x58024400
 80011b8:	58020800 	.word	0x58020800
 80011bc:	58020000 	.word	0x58020000
 80011c0:	58020400 	.word	0x58020400
 80011c4:	58021800 	.word	0x58021800

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b0ba      	sub	sp, #232	; 0xe8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	22c0      	movs	r2, #192	; 0xc0
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00a fdb7 	bl	800bd5c <memset>
  if(huart->Instance==USART3)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <HAL_UART_MspInit+0xc8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d146      	bne.n	8001286 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011f8:	f04f 0202 	mov.w	r2, #2
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800120a:	f107 0310 	add.w	r3, r7, #16
 800120e:	4618      	mov	r0, r3
 8001210:	f003 ff90 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800121a:	f7ff fe51 	bl	8000ec0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_UART_MspInit+0xcc>)
 8001220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <HAL_UART_MspInit+0xcc>)
 8001226:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <HAL_UART_MspInit+0xcc>)
 8001230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <HAL_UART_MspInit+0xcc>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001242:	4a14      	ldr	r2, [pc, #80]	; (8001294 <HAL_UART_MspInit+0xcc>)
 8001244:	f043 0308 	orr.w	r3, r3, #8
 8001248:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <HAL_UART_MspInit+0xcc>)
 800124e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800125a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001274:	2307      	movs	r3, #7
 8001276:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800127e:	4619      	mov	r1, r3
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <HAL_UART_MspInit+0xd0>)
 8001282:	f002 fc15 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001286:	bf00      	nop
 8001288:	37e8      	adds	r7, #232	; 0xe8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40004800 	.word	0x40004800
 8001294:	58024400 	.word	0x58024400
 8001298:	58020c00 	.word	0x58020c00

0800129c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b0ba      	sub	sp, #232	; 0xe8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	22c0      	movs	r2, #192	; 0xc0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f00a fd4d 	bl	800bd5c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a30      	ldr	r2, [pc, #192]	; (8001388 <HAL_PCD_MspInit+0xec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d159      	bne.n	8001380 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80012d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80012dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4618      	mov	r0, r3
 80012e6:	f003 ff25 	bl	8005134 <HAL_RCCEx_PeriphCLKConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80012f0:	f7ff fde6 	bl	8000ec0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80012f4:	f002 ff28 	bl	8004148 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_PCD_MspInit+0xf0>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <HAL_PCD_MspInit+0xf0>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001308:	4b20      	ldr	r3, [pc, #128]	; (800138c <HAL_PCD_MspInit+0xf0>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001316:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800131a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001330:	230a      	movs	r3, #10
 8001332:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800133a:	4619      	mov	r1, r3
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <HAL_PCD_MspInit+0xf4>)
 800133e:	f002 fbb7 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001342:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001346:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800135a:	4619      	mov	r1, r3
 800135c:	480c      	ldr	r0, [pc, #48]	; (8001390 <HAL_PCD_MspInit+0xf4>)
 800135e:	f002 fba7 	bl	8003ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <HAL_PCD_MspInit+0xf0>)
 8001364:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001368:	4a08      	ldr	r2, [pc, #32]	; (800138c <HAL_PCD_MspInit+0xf0>)
 800136a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800136e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_PCD_MspInit+0xf0>)
 8001374:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001380:	bf00      	nop
 8001382:	37e8      	adds	r7, #232	; 0xe8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40080000 	.word	0x40080000
 800138c:	58024400 	.word	0x58024400
 8001390:	58020000 	.word	0x58020000

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013c4:	f000 f92e 	bl	8001624 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013c8:	f009 fc60 	bl	800ac8c <xTaskGetSchedulerState>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013d2:	f00a fa49 	bl	800b868 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013e0:	4b37      	ldr	r3, [pc, #220]	; (80014c0 <SystemInit+0xe4>)
 80013e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <SystemInit+0xe4>)
 80013e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <SystemInit+0xe8>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	2b06      	cmp	r3, #6
 80013fa:	d807      	bhi.n	800140c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <SystemInit+0xe8>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f023 030f 	bic.w	r3, r3, #15
 8001404:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <SystemInit+0xe8>)
 8001406:	f043 0307 	orr.w	r3, r3, #7
 800140a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <SystemInit+0xec>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <SystemInit+0xec>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <SystemInit+0xec>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <SystemInit+0xec>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4929      	ldr	r1, [pc, #164]	; (80014c8 <SystemInit+0xec>)
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <SystemInit+0xf0>)
 8001426:	4013      	ands	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <SystemInit+0xe8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d007      	beq.n	8001446 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001436:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <SystemInit+0xe8>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 030f 	bic.w	r3, r3, #15
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <SystemInit+0xe8>)
 8001440:	f043 0307 	orr.w	r3, r3, #7
 8001444:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <SystemInit+0xec>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <SystemInit+0xec>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <SystemInit+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <SystemInit+0xec>)
 800145a:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <SystemInit+0xf4>)
 800145c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <SystemInit+0xec>)
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <SystemInit+0xf8>)
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <SystemInit+0xec>)
 8001466:	4a1c      	ldr	r2, [pc, #112]	; (80014d8 <SystemInit+0xfc>)
 8001468:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <SystemInit+0xec>)
 800146c:	2200      	movs	r2, #0
 800146e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <SystemInit+0xec>)
 8001472:	4a19      	ldr	r2, [pc, #100]	; (80014d8 <SystemInit+0xfc>)
 8001474:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <SystemInit+0xec>)
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <SystemInit+0xec>)
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <SystemInit+0xfc>)
 8001480:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <SystemInit+0xec>)
 8001484:	2200      	movs	r2, #0
 8001486:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <SystemInit+0xec>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <SystemInit+0xec>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <SystemInit+0xec>)
 8001496:	2200      	movs	r2, #0
 8001498:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <SystemInit+0x100>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <SystemInit+0x104>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014a6:	d202      	bcs.n	80014ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <SystemInit+0x108>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <SystemInit+0x10c>)
 80014b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80014b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00
 80014c4:	52002000 	.word	0x52002000
 80014c8:	58024400 	.word	0x58024400
 80014cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80014d0:	02020200 	.word	0x02020200
 80014d4:	01ff0000 	.word	0x01ff0000
 80014d8:	01010280 	.word	0x01010280
 80014dc:	5c001000 	.word	0x5c001000
 80014e0:	ffff0000 	.word	0xffff0000
 80014e4:	51008108 	.word	0x51008108
 80014e8:	52004000 	.word	0x52004000

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014f0:	f7ff ff74 	bl	80013dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151a:	f00a fc27 	bl	800bd6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff f9dd 	bl	80008dc <main>
  bx  lr
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001528:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800152c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001530:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8001534:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001538:	24005144 	.word	0x24005144

0800153c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC3_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001546:	2003      	movs	r0, #3
 8001548:	f001 fe5c 	bl	8003204 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800154c:	f003 fc1c 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8001550:	4602      	mov	r2, r0
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <HAL_Init+0x68>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	0a1b      	lsrs	r3, r3, #8
 8001558:	f003 030f 	and.w	r3, r3, #15
 800155c:	4913      	ldr	r1, [pc, #76]	; (80015ac <HAL_Init+0x6c>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	f003 031f 	and.w	r3, r3, #31
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_Init+0x68>)
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <HAL_Init+0x6c>)
 8001574:	5cd3      	ldrb	r3, [r2, r3]
 8001576:	f003 031f 	and.w	r3, r3, #31
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <HAL_Init+0x70>)
 8001582:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001584:	4a0b      	ldr	r2, [pc, #44]	; (80015b4 <HAL_Init+0x74>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800158a:	200f      	movs	r0, #15
 800158c:	f000 f814 	bl	80015b8 <HAL_InitTick>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e002      	b.n	80015a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800159a:	f7ff fc97 	bl	8000ecc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024400 	.word	0x58024400
 80015ac:	0800be30 	.word	0x0800be30
 80015b0:	24000004 	.word	0x24000004
 80015b4:	24000000 	.word	0x24000000

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_InitTick+0x60>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e021      	b.n	8001610 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_InitTick+0x64>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_InitTick+0x60>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f001 fe33 	bl	800324e <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f001 fe0b 	bl	800321a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x68>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400000c 	.word	0x2400000c
 800161c:	24000000 	.word	0x24000000
 8001620:	24000008 	.word	0x24000008

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	2400000c 	.word	0x2400000c
 8001648:	240007f0 	.word	0x240007f0

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	240007f0 	.word	0x240007f0

08001664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff ffee 	bl	800164c <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800167c:	d005      	beq.n	800168a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <HAL_Delay+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4413      	add	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168a:	bf00      	nop
 800168c:	f7ff ffde 	bl	800164c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	429a      	cmp	r2, r3
 800169a:	d8f7      	bhi.n	800168c <HAL_Delay+0x28>
  {
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	2400000c 	.word	0x2400000c

080016ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <HAL_GetREVID+0x14>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	0c1b      	lsrs	r3, r3, #16
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	5c001000 	.word	0x5c001000

080016c4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80016d4:	4904      	ldr	r1, [pc, #16]	; (80016e8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58000400 	.word	0x58000400

080016ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	609a      	str	r2, [r3, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
 8001760:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	3360      	adds	r3, #96	; 0x60
 8001766:	461a      	mov	r2, r3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	430b      	orrs	r3, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001788:	bf00      	nop
 800178a:	371c      	adds	r7, #28
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	f003 031f 	and.w	r3, r3, #31
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	fa01 f303 	lsl.w	r3, r1, r3
 80017b4:	431a      	orrs	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	611a      	str	r2, [r3, #16]
}
 80017ba:	bf00      	nop
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b087      	sub	sp, #28
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3360      	adds	r3, #96	; 0x60
 80017d6:	461a      	mov	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	601a      	str	r2, [r3, #0]
  }
}
 80017f0:	bf00      	nop
 80017f2:	371c      	adds	r7, #28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001822:	b480      	push	{r7}
 8001824:	b087      	sub	sp, #28
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3330      	adds	r3, #48	; 0x30
 8001832:	461a      	mov	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	4413      	add	r3, r2
 8001840:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f003 031f 	and.w	r3, r3, #31
 800184c:	211f      	movs	r1, #31
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	401a      	ands	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0e9b      	lsrs	r3, r3, #26
 800185a:	f003 011f 	and.w	r1, r3, #31
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	f003 031f 	and.w	r3, r3, #31
 8001864:	fa01 f303 	lsl.w	r3, r1, r3
 8001868:	431a      	orrs	r2, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800187a:	b480      	push	{r7}
 800187c:	b087      	sub	sp, #28
 800187e:	af00      	add	r7, sp, #0
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3314      	adds	r3, #20
 800188a:	461a      	mov	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	0e5b      	lsrs	r3, r3, #25
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	4413      	add	r3, r2
 8001898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	0d1b      	lsrs	r3, r3, #20
 80018a2:	f003 031f 	and.w	r3, r3, #31
 80018a6:	2107      	movs	r1, #7
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	401a      	ands	r2, r3
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	0d1b      	lsrs	r3, r3, #20
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	6879      	ldr	r1, [r7, #4]
 80018ba:	fa01 f303 	lsl.w	r3, r1, r3
 80018be:	431a      	orrs	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018c4:	bf00      	nop
 80018c6:	371c      	adds	r7, #28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f003 0318 	and.w	r3, r3, #24
 80018f2:	4908      	ldr	r1, [pc, #32]	; (8001914 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018f4:	40d9      	lsrs	r1, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	400b      	ands	r3, r1
 80018fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80018fe:	431a      	orrs	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	000fffff 	.word	0x000fffff

08001918 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 031f 	and.w	r3, r3, #31
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001944:	4618      	mov	r0, r3
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <LL_ADC_DisableDeepPowerDown+0x20>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	6093      	str	r3, [r2, #8]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	5fffffc0 	.word	0x5fffffc0

08001974 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d101      	bne.n	800198e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LL_ADC_EnableInternalRegulator+0x24>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	6fffffc0 	.word	0x6fffffc0

080019c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80019d8:	d101      	bne.n	80019de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <LL_ADC_Enable+0x24>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	7fffffc0 	.word	0x7fffffc0

08001a14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <LL_ADC_Disable+0x24>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	f043 0202 	orr.w	r2, r3, #2
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	7fffffc0 	.word	0x7fffffc0

08001a3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <LL_ADC_IsEnabled+0x18>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <LL_ADC_IsEnabled+0x1a>
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d101      	bne.n	8001a7a <LL_ADC_IsDisableOngoing+0x18>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <LL_ADC_IsDisableOngoing+0x1a>
 8001a7a:	2300      	movs	r3, #0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_ADC_REG_StartConversion+0x24>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	f043 0204 	orr.w	r2, r3, #4
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	7fffffc0 	.word	0x7fffffc0

08001ab0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <LL_ADC_REG_StopConversion+0x24>)
 8001abe:	4013      	ands	r3, r2
 8001ac0:	f043 0210 	orr.w	r2, r3, #16
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	7fffffc0 	.word	0x7fffffc0

08001ad8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d101      	bne.n	8001af0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aec:	2301      	movs	r3, #1
 8001aee:	e000      	b.n	8001af2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <LL_ADC_INJ_StopConversion+0x24>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	f043 0220 	orr.w	r2, r3, #32
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	7fffffc0 	.word	0x7fffffc0

08001b28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d101      	bne.n	8001b40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e000      	b.n	8001b42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b089      	sub	sp, #36	; 0x24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e18f      	b.n	8001e8a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff f9c5 	bl	8000f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff feef 	bl	8001974 <LL_ADC_IsDeepPowerDownEnabled>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fed5 	bl	8001950 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff ff0a 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d114      	bne.n	8001be0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff feee 	bl	800199c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bc0:	4b87      	ldr	r3, [pc, #540]	; (8001de0 <HAL_ADC_Init+0x290>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	099b      	lsrs	r3, r3, #6
 8001bc6:	4a87      	ldr	r2, [pc, #540]	; (8001de4 <HAL_ADC_Init+0x294>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	099b      	lsrs	r3, r3, #6
 8001bce:	3301      	adds	r3, #1
 8001bd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bd2:	e002      	b.n	8001bda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff feed 	bl	80019c4 <LL_ADC_IsInternalRegulatorEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10d      	bne.n	8001c0c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf4:	f043 0210 	orr.w	r2, r3, #16
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c00:	f043 0201 	orr.w	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff61 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 8001c16:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 8129 	bne.w	8001e78 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 8125 	bne.w	8001e78 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c36:	f043 0202 	orr.w	r2, r3, #2
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fefa 	bl	8001a3c <LL_ADC_IsEnabled>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d136      	bne.n	8001cbc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d004      	beq.n	8001c62 <HAL_ADC_Init+0x112>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a63      	ldr	r2, [pc, #396]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d10e      	bne.n	8001c80 <HAL_ADC_Init+0x130>
 8001c62:	4861      	ldr	r0, [pc, #388]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c64:	f7ff feea 	bl	8001a3c <LL_ADC_IsEnabled>
 8001c68:	4604      	mov	r4, r0
 8001c6a:	4860      	ldr	r0, [pc, #384]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001c6c:	f7ff fee6 	bl	8001a3c <LL_ADC_IsEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4323      	orrs	r3, r4
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf0c      	ite	eq
 8001c78:	2301      	moveq	r3, #1
 8001c7a:	2300      	movne	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	e008      	b.n	8001c92 <HAL_ADC_Init+0x142>
 8001c80:	485b      	ldr	r0, [pc, #364]	; (8001df0 <HAL_ADC_Init+0x2a0>)
 8001c82:	f7ff fedb 	bl	8001a3c <LL_ADC_IsEnabled>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a53      	ldr	r2, [pc, #332]	; (8001de8 <HAL_ADC_Init+0x298>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d004      	beq.n	8001caa <HAL_ADC_Init+0x15a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a51      	ldr	r2, [pc, #324]	; (8001dec <HAL_ADC_Init+0x29c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_ADC_Init+0x15e>
 8001caa:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_ADC_Init+0x2a4>)
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_Init+0x160>
 8001cae:	4a52      	ldr	r2, [pc, #328]	; (8001df8 <HAL_ADC_Init+0x2a8>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	f7ff fd18 	bl	80016ec <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001cbc:	f7ff fcf6 	bl	80016ac <HAL_GetREVID>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f241 0203 	movw	r2, #4099	; 0x1003
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d914      	bls.n	8001cf4 <HAL_ADC_Init+0x1a4>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d110      	bne.n	8001cf4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	7d5b      	ldrb	r3, [r3, #21]
 8001cd6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cdc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ce2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7f1b      	ldrb	r3, [r3, #28]
 8001ce8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001cea:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cec:	f043 030c 	orr.w	r3, r3, #12
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	e00d      	b.n	8001d10 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7d5b      	ldrb	r3, [r3, #21]
 8001cf8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001cfe:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001d04:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7f1b      	ldrb	r3, [r3, #28]
 8001d0a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7f1b      	ldrb	r3, [r3, #28]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	045b      	lsls	r3, r3, #17
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d009      	beq.n	8001d42 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	4b2c      	ldr	r3, [pc, #176]	; (8001dfc <HAL_ADC_Init+0x2ac>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	69b9      	ldr	r1, [r7, #24]
 8001d52:	430b      	orrs	r3, r1
 8001d54:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff febc 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 8001d60:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fede 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8001d6c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d15f      	bne.n	8001e34 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d15c      	bne.n	8001e34 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7d1b      	ldrb	r3, [r3, #20]
 8001d7e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	68da      	ldr	r2, [r3, #12]
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <HAL_ADC_Init+0x2b0>)
 8001d90:	4013      	ands	r3, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6812      	ldr	r2, [r2, #0]
 8001d96:	69b9      	ldr	r1, [r7, #24]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d130      	bne.n	8001e08 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_ADC_Init+0x2b4>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dba:	3a01      	subs	r2, #1
 8001dbc:	0411      	lsls	r1, r2, #16
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc8:	4311      	orrs	r1, r2
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f042 0201 	orr.w	r2, r2, #1
 8001dda:	611a      	str	r2, [r3, #16]
 8001ddc:	e01c      	b.n	8001e18 <HAL_ADC_Init+0x2c8>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	053e2d63 	.word	0x053e2d63
 8001de8:	40022000 	.word	0x40022000
 8001dec:	40022100 	.word	0x40022100
 8001df0:	58026000 	.word	0x58026000
 8001df4:	40022300 	.word	0x40022300
 8001df8:	58026300 	.word	0x58026300
 8001dfc:	fff0c003 	.word	0xfff0c003
 8001e00:	ffffbffc 	.word	0xffffbffc
 8001e04:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 0201 	bic.w	r2, r2, #1
 8001e16:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 ff26 	bl	8002c80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d10c      	bne.n	8001e56 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f023 010f 	bic.w	r1, r3, #15
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
 8001e54:	e007      	b.n	8001e66 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 020f 	bic.w	r2, r2, #15
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	655a      	str	r2, [r3, #84]	; 0x54
 8001e76:	e007      	b.n	8001e88 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0210 	orr.w	r2, r3, #16
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3724      	adds	r7, #36	; 0x24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	bf00      	nop

08001e94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a5c      	ldr	r2, [pc, #368]	; (8002014 <HAL_ADC_Start+0x180>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d004      	beq.n	8001eb0 <HAL_ADC_Start+0x1c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a5b      	ldr	r2, [pc, #364]	; (8002018 <HAL_ADC_Start+0x184>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_Start+0x20>
 8001eb0:	4b5a      	ldr	r3, [pc, #360]	; (800201c <HAL_ADC_Start+0x188>)
 8001eb2:	e000      	b.n	8001eb6 <HAL_ADC_Start+0x22>
 8001eb4:	4b5a      	ldr	r3, [pc, #360]	; (8002020 <HAL_ADC_Start+0x18c>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd2e 	bl	8001918 <LL_ADC_GetMultimode>
 8001ebc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fe08 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 809a 	bne.w	8002004 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Start+0x4a>
 8001eda:	2302      	movs	r3, #2
 8001edc:	e095      	b.n	800200a <HAL_ADC_Start+0x176>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fde0 	bl	8002aac <ADC_Enable>
 8001eec:	4603      	mov	r3, r0
 8001eee:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8081 	bne.w	8001ffa <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001efc:	4b49      	ldr	r3, [pc, #292]	; (8002024 <HAL_ADC_Start+0x190>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_ADC_Start+0x184>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d002      	beq.n	8001f18 <HAL_ADC_Start+0x84>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_Start+0x86>
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_ADC_Start+0x180>)
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d002      	beq.n	8001f28 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f40:	d106      	bne.n	8001f50 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	f023 0206 	bic.w	r2, r3, #6
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f4e:	e002      	b.n	8001f56 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	221c      	movs	r2, #28
 8001f5c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a2b      	ldr	r2, [pc, #172]	; (8002018 <HAL_ADC_Start+0x184>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d002      	beq.n	8001f76 <HAL_ADC_Start+0xe2>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e000      	b.n	8001f78 <HAL_ADC_Start+0xe4>
 8001f76:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_ADC_Start+0x180>)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d008      	beq.n	8001f92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d002      	beq.n	8001f92 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	d114      	bne.n	8001fbc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001fa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fd67 	bl	8001a88 <LL_ADC_REG_StartConversion>
 8001fba:	e025      	b.n	8002008 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_ADC_Start+0x184>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d002      	beq.n	8001fd8 <HAL_ADC_Start+0x144>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e000      	b.n	8001fda <HAL_ADC_Start+0x146>
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_ADC_Start+0x180>)
 8001fda:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00f      	beq.n	8002008 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ff0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	655a      	str	r2, [r3, #84]	; 0x54
 8001ff8:	e006      	b.n	8002008 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002002:	e001      	b.n	8002008 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002008:	7dfb      	ldrb	r3, [r7, #23]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40022100 	.word	0x40022100
 800201c:	40022300 	.word	0x40022300
 8002020:	58026300 	.word	0x58026300
 8002024:	fffff0fe 	.word	0xfffff0fe

08002028 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_ADC_Stop+0x16>
 800203a:	2302      	movs	r3, #2
 800203c:	e021      	b.n	8002082 <HAL_ADC_Stop+0x5a>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002046:	2103      	movs	r1, #3
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 fc73 	bl	8002934 <ADC_ConversionStop>
 800204e:	4603      	mov	r3, r0
 8002050:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10f      	bne.n	8002078 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 fdb1 	bl	8002bc0 <ADC_Disable>
 800205e:	4603      	mov	r3, r0
 8002060:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800206c:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_ADC_Stop+0x64>)
 800206e:	4013      	ands	r3, r2
 8002070:	f043 0201 	orr.w	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	ffffeefe 	.word	0xffffeefe

08002090 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a72      	ldr	r2, [pc, #456]	; (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d004      	beq.n	80020ae <HAL_ADC_PollForConversion+0x1e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a70      	ldr	r2, [pc, #448]	; (800226c <HAL_ADC_PollForConversion+0x1dc>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_PollForConversion+0x22>
 80020ae:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_ADC_PollForConversion+0x1e0>)
 80020b0:	e000      	b.n	80020b4 <HAL_ADC_PollForConversion+0x24>
 80020b2:	4b70      	ldr	r3, [pc, #448]	; (8002274 <HAL_ADC_PollForConversion+0x1e4>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fc2f 	bl	8001918 <LL_ADC_GetMultimode>
 80020ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d102      	bne.n	80020ca <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80020c4:	2308      	movs	r3, #8
 80020c6:	61fb      	str	r3, [r7, #28]
 80020c8:	e037      	b.n	800213a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b05      	cmp	r3, #5
 80020d4:	d002      	beq.n	80020dc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b09      	cmp	r3, #9
 80020da:	d111      	bne.n	8002100 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d007      	beq.n	80020fa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0b1      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80020fa:	2304      	movs	r3, #4
 80020fc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80020fe:	e01c      	b.n	800213a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a58      	ldr	r2, [pc, #352]	; (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_ADC_PollForConversion+0x84>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a57      	ldr	r2, [pc, #348]	; (800226c <HAL_ADC_PollForConversion+0x1dc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_ADC_PollForConversion+0x88>
 8002114:	4b56      	ldr	r3, [pc, #344]	; (8002270 <HAL_ADC_PollForConversion+0x1e0>)
 8002116:	e000      	b.n	800211a <HAL_ADC_PollForConversion+0x8a>
 8002118:	4b56      	ldr	r3, [pc, #344]	; (8002274 <HAL_ADC_PollForConversion+0x1e4>)
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff fc0a 	bl	8001934 <LL_ADC_GetMultiDMATransfer>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d007      	beq.n	8002136 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e093      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002136:	2304      	movs	r3, #4
 8002138:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800213a:	f7ff fa87 	bl	800164c <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002140:	e021      	b.n	8002186 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d01d      	beq.n	8002186 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800214a:	f7ff fa7f 	bl	800164c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <HAL_ADC_PollForConversion+0xd0>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d112      	bne.n	8002186 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10b      	bne.n	8002186 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f043 0204 	orr.w	r2, r3, #4
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e06b      	b.n	800225e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0d6      	beq.n	8002142 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fb29 	bl	80017fc <LL_ADC_REG_IsTriggerSourceSWStart>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01c      	beq.n	80021ea <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7d5b      	ldrb	r3, [r3, #21]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d118      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d111      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a1f      	ldr	r2, [pc, #124]	; (800226c <HAL_ADC_PollForConversion+0x1dc>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d002      	beq.n	80021fa <HAL_ADC_PollForConversion+0x16a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	e000      	b.n	80021fc <HAL_ADC_PollForConversion+0x16c>
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	4293      	cmp	r3, r2
 8002202:	d008      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	2b05      	cmp	r3, #5
 800220e:	d002      	beq.n	8002216 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2b09      	cmp	r3, #9
 8002214:	d104      	bne.n	8002220 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e00c      	b.n	800223a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_ADC_PollForConversion+0x1dc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d002      	beq.n	8002230 <HAL_ADC_PollForConversion+0x1a0>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e000      	b.n	8002232 <HAL_ADC_PollForConversion+0x1a2>
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_ADC_PollForConversion+0x1d8>)
 8002232:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b08      	cmp	r3, #8
 800223e:	d104      	bne.n	800224a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2208      	movs	r2, #8
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	e008      	b.n	800225c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	220c      	movs	r2, #12
 800225a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40022000 	.word	0x40022000
 800226c:	40022100 	.word	0x40022100
 8002270:	40022300 	.word	0x40022300
 8002274:	58026300 	.word	0x58026300

08002278 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b0a1      	sub	sp, #132	; 0x84
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800229e:	2300      	movs	r3, #0
 80022a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4a9d      	ldr	r2, [pc, #628]	; (8002524 <HAL_ADC_ConfigChannel+0x290>)
 80022ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x2a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e321      	b.n	8002902 <HAL_ADC_ConfigChannel+0x66e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fc04 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 8306 	bne.w	80028e4 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <HAL_ADC_ConfigChannel+0x62>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	f003 031f 	and.w	r3, r3, #31
 80022ee:	2201      	movs	r2, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	e016      	b.n	8002324 <HAL_ADC_ConfigChannel+0x90>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002306:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800230e:	2320      	movs	r3, #32
 8002310:	e003      	b.n	800231a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 031f 	and.w	r3, r3, #31
 800231e:	2201      	movs	r2, #1
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	69d1      	ldr	r1, [r2, #28]
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	430b      	orrs	r3, r1
 8002330:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	f7ff fa6f 	bl	8001822 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff fbc5 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 800234e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fbe7 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 800235a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800235c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 80b3 	bne.w	80024ca <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002364:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 80af 	bne.w	80024ca <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	f7ff fa7e 	bl	800187a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800237e:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <HAL_ADC_ConfigChannel+0x294>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800238a:	d10b      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x110>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	695a      	ldr	r2, [r3, #20]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	089b      	lsrs	r3, r3, #2
 8002398:	f003 0307 	and.w	r3, r3, #7
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	e01d      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x14c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x136>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	695a      	ldr	r2, [r3, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	e00a      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x14c>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695a      	ldr	r2, [r3, #20]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	089b      	lsrs	r3, r3, #2
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d027      	beq.n	800243a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	6919      	ldr	r1, [r3, #16]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023f8:	f7ff f9ac 	bl	8001754 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6919      	ldr	r1, [r3, #16]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	7e5b      	ldrb	r3, [r3, #25]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d102      	bne.n	8002412 <HAL_ADC_ConfigChannel+0x17e>
 800240c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002410:	e000      	b.n	8002414 <HAL_ADC_ConfigChannel+0x180>
 8002412:	2300      	movs	r3, #0
 8002414:	461a      	mov	r2, r3
 8002416:	f7ff f9d6 	bl	80017c6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6919      	ldr	r1, [r3, #16]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	7e1b      	ldrb	r3, [r3, #24]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x19c>
 800242a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800242e:	e000      	b.n	8002432 <HAL_ADC_ConfigChannel+0x19e>
 8002430:	2300      	movs	r3, #0
 8002432:	461a      	mov	r2, r3
 8002434:	f7ff f9ae 	bl	8001794 <LL_ADC_SetDataRightShift>
 8002438:	e047      	b.n	80024ca <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002440:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	069b      	lsls	r3, r3, #26
 800244a:	429a      	cmp	r2, r3
 800244c:	d107      	bne.n	800245e <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002464:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	069b      	lsls	r3, r3, #26
 800246e:	429a      	cmp	r2, r3
 8002470:	d107      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002480:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002488:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	429a      	cmp	r2, r3
 8002494:	d107      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024a4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	069b      	lsls	r3, r3, #26
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d107      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024c8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fab4 	bl	8001a3c <LL_ADC_IsEnabled>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 820d 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	461a      	mov	r2, r3
 80024ea:	f7ff f9f1 	bl	80018d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_ADC_ConfigChannel+0x290>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	f040 8133 	bne.w	8002760 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002506:	2b00      	cmp	r3, #0
 8002508:	d110      	bne.n	800252c <HAL_ADC_ConfigChannel+0x298>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0e9b      	lsrs	r3, r3, #26
 8002510:	3301      	adds	r3, #1
 8002512:	f003 031f 	and.w	r3, r3, #31
 8002516:	2b09      	cmp	r3, #9
 8002518:	bf94      	ite	ls
 800251a:	2301      	movls	r3, #1
 800251c:	2300      	movhi	r3, #0
 800251e:	b2db      	uxtb	r3, r3
 8002520:	e01e      	b.n	8002560 <HAL_ADC_ConfigChannel+0x2cc>
 8002522:	bf00      	nop
 8002524:	47ff0000 	.word	0x47ff0000
 8002528:	5c001000 	.word	0x5c001000
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002534:	fa93 f3a3 	rbit	r3, r3
 8002538:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800253a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800253c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800253e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002544:	2320      	movs	r3, #32
 8002546:	e003      	b.n	8002550 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002548:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800254a:	fab3 f383 	clz	r3, r3
 800254e:	b2db      	uxtb	r3, r3
 8002550:	3301      	adds	r3, #1
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2b09      	cmp	r3, #9
 8002558:	bf94      	ite	ls
 800255a:	2301      	movls	r3, #1
 800255c:	2300      	movhi	r3, #0
 800255e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002560:	2b00      	cmp	r3, #0
 8002562:	d079      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_ADC_ConfigChannel+0x2ec>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0e9b      	lsrs	r3, r3, #26
 8002576:	3301      	adds	r3, #1
 8002578:	069b      	lsls	r3, r3, #26
 800257a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800257e:	e015      	b.n	80025ac <HAL_ADC_ConfigChannel+0x318>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002588:	fa93 f3a3 	rbit	r3, r3
 800258c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800258e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002590:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002598:	2320      	movs	r3, #32
 800259a:	e003      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800259e:	fab3 f383 	clz	r3, r3
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	3301      	adds	r3, #1
 80025a6:	069b      	lsls	r3, r3, #26
 80025a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x338>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	0e9b      	lsrs	r3, r3, #26
 80025be:	3301      	adds	r3, #1
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2101      	movs	r1, #1
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	e017      	b.n	80025fc <HAL_ADC_ConfigChannel+0x368>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80025de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80025e4:	2320      	movs	r3, #32
 80025e6:	e003      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80025e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ea:	fab3 f383 	clz	r3, r3
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	3301      	adds	r3, #1
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f303 	lsl.w	r3, r1, r3
 80025fc:	ea42 0103 	orr.w	r1, r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10a      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x38e>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0e9b      	lsrs	r3, r3, #26
 8002612:	3301      	adds	r3, #1
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	051b      	lsls	r3, r3, #20
 8002620:	e018      	b.n	8002654 <HAL_ADC_ConfigChannel+0x3c0>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262a:	fa93 f3a3 	rbit	r3, r3
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800263a:	2320      	movs	r3, #32
 800263c:	e003      	b.n	8002646 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800263e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002640:	fab3 f383 	clz	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002654:	430b      	orrs	r3, r1
 8002656:	e07e      	b.n	8002756 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002660:	2b00      	cmp	r3, #0
 8002662:	d107      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x3e0>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	3301      	adds	r3, #1
 800266c:	069b      	lsls	r3, r3, #26
 800266e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002672:	e015      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x40c>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	069b      	lsls	r3, r3, #26
 800269c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d109      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x42c>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	3301      	adds	r3, #1
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2101      	movs	r1, #1
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	e017      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x45c>
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa93 f3a3 	rbit	r3, r3
 80026cc:	61bb      	str	r3, [r7, #24]
  return result;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80026d8:	2320      	movs	r3, #32
 80026da:	e003      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	fab3 f383 	clz	r3, r3
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	3301      	adds	r3, #1
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	2101      	movs	r1, #1
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	ea42 0103 	orr.w	r1, r2, r3
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_ADC_ConfigChannel+0x488>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	0e9b      	lsrs	r3, r3, #26
 8002706:	3301      	adds	r3, #1
 8002708:	f003 021f 	and.w	r2, r3, #31
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	3b1e      	subs	r3, #30
 8002714:	051b      	lsls	r3, r3, #20
 8002716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800271a:	e01b      	b.n	8002754 <HAL_ADC_ConfigChannel+0x4c0>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	60fb      	str	r3, [r7, #12]
  return result;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f003 021f 	and.w	r2, r3, #31
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	3b1e      	subs	r3, #30
 800274e:	051b      	lsls	r3, r3, #20
 8002750:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002754:	430b      	orrs	r3, r1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6892      	ldr	r2, [r2, #8]
 800275a:	4619      	mov	r1, r3
 800275c:	f7ff f88d 	bl	800187a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	f280 80c6 	bge.w	80028f6 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a67      	ldr	r2, [pc, #412]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d004      	beq.n	800277e <HAL_ADC_ConfigChannel+0x4ea>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d101      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x4ee>
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_ADC_ConfigChannel+0x680>)
 8002780:	e000      	b.n	8002784 <HAL_ADC_ConfigChannel+0x4f0>
 8002782:	4b65      	ldr	r3, [pc, #404]	; (8002918 <HAL_ADC_ConfigChannel+0x684>)
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe ffd7 	bl	8001738 <LL_ADC_GetCommonPathInternalCh>
 800278a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a5e      	ldr	r2, [pc, #376]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_ADC_ConfigChannel+0x50c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5d      	ldr	r2, [pc, #372]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d10e      	bne.n	80027be <HAL_ADC_ConfigChannel+0x52a>
 80027a0:	485a      	ldr	r0, [pc, #360]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 80027a2:	f7ff f94b 	bl	8001a3c <LL_ADC_IsEnabled>
 80027a6:	4604      	mov	r4, r0
 80027a8:	4859      	ldr	r0, [pc, #356]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 80027aa:	f7ff f947 	bl	8001a3c <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4323      	orrs	r3, r4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e008      	b.n	80027d0 <HAL_ADC_ConfigChannel+0x53c>
 80027be:	4857      	ldr	r0, [pc, #348]	; (800291c <HAL_ADC_ConfigChannel+0x688>)
 80027c0:	f7ff f93c 	bl	8001a3c <LL_ADC_IsEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf0c      	ite	eq
 80027ca:	2301      	moveq	r3, #1
 80027cc:	2300      	movne	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d07d      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a51      	ldr	r2, [pc, #324]	; (8002920 <HAL_ADC_ConfigChannel+0x68c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d130      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x5ac>
 80027de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d12b      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a4b      	ldr	r2, [pc, #300]	; (800291c <HAL_ADC_ConfigChannel+0x688>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	f040 8081 	bne.w	80028f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a44      	ldr	r2, [pc, #272]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d004      	beq.n	8002808 <HAL_ADC_ConfigChannel+0x574>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a43      	ldr	r2, [pc, #268]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d101      	bne.n	800280c <HAL_ADC_ConfigChannel+0x578>
 8002808:	4a42      	ldr	r2, [pc, #264]	; (8002914 <HAL_ADC_ConfigChannel+0x680>)
 800280a:	e000      	b.n	800280e <HAL_ADC_ConfigChannel+0x57a>
 800280c:	4a42      	ldr	r2, [pc, #264]	; (8002918 <HAL_ADC_ConfigChannel+0x684>)
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002814:	4619      	mov	r1, r3
 8002816:	4610      	mov	r0, r2
 8002818:	f7fe ff7b 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <HAL_ADC_ConfigChannel+0x690>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	099b      	lsrs	r3, r3, #6
 8002822:	4a41      	ldr	r2, [pc, #260]	; (8002928 <HAL_ADC_ConfigChannel+0x694>)
 8002824:	fba2 2303 	umull	r2, r3, r2, r3
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	3301      	adds	r3, #1
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002830:	e002      	b.n	8002838 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	3b01      	subs	r3, #1
 8002836:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1f9      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800283e:	e05a      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a39      	ldr	r2, [pc, #228]	; (800292c <HAL_ADC_ConfigChannel+0x698>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d11e      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5f4>
 800284a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800284c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d119      	bne.n	8002888 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a30      	ldr	r2, [pc, #192]	; (800291c <HAL_ADC_ConfigChannel+0x688>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d14b      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x5de>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x5e2>
 8002872:	4a28      	ldr	r2, [pc, #160]	; (8002914 <HAL_ADC_ConfigChannel+0x680>)
 8002874:	e000      	b.n	8002878 <HAL_ADC_ConfigChannel+0x5e4>
 8002876:	4a28      	ldr	r2, [pc, #160]	; (8002918 <HAL_ADC_ConfigChannel+0x684>)
 8002878:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800287a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7fe ff46 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002886:	e036      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_ADC_ConfigChannel+0x69c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d131      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d12c      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_ADC_ConfigChannel+0x688>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d127      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a18      	ldr	r2, [pc, #96]	; (800290c <HAL_ADC_ConfigChannel+0x678>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d004      	beq.n	80028ba <HAL_ADC_ConfigChannel+0x626>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a16      	ldr	r2, [pc, #88]	; (8002910 <HAL_ADC_ConfigChannel+0x67c>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x62a>
 80028ba:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_ADC_ConfigChannel+0x680>)
 80028bc:	e000      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x62c>
 80028be:	4a16      	ldr	r2, [pc, #88]	; (8002918 <HAL_ADC_ConfigChannel+0x684>)
 80028c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7fe ff22 	bl	8001712 <LL_ADC_SetCommonPathInternalCh>
 80028ce:	e012      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80028e2:	e008      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80028fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002902:	4618      	mov	r0, r3
 8002904:	3784      	adds	r7, #132	; 0x84
 8002906:	46bd      	mov	sp, r7
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	40022100 	.word	0x40022100
 8002914:	40022300 	.word	0x40022300
 8002918:	58026300 	.word	0x58026300
 800291c:	58026000 	.word	0x58026000
 8002920:	cb840000 	.word	0xcb840000
 8002924:	24000000 	.word	0x24000000
 8002928:	053e2d63 	.word	0x053e2d63
 800292c:	c7520000 	.word	0xc7520000
 8002930:	cfb80000 	.word	0xcfb80000

08002934 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff f8c4 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 8002950:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f8e6 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8098 	beq.w	8002a9c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d02a      	beq.n	80029d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7d5b      	ldrb	r3, [r3, #21]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d126      	bne.n	80029d0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7d1b      	ldrb	r3, [r3, #20]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d122      	bne.n	80029d0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800298a:	2301      	movs	r3, #1
 800298c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800298e:	e014      	b.n	80029ba <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	4a45      	ldr	r2, [pc, #276]	; (8002aa8 <ADC_ConversionStop+0x174>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d90d      	bls.n	80029b4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e074      	b.n	8002a9e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	3301      	adds	r3, #1
 80029b8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b40      	cmp	r3, #64	; 0x40
 80029c6:	d1e3      	bne.n	8002990 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d014      	beq.n	8002a00 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff f87c 	bl	8001ad8 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff f839 	bl	8001a62 <LL_ADC_IsDisableOngoing>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff f858 	bl	8001ab0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d014      	beq.n	8002a30 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff f88c 	bl	8001b28 <LL_ADC_INJ_IsConversionOngoing>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff f821 	bl	8001a62 <LL_ADC_IsDisableOngoing>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d104      	bne.n	8002a30 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff f868 	bl	8001b00 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d005      	beq.n	8002a42 <ADC_ConversionStop+0x10e>
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d105      	bne.n	8002a48 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002a3c:	230c      	movs	r3, #12
 8002a3e:	617b      	str	r3, [r7, #20]
        break;
 8002a40:	e005      	b.n	8002a4e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002a42:	2308      	movs	r3, #8
 8002a44:	617b      	str	r3, [r7, #20]
        break;
 8002a46:	e002      	b.n	8002a4e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002a48:	2304      	movs	r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]
        break;
 8002a4c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002a4e:	f7fe fdfd 	bl	800164c <HAL_GetTick>
 8002a52:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a54:	e01b      	b.n	8002a8e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002a56:	f7fe fdf9 	bl	800164c <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d914      	bls.n	8002a8e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00d      	beq.n	8002a8e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0210 	orr.w	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	f043 0201 	orr.w	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e007      	b.n	8002a9e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1dc      	bne.n	8002a56 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	000cdbff 	.word	0x000cdbff

08002aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fe ffbf 	bl	8001a3c <LL_ADC_IsEnabled>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d16e      	bne.n	8002ba2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <ADC_Enable+0x100>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00d      	beq.n	8002aee <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	f043 0210 	orr.w	r2, r3, #16
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e05a      	b.n	8002ba4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe ff7a 	bl	80019ec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af8:	f7fe fda8 	bl	800164c <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a2b      	ldr	r2, [pc, #172]	; (8002bb0 <ADC_Enable+0x104>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d004      	beq.n	8002b12 <ADC_Enable+0x66>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <ADC_Enable+0x108>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d101      	bne.n	8002b16 <ADC_Enable+0x6a>
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <ADC_Enable+0x10c>)
 8002b14:	e000      	b.n	8002b18 <ADC_Enable+0x6c>
 8002b16:	4b29      	ldr	r3, [pc, #164]	; (8002bbc <ADC_Enable+0x110>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fefd 	bl	8001918 <LL_ADC_GetMultimode>
 8002b1e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a23      	ldr	r2, [pc, #140]	; (8002bb4 <ADC_Enable+0x108>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d002      	beq.n	8002b30 <ADC_Enable+0x84>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	e000      	b.n	8002b32 <ADC_Enable+0x86>
 8002b30:	4b1f      	ldr	r3, [pc, #124]	; (8002bb0 <ADC_Enable+0x104>)
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d02c      	beq.n	8002b94 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d130      	bne.n	8002ba2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b40:	e028      	b.n	8002b94 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe ff78 	bl	8001a3c <LL_ADC_IsEnabled>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d104      	bne.n	8002b5c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe ff48 	bl	80019ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5c:	f7fe fd76 	bl	800164c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d914      	bls.n	8002b94 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d00d      	beq.n	8002b94 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7c:	f043 0210 	orr.w	r2, r3, #16
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	f043 0201 	orr.w	r2, r3, #1
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d1cf      	bne.n	8002b42 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	8000003f 	.word	0x8000003f
 8002bb0:	40022000 	.word	0x40022000
 8002bb4:	40022100 	.word	0x40022100
 8002bb8:	40022300 	.word	0x40022300
 8002bbc:	58026300 	.word	0x58026300

08002bc0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe ff48 	bl	8001a62 <LL_ADC_IsDisableOngoing>
 8002bd2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe ff2f 	bl	8001a3c <LL_ADC_IsEnabled>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d047      	beq.n	8002c74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d144      	bne.n	8002c74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 030d 	and.w	r3, r3, #13
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d10c      	bne.n	8002c12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe ff09 	bl	8001a14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2203      	movs	r2, #3
 8002c08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c0a:	f7fe fd1f 	bl	800164c <HAL_GetTick>
 8002c0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c10:	e029      	b.n	8002c66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f043 0210 	orr.w	r2, r3, #16
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c22:	f043 0201 	orr.w	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e023      	b.n	8002c76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c2e:	f7fe fd0d 	bl	800164c <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	1ad3      	subs	r3, r2, r3
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d914      	bls.n	8002c66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00d      	beq.n	8002c66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f043 0210 	orr.w	r2, r3, #16
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f043 0201 	orr.w	r2, r3, #1
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e007      	b.n	8002c76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1dc      	bne.n	8002c2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <ADC_ConfigureBoostMode+0x1f8>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d004      	beq.n	8002c9c <ADC_ConfigureBoostMode+0x1c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a79      	ldr	r2, [pc, #484]	; (8002e7c <ADC_ConfigureBoostMode+0x1fc>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d109      	bne.n	8002cb0 <ADC_ConfigureBoostMode+0x30>
 8002c9c:	4b78      	ldr	r3, [pc, #480]	; (8002e80 <ADC_ConfigureBoostMode+0x200>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <ADC_ConfigureBoostMode+0x42>
 8002cb0:	4b74      	ldr	r3, [pc, #464]	; (8002e84 <ADC_ConfigureBoostMode+0x204>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01c      	beq.n	8002d00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002cc6:	f002 f9d9 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8002cca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cd4:	d010      	beq.n	8002cf8 <ADC_ConfigureBoostMode+0x78>
 8002cd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cda:	d873      	bhi.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
 8002cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce0:	d002      	beq.n	8002ce8 <ADC_ConfigureBoostMode+0x68>
 8002ce2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ce6:	d16d      	bne.n	8002dc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
        break;
 8002cf6:	e068      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
        break;
 8002cfe:	e064      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002d00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d04:	f04f 0100 	mov.w	r1, #0
 8002d08:	f003 fc1e 	bl	8006548 <HAL_RCCEx_GetPeriphCLKFreq>
 8002d0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d16:	d051      	beq.n	8002dbc <ADC_ConfigureBoostMode+0x13c>
 8002d18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002d1c:	d854      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d22:	d047      	beq.n	8002db4 <ADC_ConfigureBoostMode+0x134>
 8002d24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002d28:	d84e      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d2e:	d03d      	beq.n	8002dac <ADC_ConfigureBoostMode+0x12c>
 8002d30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002d34:	d848      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3a:	d033      	beq.n	8002da4 <ADC_ConfigureBoostMode+0x124>
 8002d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d40:	d842      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d46:	d029      	beq.n	8002d9c <ADC_ConfigureBoostMode+0x11c>
 8002d48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002d4c:	d83c      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d52:	d01a      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002d58:	d836      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d5e:	d014      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002d64:	d830      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d6a:	d00e      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d70:	d82a      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d76:	d008      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d7c:	d824      	bhi.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
 8002d7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d82:	d002      	beq.n	8002d8a <ADC_ConfigureBoostMode+0x10a>
 8002d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d88:	d11e      	bne.n	8002dc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0c9b      	lsrs	r3, r3, #18
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d98:	60fb      	str	r3, [r7, #12]
        break;
 8002d9a:	e016      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
        break;
 8002da2:	e012      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	60fb      	str	r3, [r7, #12]
        break;
 8002daa:	e00e      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	099b      	lsrs	r3, r3, #6
 8002db0:	60fb      	str	r3, [r7, #12]
        break;
 8002db2:	e00a      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	09db      	lsrs	r3, r3, #7
 8002db8:	60fb      	str	r3, [r7, #12]
        break;
 8002dba:	e006      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	0a1b      	lsrs	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
        break;
 8002dc2:	e002      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
        break;
 8002dc4:	bf00      	nop
 8002dc6:	e000      	b.n	8002dca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002dc8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002dca:	f7fe fc6f 	bl	80016ac <HAL_GetREVID>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d815      	bhi.n	8002e04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a2b      	ldr	r2, [pc, #172]	; (8002e88 <ADC_ConfigureBoostMode+0x208>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d908      	bls.n	8002df2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002df0:	e03e      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e00:	609a      	str	r2, [r3, #8]
}
 8002e02:	e035      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4a1f      	ldr	r2, [pc, #124]	; (8002e8c <ADC_ConfigureBoostMode+0x20c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d808      	bhi.n	8002e24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002e20:	609a      	str	r2, [r3, #8]
}
 8002e22:	e025      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <ADC_ConfigureBoostMode+0x210>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d80a      	bhi.n	8002e42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e3e:	609a      	str	r2, [r3, #8]
}
 8002e40:	e016      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <ADC_ConfigureBoostMode+0x214>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d80a      	bhi.n	8002e60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e5c:	609a      	str	r2, [r3, #8]
}
 8002e5e:	e007      	b.n	8002e70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3710      	adds	r7, #16
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	40022100 	.word	0x40022100
 8002e80:	40022300 	.word	0x40022300
 8002e84:	58026300 	.word	0x58026300
 8002e88:	01312d00 	.word	0x01312d00
 8002e8c:	005f5e10 	.word	0x005f5e10
 8002e90:	00bebc20 	.word	0x00bebc20
 8002e94:	017d7840 	.word	0x017d7840

08002e98 <LL_ADC_IsEnabled>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d101      	bne.n	8002eb0 <LL_ADC_IsEnabled+0x18>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <LL_ADC_IsEnabled+0x1a>
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr

08002ebe <LL_ADC_REG_IsConversionOngoing>:
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d101      	bne.n	8002ed6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ee4:	b590      	push	{r4, r7, lr}
 8002ee6:	b09f      	sub	sp, #124	; 0x7c
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0be      	b.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f1c:	4b5b      	ldr	r3, [pc, #364]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	e001      	b.n	8002f26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10b      	bne.n	8002f44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e09d      	b.n	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff ffb9 	bl	8002ebe <LL_ADC_REG_IsConversionOngoing>
 8002f4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff ffb3 	bl	8002ebe <LL_ADC_REG_IsConversionOngoing>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d17f      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002f5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d17c      	bne.n	800305e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a47      	ldr	r2, [pc, #284]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d004      	beq.n	8002f78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a46      	ldr	r2, [pc, #280]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d101      	bne.n	8002f7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002f78:	4b45      	ldr	r3, [pc, #276]	; (8003090 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002f7a:	e000      	b.n	8002f7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002f7c:	4b45      	ldr	r3, [pc, #276]	; (8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002f7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d039      	beq.n	8002ffc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3a      	ldr	r2, [pc, #232]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d004      	beq.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a38      	ldr	r2, [pc, #224]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d10e      	bne.n	8002fcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002fae:	4836      	ldr	r0, [pc, #216]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002fb0:	f7ff ff72 	bl	8002e98 <LL_ADC_IsEnabled>
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	4835      	ldr	r0, [pc, #212]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002fb8:	f7ff ff6e 	bl	8002e98 <LL_ADC_IsEnabled>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	4323      	orrs	r3, r4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e008      	b.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002fcc:	4832      	ldr	r0, [pc, #200]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002fce:	f7ff ff63 	bl	8002e98 <LL_ADC_IsEnabled>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d047      	beq.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	; (800309c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	6811      	ldr	r1, [r2, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	6892      	ldr	r2, [r2, #8]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ffa:	e03a      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d10e      	bne.n	800303a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800301c:	481a      	ldr	r0, [pc, #104]	; (8003088 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800301e:	f7ff ff3b 	bl	8002e98 <LL_ADC_IsEnabled>
 8003022:	4604      	mov	r4, r0
 8003024:	4819      	ldr	r0, [pc, #100]	; (800308c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003026:	f7ff ff37 	bl	8002e98 <LL_ADC_IsEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	4323      	orrs	r3, r4
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	e008      	b.n	800304c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800303a:	4817      	ldr	r0, [pc, #92]	; (8003098 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800303c:	f7ff ff2c 	bl	8002e98 <LL_ADC_IsEnabled>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003056:	4013      	ands	r3, r2
 8003058:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800305a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800305c:	e009      	b.n	8003072 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003070:	e000      	b.n	8003074 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003072:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800307c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003080:	4618      	mov	r0, r3
 8003082:	377c      	adds	r7, #124	; 0x7c
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	40022000 	.word	0x40022000
 800308c:	40022100 	.word	0x40022100
 8003090:	40022300 	.word	0x40022300
 8003094:	58026300 	.word	0x58026300
 8003098:	58026000 	.word	0x58026000
 800309c:	fffff0e0 	.word	0xfffff0e0

080030a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <__NVIC_SetPriorityGrouping+0x40>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030bc:	4013      	ands	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <__NVIC_SetPriorityGrouping+0x44>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <__NVIC_SetPriorityGrouping+0x40>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00
 80030e4:	05fa0000 	.word	0x05fa0000

080030e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030ec:	4b04      	ldr	r3, [pc, #16]	; (8003100 <__NVIC_GetPriorityGrouping+0x18>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	f003 0307 	and.w	r3, r3, #7
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003110:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	db0a      	blt.n	800312e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	b2da      	uxtb	r2, r3
 800311c:	490c      	ldr	r1, [pc, #48]	; (8003150 <__NVIC_SetPriority+0x4c>)
 800311e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	440b      	add	r3, r1
 8003128:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800312c:	e00a      	b.n	8003144 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	b2da      	uxtb	r2, r3
 8003132:	4908      	ldr	r1, [pc, #32]	; (8003154 <__NVIC_SetPriority+0x50>)
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3b04      	subs	r3, #4
 800313c:	0112      	lsls	r2, r2, #4
 800313e:	b2d2      	uxtb	r2, r2
 8003140:	440b      	add	r3, r1
 8003142:	761a      	strb	r2, [r3, #24]
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000e100 	.word	0xe000e100
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f1c3 0307 	rsb	r3, r3, #7
 8003172:	2b04      	cmp	r3, #4
 8003174:	bf28      	it	cs
 8003176:	2304      	movcs	r3, #4
 8003178:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3304      	adds	r3, #4
 800317e:	2b06      	cmp	r3, #6
 8003180:	d902      	bls.n	8003188 <NVIC_EncodePriority+0x30>
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	3b03      	subs	r3, #3
 8003186:	e000      	b.n	800318a <NVIC_EncodePriority+0x32>
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	401a      	ands	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031a0:	f04f 31ff 	mov.w	r1, #4294967295
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	43d9      	mvns	r1, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b0:	4313      	orrs	r3, r2
         );
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3724      	adds	r7, #36	; 0x24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031d0:	d301      	bcc.n	80031d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00f      	b.n	80031f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <SysTick_Config+0x40>)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3b01      	subs	r3, #1
 80031dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031de:	210f      	movs	r1, #15
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	f7ff ff8e 	bl	8003104 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <SysTick_Config+0x40>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ee:	4b04      	ldr	r3, [pc, #16]	; (8003200 <SysTick_Config+0x40>)
 80031f0:	2207      	movs	r2, #7
 80031f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000e010 	.word	0xe000e010

08003204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff ff47 	bl	80030a0 <__NVIC_SetPriorityGrouping>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003228:	f7ff ff5e 	bl	80030e8 <__NVIC_GetPriorityGrouping>
 800322c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	6978      	ldr	r0, [r7, #20]
 8003234:	f7ff ff90 	bl	8003158 <NVIC_EncodePriority>
 8003238:	4602      	mov	r2, r0
 800323a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800323e:	4611      	mov	r1, r2
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff5f 	bl	8003104 <__NVIC_SetPriority>
}
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffb2 	bl	80031c0 <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e0cf      	b.n	800341a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2223      	movs	r2, #35	; 0x23
 8003288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f7fd fecd 	bl	800102c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003292:	4b64      	ldr	r3, [pc, #400]	; (8003424 <HAL_ETH_Init+0x1bc>)
 8003294:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003298:	4a62      	ldr	r2, [pc, #392]	; (8003424 <HAL_ETH_Init+0x1bc>)
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80032a2:	4b60      	ldr	r3, [pc, #384]	; (8003424 <HAL_ETH_Init+0x1bc>)
 80032a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	60bb      	str	r3, [r7, #8]
 80032ae:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7a1b      	ldrb	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d103      	bne.n	80032c0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80032b8:	2000      	movs	r0, #0
 80032ba:	f7fe fa03 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
 80032be:	e003      	b.n	80032c8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80032c0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80032c4:	f7fe f9fe 	bl	80016c4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80032c8:	4b57      	ldr	r3, [pc, #348]	; (8003428 <HAL_ETH_Init+0x1c0>)
 80032ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032e4:	f7fe f9b2 	bl	800164c <HAL_GetTick>
 80032e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80032ea:	e011      	b.n	8003310 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80032ec:	f7fe f9ae 	bl	800164c <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032fa:	d909      	bls.n	8003310 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	22e0      	movs	r2, #224	; 0xe0
 8003308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e084      	b.n	800341a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e4      	bne.n	80032ec <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f886 	bl	8003434 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003328:	f001 fea8 	bl	800507c <HAL_RCC_GetHCLKFreq>
 800332c:	4603      	mov	r3, r0
 800332e:	4a3f      	ldr	r2, [pc, #252]	; (800342c <HAL_ETH_Init+0x1c4>)
 8003330:	fba2 2303 	umull	r2, r3, r2, r3
 8003334:	0c9a      	lsrs	r2, r3, #18
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3a01      	subs	r2, #1
 800333c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 fa71 	bl	8003828 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003352:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800335e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003362:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	22e0      	movs	r2, #224	; 0xe0
 800337e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e049      	b.n	800341a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003392:	4b27      	ldr	r3, [pc, #156]	; (8003430 <HAL_ETH_Init+0x1c8>)
 8003394:	4013      	ands	r3, r2
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6952      	ldr	r2, [r2, #20]
 800339a:	0051      	lsls	r1, r2, #1
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033a6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fad9 	bl	8003962 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fb1f 	bl	80039f4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	3305      	adds	r3, #5
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	021a      	lsls	r2, r3, #8
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	3304      	adds	r3, #4
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	3303      	adds	r3, #3
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	061a      	lsls	r2, r3, #24
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	3302      	adds	r3, #2
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	3301      	adds	r3, #1
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80033f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003402:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003404:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2210      	movs	r2, #16
 8003414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	58024400 	.word	0x58024400
 8003428:	58000400 	.word	0x58000400
 800342c:	431bde83 	.word	0x431bde83
 8003430:	ffff8001 	.word	0xffff8001

08003434 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003444:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800344c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800344e:	f001 fe15 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8003452:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4a1e      	ldr	r2, [pc, #120]	; (80034d0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d908      	bls.n	800346e <HAL_ETH_SetMDIOClockRange+0x3a>
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d804      	bhi.n	800346e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	e027      	b.n	80034be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	4a18      	ldr	r2, [pc, #96]	; (80034d4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d908      	bls.n	8003488 <HAL_ETH_SetMDIOClockRange+0x54>
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d204      	bcs.n	8003488 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e01a      	b.n	80034be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d303      	bcc.n	8003498 <HAL_ETH_SetMDIOClockRange+0x64>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d911      	bls.n	80034bc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d908      	bls.n	80034b2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a0f      	ldr	r2, [pc, #60]	; (80034e0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d804      	bhi.n	80034b2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ae:	60fb      	str	r3, [r7, #12]
 80034b0:	e005      	b.n	80034be <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	e000      	b.n	80034be <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80034bc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80034c8:	bf00      	nop
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	01312cff 	.word	0x01312cff
 80034d4:	02160ebf 	.word	0x02160ebf
 80034d8:	03938700 	.word	0x03938700
 80034dc:	05f5e0ff 	.word	0x05f5e0ff
 80034e0:	08f0d17f 	.word	0x08f0d17f

080034e4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80034f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	791b      	ldrb	r3, [r3, #4]
 80034fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80034fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	7b1b      	ldrb	r3, [r3, #12]
 8003504:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003506:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	7b5b      	ldrb	r3, [r3, #13]
 800350c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800350e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	7b9b      	ldrb	r3, [r3, #14]
 8003514:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003516:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	7bdb      	ldrb	r3, [r3, #15]
 800351c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800351e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	7c12      	ldrb	r2, [r2, #16]
 8003524:	2a00      	cmp	r2, #0
 8003526:	d102      	bne.n	800352e <ETH_SetMACConfig+0x4a>
 8003528:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800352c:	e000      	b.n	8003530 <ETH_SetMACConfig+0x4c>
 800352e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003530:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	7c52      	ldrb	r2, [r2, #17]
 8003536:	2a00      	cmp	r2, #0
 8003538:	d102      	bne.n	8003540 <ETH_SetMACConfig+0x5c>
 800353a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800353e:	e000      	b.n	8003542 <ETH_SetMACConfig+0x5e>
 8003540:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	7c9b      	ldrb	r3, [r3, #18]
 8003548:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800354a:	431a      	orrs	r2, r3
               macconf->Speed |
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003550:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	7f1b      	ldrb	r3, [r3, #28]
 800355c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800355e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	7f5b      	ldrb	r3, [r3, #29]
 8003564:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003566:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	7f92      	ldrb	r2, [r2, #30]
 800356c:	2a00      	cmp	r2, #0
 800356e:	d102      	bne.n	8003576 <ETH_SetMACConfig+0x92>
 8003570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003574:	e000      	b.n	8003578 <ETH_SetMACConfig+0x94>
 8003576:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003578:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	7fdb      	ldrb	r3, [r3, #31]
 800357e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003580:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003588:	2a00      	cmp	r2, #0
 800358a:	d102      	bne.n	8003592 <ETH_SetMACConfig+0xae>
 800358c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003590:	e000      	b.n	8003594 <ETH_SetMACConfig+0xb0>
 8003592:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003594:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800359a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80035a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80035a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b56      	ldr	r3, [pc, #344]	; (8003710 <ETH_SetMACConfig+0x22c>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	68f9      	ldr	r1, [r7, #12]
 80035be:	430b      	orrs	r3, r1
 80035c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80035ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80035d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80035da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80035e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80035e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80035e6:	683a      	ldr	r2, [r7, #0]
 80035e8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80035ec:	2a00      	cmp	r2, #0
 80035ee:	d102      	bne.n	80035f6 <ETH_SetMACConfig+0x112>
 80035f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035f4:	e000      	b.n	80035f8 <ETH_SetMACConfig+0x114>
 80035f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80035f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <ETH_SetMACConfig+0x230>)
 800360a:	4013      	ands	r3, r2
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	6812      	ldr	r2, [r2, #0]
 8003610:	68f9      	ldr	r1, [r7, #12]
 8003612:	430b      	orrs	r3, r1
 8003614:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800361c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	4b3a      	ldr	r3, [pc, #232]	; (8003718 <ETH_SetMACConfig+0x234>)
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	430b      	orrs	r3, r1
 8003638:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003640:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003646:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800364e:	2a00      	cmp	r2, #0
 8003650:	d101      	bne.n	8003656 <ETH_SetMACConfig+0x172>
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	e000      	b.n	8003658 <ETH_SetMACConfig+0x174>
 8003656:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003658:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003660:	4313      	orrs	r3, r2
 8003662:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800366a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	430b      	orrs	r3, r1
 8003678:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003680:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003688:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f023 0103 	bic.w	r1, r3, #3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80036ae:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80036ca:	2a00      	cmp	r2, #0
 80036cc:	d101      	bne.n	80036d2 <ETH_SetMACConfig+0x1ee>
 80036ce:	2240      	movs	r2, #64	; 0x40
 80036d0:	e000      	b.n	80036d4 <ETH_SetMACConfig+0x1f0>
 80036d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80036d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80036dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80036de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80036e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80036f4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	430a      	orrs	r2, r1
 8003700:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	00048083 	.word	0x00048083
 8003714:	c0f88000 	.word	0xc0f88000
 8003718:	fffffef0 	.word	0xfffffef0

0800371c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	4b38      	ldr	r3, [pc, #224]	; (8003814 <ETH_SetDMAConfig+0xf8>)
 8003732:	4013      	ands	r3, r2
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	6811      	ldr	r1, [r2, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6812      	ldr	r2, [r2, #0]
 800373c:	430b      	orrs	r3, r1
 800373e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003742:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	791b      	ldrb	r3, [r3, #4]
 8003748:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800374e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	7b1b      	ldrb	r3, [r3, #12]
 8003754:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <ETH_SetDMAConfig+0xfc>)
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	68f9      	ldr	r1, [r7, #12]
 800376e:	430b      	orrs	r3, r1
 8003770:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003774:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	7b5b      	ldrb	r3, [r3, #13]
 800377a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003780:	4313      	orrs	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800378c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003790:	4b22      	ldr	r3, [pc, #136]	; (800381c <ETH_SetDMAConfig+0x100>)
 8003792:	4013      	ands	r3, r2
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	68f9      	ldr	r1, [r7, #12]
 800379a:	430b      	orrs	r3, r1
 800379c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037a0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	7d1b      	ldrb	r3, [r3, #20]
 80037ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80037ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	7f5b      	ldrb	r3, [r3, #29]
 80037b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80037c6:	4b16      	ldr	r3, [pc, #88]	; (8003820 <ETH_SetDMAConfig+0x104>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	68f9      	ldr	r1, [r7, #12]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80037d6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	7f1b      	ldrb	r3, [r3, #28]
 80037de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <ETH_SetDMAConfig+0x108>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	430b      	orrs	r3, r1
 8003800:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003804:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003808:	bf00      	nop
 800380a:	3714      	adds	r7, #20
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	ffff87fd 	.word	0xffff87fd
 8003818:	ffff2ffe 	.word	0xffff2ffe
 800381c:	fffec000 	.word	0xfffec000
 8003820:	ffc0efef 	.word	0xffc0efef
 8003824:	7fc0ffff 	.word	0x7fc0ffff

08003828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b0a4      	sub	sp, #144	; 0x90
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003836:	2300      	movs	r3, #0
 8003838:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003846:	2301      	movs	r3, #1
 8003848:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800384c:	2301      	movs	r3, #1
 800384e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003864:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003868:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003870:	2300      	movs	r3, #0
 8003872:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003880:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800388c:	2300      	movs	r3, #0
 800388e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8003890:	2301      	movs	r3, #1
 8003892:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80038a2:	2300      	movs	r3, #0
 80038a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80038aa:	2300      	movs	r3, #0
 80038ac:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80038ba:	2301      	movs	r3, #1
 80038bc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80038c0:	2320      	movs	r3, #32
 80038c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80038d2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80038d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80038d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038dc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80038e4:	2302      	movs	r3, #2
 80038e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003902:	2300      	movs	r3, #0
 8003904:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003906:	2301      	movs	r3, #1
 8003908:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800390c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003910:	4619      	mov	r1, r3
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fde6 	bl	80034e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003918:	2301      	movs	r3, #1
 800391a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800391c:	2301      	movs	r3, #1
 800391e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800392a:	2300      	movs	r3, #0
 800392c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800392e:	2300      	movs	r3, #0
 8003930:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003932:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003936:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800393c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003940:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003942:	2300      	movs	r3, #0
 8003944:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003948:	f44f 7306 	mov.w	r3, #536	; 0x218
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800394e:	f107 0308 	add.w	r3, r7, #8
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff fee1 	bl	800371c <ETH_SetDMAConfig>
}
 800395a:	bf00      	nop
 800395c:	3790      	adds	r7, #144	; 0x90
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e01d      	b.n	80039ac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2200      	movs	r2, #0
 800398c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2200      	movs	r2, #0
 8003998:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	3206      	adds	r2, #6
 80039a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d9de      	bls.n	8003970 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039c0:	461a      	mov	r2, r3
 80039c2:	2303      	movs	r3, #3
 80039c4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039d4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80039e8:	bf00      	nop
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039fc:	2300      	movs	r3, #0
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e023      	b.n	8003a4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6919      	ldr	r1, [r3, #16]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	3212      	adds	r2, #18
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d9d8      	bls.n	8003a02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a76:	461a      	mov	r2, r3
 8003a78:	2303      	movs	r3, #3
 8003a7a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a8a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a9e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8003aa2:	bf00      	nop
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b089      	sub	sp, #36	; 0x24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003abe:	4b89      	ldr	r3, [pc, #548]	; (8003ce4 <HAL_GPIO_Init+0x234>)
 8003ac0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003ac2:	e194      	b.n	8003dee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2101      	movs	r1, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f000 8186 	beq.w	8003de8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d005      	beq.n	8003af4 <HAL_GPIO_Init+0x44>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d130      	bne.n	8003b56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	f003 0201 	and.w	r2, r3, #1
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b03      	cmp	r3, #3
 8003b60:	d017      	beq.n	8003b92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43db      	mvns	r3, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4013      	ands	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	689a      	ldr	r2, [r3, #8]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f003 0303 	and.w	r3, r3, #3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d123      	bne.n	8003be6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	08da      	lsrs	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	3208      	adds	r2, #8
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	220f      	movs	r2, #15
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	43db      	mvns	r3, r3
 8003bbc:	69ba      	ldr	r2, [r7, #24]
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	69b9      	ldr	r1, [r7, #24]
 8003be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 0203 	and.w	r2, r3, #3
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80e0 	beq.w	8003de8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c28:	4b2f      	ldr	r3, [pc, #188]	; (8003ce8 <HAL_GPIO_Init+0x238>)
 8003c2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ce8 <HAL_GPIO_Init+0x238>)
 8003c30:	f043 0302 	orr.w	r3, r3, #2
 8003c34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <HAL_GPIO_Init+0x238>)
 8003c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	60fb      	str	r3, [r7, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c46:	4a29      	ldr	r2, [pc, #164]	; (8003cec <HAL_GPIO_Init+0x23c>)
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	3302      	adds	r3, #2
 8003c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	220f      	movs	r2, #15
 8003c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a20      	ldr	r2, [pc, #128]	; (8003cf0 <HAL_GPIO_Init+0x240>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d052      	beq.n	8003d18 <HAL_GPIO_Init+0x268>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <HAL_GPIO_Init+0x244>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d031      	beq.n	8003cde <HAL_GPIO_Init+0x22e>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_GPIO_Init+0x248>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02b      	beq.n	8003cda <HAL_GPIO_Init+0x22a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1d      	ldr	r2, [pc, #116]	; (8003cfc <HAL_GPIO_Init+0x24c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d025      	beq.n	8003cd6 <HAL_GPIO_Init+0x226>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a1c      	ldr	r2, [pc, #112]	; (8003d00 <HAL_GPIO_Init+0x250>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d01f      	beq.n	8003cd2 <HAL_GPIO_Init+0x222>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a1b      	ldr	r2, [pc, #108]	; (8003d04 <HAL_GPIO_Init+0x254>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d019      	beq.n	8003cce <HAL_GPIO_Init+0x21e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1a      	ldr	r2, [pc, #104]	; (8003d08 <HAL_GPIO_Init+0x258>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d013      	beq.n	8003cca <HAL_GPIO_Init+0x21a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_GPIO_Init+0x25c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_GPIO_Init+0x216>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_GPIO_Init+0x260>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <HAL_GPIO_Init+0x212>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a17      	ldr	r2, [pc, #92]	; (8003d14 <HAL_GPIO_Init+0x264>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d101      	bne.n	8003cbe <HAL_GPIO_Init+0x20e>
 8003cba:	2309      	movs	r3, #9
 8003cbc:	e02d      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cbe:	230a      	movs	r3, #10
 8003cc0:	e02b      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cc2:	2308      	movs	r3, #8
 8003cc4:	e029      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	e027      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cca:	2306      	movs	r3, #6
 8003ccc:	e025      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cce:	2305      	movs	r3, #5
 8003cd0:	e023      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cd2:	2304      	movs	r3, #4
 8003cd4:	e021      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e01f      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e01d      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e01b      	b.n	8003d1a <HAL_GPIO_Init+0x26a>
 8003ce2:	bf00      	nop
 8003ce4:	58000080 	.word	0x58000080
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	58000400 	.word	0x58000400
 8003cf0:	58020000 	.word	0x58020000
 8003cf4:	58020400 	.word	0x58020400
 8003cf8:	58020800 	.word	0x58020800
 8003cfc:	58020c00 	.word	0x58020c00
 8003d00:	58021000 	.word	0x58021000
 8003d04:	58021400 	.word	0x58021400
 8003d08:	58021800 	.word	0x58021800
 8003d0c:	58021c00 	.word	0x58021c00
 8003d10:	58022000 	.word	0x58022000
 8003d14:	58022400 	.word	0x58022400
 8003d18:	2300      	movs	r3, #0
 8003d1a:	69fa      	ldr	r2, [r7, #28]
 8003d1c:	f002 0203 	and.w	r2, r2, #3
 8003d20:	0092      	lsls	r2, r2, #2
 8003d22:	4093      	lsls	r3, r2
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d2a:	4938      	ldr	r1, [pc, #224]	; (8003e0c <HAL_GPIO_Init+0x35c>)
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	3302      	adds	r3, #2
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003d5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	43db      	mvns	r3, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	4013      	ands	r3, r2
 8003d76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	43db      	mvns	r3, r3
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f47f ae63 	bne.w	8003ac4 <HAL_GPIO_Init+0x14>
  }
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	3724      	adds	r7, #36	; 0x24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	58000400 	.word	0x58000400

08003e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e20:	787b      	ldrb	r3, [r7, #1]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e26:	887a      	ldrh	r2, [r7, #2]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e2c:	e003      	b.n	8003e36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e2e:	887b      	ldrh	r3, [r7, #2]
 8003e30:	041a      	lsls	r2, r3, #16
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	619a      	str	r2, [r3, #24]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003e42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e44:	b08f      	sub	sp, #60	; 0x3c
 8003e46:	af0a      	add	r7, sp, #40	; 0x28
 8003e48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e116      	b.n	8004082 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fd fa14 	bl	800129c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2203      	movs	r2, #3
 8003e78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d102      	bne.n	8003e8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f004 ff90 	bl	8008db8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	603b      	str	r3, [r7, #0]
 8003e9e:	687e      	ldr	r6, [r7, #4]
 8003ea0:	466d      	mov	r5, sp
 8003ea2:	f106 0410 	add.w	r4, r6, #16
 8003ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003eb6:	1d33      	adds	r3, r6, #4
 8003eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f004 ff0e 	bl	8008cdc <USB_CoreInit>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2202      	movs	r2, #2
 8003eca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e0d7      	b.n	8004082 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 ff7e 	bl	8008dda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	73fb      	strb	r3, [r7, #15]
 8003ee2:	e04a      	b.n	8003f7a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	333d      	adds	r3, #61	; 0x3d
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	333c      	adds	r3, #60	; 0x3c
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	b298      	uxth	r0, r3
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3356      	adds	r3, #86	; 0x56
 8003f20:	4602      	mov	r2, r0
 8003f22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f24:	7bfa      	ldrb	r2, [r7, #15]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3340      	adds	r3, #64	; 0x40
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f38:	7bfa      	ldrb	r2, [r7, #15]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	3344      	adds	r3, #68	; 0x44
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003f4c:	7bfa      	ldrb	r2, [r7, #15]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3348      	adds	r3, #72	; 0x48
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003f60:	7bfa      	ldrb	r2, [r7, #15]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334c      	adds	r3, #76	; 0x4c
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	3301      	adds	r3, #1
 8003f78:	73fb      	strb	r3, [r7, #15]
 8003f7a:	7bfa      	ldrb	r2, [r7, #15]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d3af      	bcc.n	8003ee4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f84:	2300      	movs	r3, #0
 8003f86:	73fb      	strb	r3, [r7, #15]
 8003f88:	e044      	b.n	8004014 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003fa0:	7bfa      	ldrb	r2, [r7, #15]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003fde:	2200      	movs	r2, #0
 8003fe0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003fe2:	7bfa      	ldrb	r2, [r7, #15]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	4413      	add	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	3301      	adds	r3, #1
 8004012:	73fb      	strb	r3, [r7, #15]
 8004014:	7bfa      	ldrb	r2, [r7, #15]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3b5      	bcc.n	8003f8a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	687e      	ldr	r6, [r7, #4]
 8004026:	466d      	mov	r5, sp
 8004028:	f106 0410 	add.w	r4, r6, #16
 800402c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800402e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004030:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004032:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004034:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004038:	e885 0003 	stmia.w	r5, {r0, r1}
 800403c:	1d33      	adds	r3, r6, #4
 800403e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004040:	6838      	ldr	r0, [r7, #0]
 8004042:	f004 ff17 	bl	8008e74 <USB_DevInit>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e014      	b.n	8004082 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b01      	cmp	r3, #1
 800406e:	d102      	bne.n	8004076 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f80b 	bl	800408c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f005 f8d5 	bl	800922a <USB_DevDisconnect>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800408c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040ba:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	10000003 	.word	0x10000003

080040d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_PWREx_ConfigSupply+0x70>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b04      	cmp	r3, #4
 80040e6:	d00a      	beq.n	80040fe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040e8:	4b16      	ldr	r3, [pc, #88]	; (8004144 <HAL_PWREx_ConfigSupply+0x70>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d001      	beq.n	80040fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e01f      	b.n	800413a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e01d      	b.n	800413a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040fe:	4b11      	ldr	r3, [pc, #68]	; (8004144 <HAL_PWREx_ConfigSupply+0x70>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f023 0207 	bic.w	r2, r3, #7
 8004106:	490f      	ldr	r1, [pc, #60]	; (8004144 <HAL_PWREx_ConfigSupply+0x70>)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4313      	orrs	r3, r2
 800410c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800410e:	f7fd fa9d 	bl	800164c <HAL_GetTick>
 8004112:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004114:	e009      	b.n	800412a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004116:	f7fd fa99 	bl	800164c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004124:	d901      	bls.n	800412a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e007      	b.n	800413a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800412a:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_PWREx_ConfigSupply+0x70>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004136:	d1ee      	bne.n	8004116 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	58024800 	.word	0x58024800

08004148 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a04      	ldr	r2, [pc, #16]	; (8004164 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004156:	60d3      	str	r3, [r2, #12]
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	58024800 	.word	0x58024800

08004168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08c      	sub	sp, #48	; 0x30
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f000 bc48 	b.w	8004a0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8088 	beq.w	800429a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800418a:	4b99      	ldr	r3, [pc, #612]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004194:	4b96      	ldr	r3, [pc, #600]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b10      	cmp	r3, #16
 800419e:	d007      	beq.n	80041b0 <HAL_RCC_OscConfig+0x48>
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	2b18      	cmp	r3, #24
 80041a4:	d111      	bne.n	80041ca <HAL_RCC_OscConfig+0x62>
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d10c      	bne.n	80041ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d06d      	beq.n	8004298 <HAL_RCC_OscConfig+0x130>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d169      	bne.n	8004298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	f000 bc21 	b.w	8004a0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d2:	d106      	bne.n	80041e2 <HAL_RCC_OscConfig+0x7a>
 80041d4:	4b86      	ldr	r3, [pc, #536]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a85      	ldr	r2, [pc, #532]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e02e      	b.n	8004240 <HAL_RCC_OscConfig+0xd8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0x9c>
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a80      	ldr	r2, [pc, #512]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b7e      	ldr	r3, [pc, #504]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7d      	ldr	r2, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80041fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xd8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0xc0>
 800420e:	4b78      	ldr	r3, [pc, #480]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a77      	ldr	r2, [pc, #476]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a74      	ldr	r2, [pc, #464]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xd8>
 8004228:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a70      	ldr	r2, [pc, #448]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b6e      	ldr	r3, [pc, #440]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6d      	ldr	r2, [pc, #436]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7fd fa00 	bl	800164c <HAL_GetTick>
 800424c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004250:	f7fd f9fc 	bl	800164c <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e3d4      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xe8>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fd f9ec 	bl	800164c <HAL_GetTick>
 8004274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004278:	f7fd f9e8 	bl	800164c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e3c0      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800428a:	4b59      	ldr	r3, [pc, #356]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x110>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 80ca 	beq.w	800443c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a8:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042b2:	4b4f      	ldr	r3, [pc, #316]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_RCC_OscConfig+0x166>
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	2b18      	cmp	r3, #24
 80042c2:	d156      	bne.n	8004372 <HAL_RCC_OscConfig+0x20a>
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d151      	bne.n	8004372 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042ce:	4b48      	ldr	r3, [pc, #288]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x17e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e392      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80042e6:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0219 	bic.w	r2, r3, #25
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	493f      	ldr	r1, [pc, #252]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd f9a8 	bl	800164c <HAL_GetTick>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004300:	f7fd f9a4 	bl	800164c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e37c      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0304 	and.w	r3, r3, #4
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	f7fd f9c5 	bl	80016ac <HAL_GetREVID>
 8004322:	4603      	mov	r3, r0
 8004324:	f241 0203 	movw	r2, #4099	; 0x1003
 8004328:	4293      	cmp	r3, r2
 800432a:	d817      	bhi.n	800435c <HAL_RCC_OscConfig+0x1f4>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b40      	cmp	r3, #64	; 0x40
 8004332:	d108      	bne.n	8004346 <HAL_RCC_OscConfig+0x1de>
 8004334:	4b2e      	ldr	r3, [pc, #184]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800433c:	4a2c      	ldr	r2, [pc, #176]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004342:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004344:	e07a      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004346:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	031b      	lsls	r3, r3, #12
 8004354:	4926      	ldr	r1, [pc, #152]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800435a:	e06f      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	061b      	lsls	r3, r3, #24
 800436a:	4921      	ldr	r1, [pc, #132]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004370:	e064      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d047      	beq.n	800440a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800437a:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 0219 	bic.w	r2, r3, #25
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	491a      	ldr	r1, [pc, #104]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438c:	f7fd f95e 	bl	800164c <HAL_GetTick>
 8004390:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004394:	f7fd f95a 	bl	800164c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e332      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a6:	4b12      	ldr	r3, [pc, #72]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0f0      	beq.n	8004394 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b2:	f7fd f97b 	bl	80016ac <HAL_GetREVID>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80043bc:	4293      	cmp	r3, r2
 80043be:	d819      	bhi.n	80043f4 <HAL_RCC_OscConfig+0x28c>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d108      	bne.n	80043da <HAL_RCC_OscConfig+0x272>
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80043d0:	4a07      	ldr	r2, [pc, #28]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	6053      	str	r3, [r2, #4]
 80043d8:	e030      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	031b      	lsls	r3, r3, #12
 80043e8:	4901      	ldr	r1, [pc, #4]	; (80043f0 <HAL_RCC_OscConfig+0x288>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
 80043ee:	e025      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
 80043f0:	58024400 	.word	0x58024400
 80043f4:	4b9a      	ldr	r3, [pc, #616]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	061b      	lsls	r3, r3, #24
 8004402:	4997      	ldr	r1, [pc, #604]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
 8004408:	e018      	b.n	800443c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800440a:	4b95      	ldr	r3, [pc, #596]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a94      	ldr	r2, [pc, #592]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004416:	f7fd f919 	bl	800164c <HAL_GetTick>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441e:	f7fd f915 	bl	800164c <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b02      	cmp	r3, #2
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e2ed      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004430:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1f0      	bne.n	800441e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a9 	beq.w	800459c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004452:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004454:	4b82      	ldr	r3, [pc, #520]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d007      	beq.n	8004470 <HAL_RCC_OscConfig+0x308>
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b18      	cmp	r3, #24
 8004464:	d13a      	bne.n	80044dc <HAL_RCC_OscConfig+0x374>
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f003 0303 	and.w	r3, r3, #3
 800446c:	2b01      	cmp	r3, #1
 800446e:	d135      	bne.n	80044dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004470:	4b7b      	ldr	r3, [pc, #492]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_RCC_OscConfig+0x320>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	2b80      	cmp	r3, #128	; 0x80
 8004482:	d001      	beq.n	8004488 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e2c1      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004488:	f7fd f910 	bl	80016ac <HAL_GetREVID>
 800448c:	4603      	mov	r3, r0
 800448e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004492:	4293      	cmp	r3, r2
 8004494:	d817      	bhi.n	80044c6 <HAL_RCC_OscConfig+0x35e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	2b20      	cmp	r3, #32
 800449c:	d108      	bne.n	80044b0 <HAL_RCC_OscConfig+0x348>
 800449e:	4b70      	ldr	r3, [pc, #448]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044a6:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044ae:	e075      	b.n	800459c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044b0:	4b6b      	ldr	r3, [pc, #428]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
 80044bc:	069b      	lsls	r3, r3, #26
 80044be:	4968      	ldr	r1, [pc, #416]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044c4:	e06a      	b.n	800459c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044c6:	4b66      	ldr	r3, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	061b      	lsls	r3, r3, #24
 80044d4:	4962      	ldr	r1, [pc, #392]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80044da:	e05f      	b.n	800459c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d042      	beq.n	800456a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80044ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd f8ac 	bl	800164c <HAL_GetTick>
 80044f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80044f8:	f7fd f8a8 	bl	800164c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e280      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004516:	f7fd f8c9 	bl	80016ac <HAL_GetREVID>
 800451a:	4603      	mov	r3, r0
 800451c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004520:	4293      	cmp	r3, r2
 8004522:	d817      	bhi.n	8004554 <HAL_RCC_OscConfig+0x3ec>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	2b20      	cmp	r3, #32
 800452a:	d108      	bne.n	800453e <HAL_RCC_OscConfig+0x3d6>
 800452c:	4b4c      	ldr	r3, [pc, #304]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004534:	4a4a      	ldr	r2, [pc, #296]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004536:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800453a:	6053      	str	r3, [r2, #4]
 800453c:	e02e      	b.n	800459c <HAL_RCC_OscConfig+0x434>
 800453e:	4b48      	ldr	r3, [pc, #288]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	069b      	lsls	r3, r3, #26
 800454c:	4944      	ldr	r1, [pc, #272]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800454e:	4313      	orrs	r3, r2
 8004550:	604b      	str	r3, [r1, #4]
 8004552:	e023      	b.n	800459c <HAL_RCC_OscConfig+0x434>
 8004554:	4b42      	ldr	r3, [pc, #264]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	061b      	lsls	r3, r3, #24
 8004562:	493f      	ldr	r1, [pc, #252]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004564:	4313      	orrs	r3, r2
 8004566:	60cb      	str	r3, [r1, #12]
 8004568:	e018      	b.n	800459c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800456a:	4b3d      	ldr	r3, [pc, #244]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3c      	ldr	r2, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fd f869 	bl	800164c <HAL_GetTick>
 800457a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800457e:	f7fd f865 	bl	800164c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e23d      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004590:	4b33      	ldr	r3, [pc, #204]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d036      	beq.n	8004616 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d019      	beq.n	80045e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b0:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80045b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b4:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045bc:	f7fd f846 	bl	800164c <HAL_GetTick>
 80045c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fd f842 	bl	800164c <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e21a      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80045d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045da:	f003 0302 	and.w	r3, r3, #2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x45c>
 80045e2:	e018      	b.n	8004616 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e4:	4b1e      	ldr	r3, [pc, #120]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80045e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e8:	4a1d      	ldr	r2, [pc, #116]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f0:	f7fd f82c 	bl	800164c <HAL_GetTick>
 80045f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f8:	f7fd f828 	bl	800164c <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e200      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800460c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d039      	beq.n	8004696 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d01c      	beq.n	8004664 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800462a:	4b0d      	ldr	r3, [pc, #52]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a0c      	ldr	r2, [pc, #48]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004634:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004636:	f7fd f809 	bl	800164c <HAL_GetTick>
 800463a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800463e:	f7fd f805 	bl	800164c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e1dd      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_RCC_OscConfig+0x4f8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0f0      	beq.n	800463e <HAL_RCC_OscConfig+0x4d6>
 800465c:	e01b      	b.n	8004696 <HAL_RCC_OscConfig+0x52e>
 800465e:	bf00      	nop
 8004660:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004664:	4b9b      	ldr	r3, [pc, #620]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a9a      	ldr	r2, [pc, #616]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800466a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800466e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004670:	f7fc ffec 	bl	800164c <HAL_GetTick>
 8004674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004678:	f7fc ffe8 	bl	800164c <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1c0      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800468a:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8081 	beq.w	80047a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80046a4:	4b8c      	ldr	r3, [pc, #560]	; (80048d8 <HAL_RCC_OscConfig+0x770>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a8b      	ldr	r2, [pc, #556]	; (80048d8 <HAL_RCC_OscConfig+0x770>)
 80046aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046b0:	f7fc ffcc 	bl	800164c <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046b8:	f7fc ffc8 	bl	800164c <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b64      	cmp	r3, #100	; 0x64
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1a0      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80046ca:	4b83      	ldr	r3, [pc, #524]	; (80048d8 <HAL_RCC_OscConfig+0x770>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d106      	bne.n	80046ec <HAL_RCC_OscConfig+0x584>
 80046de:	4b7d      	ldr	r3, [pc, #500]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	4a7c      	ldr	r2, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ea:	e02d      	b.n	8004748 <HAL_RCC_OscConfig+0x5e0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10c      	bne.n	800470e <HAL_RCC_OscConfig+0x5a6>
 80046f4:	4b77      	ldr	r3, [pc, #476]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	4a76      	ldr	r2, [pc, #472]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80046fa:	f023 0301 	bic.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004700:	4b74      	ldr	r3, [pc, #464]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a73      	ldr	r2, [pc, #460]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004706:	f023 0304 	bic.w	r3, r3, #4
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	e01c      	b.n	8004748 <HAL_RCC_OscConfig+0x5e0>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b05      	cmp	r3, #5
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c8>
 8004716:	4b6f      	ldr	r3, [pc, #444]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	4a6e      	ldr	r2, [pc, #440]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800471c:	f043 0304 	orr.w	r3, r3, #4
 8004720:	6713      	str	r3, [r2, #112]	; 0x70
 8004722:	4b6c      	ldr	r3, [pc, #432]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a6b      	ldr	r2, [pc, #428]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004728:	f043 0301 	orr.w	r3, r3, #1
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0x5e0>
 8004730:	4b68      	ldr	r3, [pc, #416]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004734:	4a67      	ldr	r2, [pc, #412]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004736:	f023 0301 	bic.w	r3, r3, #1
 800473a:	6713      	str	r3, [r2, #112]	; 0x70
 800473c:	4b65      	ldr	r3, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a64      	ldr	r2, [pc, #400]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004742:	f023 0304 	bic.w	r3, r3, #4
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d015      	beq.n	800477c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004750:	f7fc ff7c 	bl	800164c <HAL_GetTick>
 8004754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004756:	e00a      	b.n	800476e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7fc ff78 	bl	800164c <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e14e      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800476e:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ee      	beq.n	8004758 <HAL_RCC_OscConfig+0x5f0>
 800477a:	e014      	b.n	80047a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fc ff66 	bl	800164c <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004782:	e00a      	b.n	800479a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fc ff62 	bl	800164c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e138      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800479a:	4b4e      	ldr	r3, [pc, #312]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800479c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ee      	bne.n	8004784 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 812d 	beq.w	8004a0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80047b0:	4b48      	ldr	r3, [pc, #288]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047b8:	2b18      	cmp	r3, #24
 80047ba:	f000 80bd 	beq.w	8004938 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	f040 809e 	bne.w	8004904 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a41      	ldr	r2, [pc, #260]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80047ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fc ff3a 	bl	800164c <HAL_GetTick>
 80047d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fc ff36 	bl	800164c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e10e      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047ee:	4b39      	ldr	r3, [pc, #228]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80047fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_OscConfig+0x774>)
 8004800:	4013      	ands	r3, r2
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	430a      	orrs	r2, r1
 800480e:	4931      	ldr	r1, [pc, #196]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	628b      	str	r3, [r1, #40]	; 0x28
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	3b01      	subs	r3, #1
 800481a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004822:	3b01      	subs	r3, #1
 8004824:	025b      	lsls	r3, r3, #9
 8004826:	b29b      	uxth	r3, r3
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	3b01      	subs	r3, #1
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004836:	431a      	orrs	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	3b01      	subs	r3, #1
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004844:	4923      	ldr	r1, [pc, #140]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004846:	4313      	orrs	r3, r2
 8004848:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800484a:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	4a21      	ldr	r2, [pc, #132]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004850:	f023 0301 	bic.w	r3, r3, #1
 8004854:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004856:	4b1f      	ldr	r3, [pc, #124]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800485a:	4b21      	ldr	r3, [pc, #132]	; (80048e0 <HAL_RCC_OscConfig+0x778>)
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004862:	00d2      	lsls	r2, r2, #3
 8004864:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004866:	4313      	orrs	r3, r2
 8004868:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800486a:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f023 020c 	bic.w	r2, r3, #12
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	4917      	ldr	r1, [pc, #92]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004878:	4313      	orrs	r3, r2
 800487a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800487c:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f023 0202 	bic.w	r2, r3, #2
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	4912      	ldr	r1, [pc, #72]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800488a:	4313      	orrs	r3, r2
 800488c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048aa:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	4a07      	ldr	r2, [pc, #28]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ca:	f7fc febf 	bl	800164c <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048d0:	e011      	b.n	80048f6 <HAL_RCC_OscConfig+0x78e>
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	58024800 	.word	0x58024800
 80048dc:	fffffc0c 	.word	0xfffffc0c
 80048e0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fc feb2 	bl	800164c <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e08a      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x77c>
 8004902:	e082      	b.n	8004a0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b43      	ldr	r3, [pc, #268]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a42      	ldr	r2, [pc, #264]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 800490a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fc fe9c 	bl	800164c <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fc fe98 	bl	800164c <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e070      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800492a:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x7b0>
 8004936:	e068      	b.n	8004a0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800493e:	4b35      	ldr	r3, [pc, #212]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	2b01      	cmp	r3, #1
 800494a:	d031      	beq.n	80049b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	f003 0203 	and.w	r2, r3, #3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d12a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	091b      	lsrs	r3, r3, #4
 800495e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004966:	429a      	cmp	r2, r3
 8004968:	d122      	bne.n	80049b0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004976:	429a      	cmp	r2, r3
 8004978:	d11a      	bne.n	80049b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	0a5b      	lsrs	r3, r3, #9
 800497e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004988:	429a      	cmp	r2, r3
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	0c1b      	lsrs	r3, r3, #16
 8004990:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800499a:	429a      	cmp	r2, r3
 800499c:	d108      	bne.n	80049b0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	0e1b      	lsrs	r3, r3, #24
 80049a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e02b      	b.n	8004a0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80049b4:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80049b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b8:	08db      	lsrs	r3, r3, #3
 80049ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d01f      	beq.n	8004a0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80049cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ce:	4a11      	ldr	r2, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049d6:	f7fc fe39 	bl	800164c <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80049dc:	bf00      	nop
 80049de:	f7fc fe35 	bl	800164c <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d0f9      	beq.n	80049de <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049ea:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80049ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ee:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <HAL_RCC_OscConfig+0x8b0>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049f6:	00d2      	lsls	r2, r2, #3
 80049f8:	4906      	ldr	r1, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 8004a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a02:	4a04      	ldr	r2, [pc, #16]	; (8004a14 <HAL_RCC_OscConfig+0x8ac>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3730      	adds	r7, #48	; 0x30
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58024400 	.word	0x58024400
 8004a18:	ffff0007 	.word	0xffff0007

08004a1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e19c      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a30:	4b8a      	ldr	r3, [pc, #552]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 030f 	and.w	r3, r3, #15
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d910      	bls.n	8004a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3e:	4b87      	ldr	r3, [pc, #540]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f023 020f 	bic.w	r2, r3, #15
 8004a46:	4985      	ldr	r1, [pc, #532]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4e:	4b83      	ldr	r3, [pc, #524]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	683a      	ldr	r2, [r7, #0]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d001      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e184      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d010      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	4b7b      	ldr	r3, [pc, #492]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d908      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004a7c:	4b78      	ldr	r3, [pc, #480]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	4975      	ldr	r1, [pc, #468]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d010      	beq.n	8004abc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	4b70      	ldr	r3, [pc, #448]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d908      	bls.n	8004abc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004aaa:	4b6d      	ldr	r3, [pc, #436]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	496a      	ldr	r1, [pc, #424]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d010      	beq.n	8004aea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699a      	ldr	r2, [r3, #24]
 8004acc:	4b64      	ldr	r3, [pc, #400]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d908      	bls.n	8004aea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ad8:	4b61      	ldr	r3, [pc, #388]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	495e      	ldr	r1, [pc, #376]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d010      	beq.n	8004b18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	4b59      	ldr	r3, [pc, #356]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d908      	bls.n	8004b18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004b06:	4b56      	ldr	r3, [pc, #344]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4953      	ldr	r1, [pc, #332]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d010      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	4b4d      	ldr	r3, [pc, #308]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d908      	bls.n	8004b46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b34:	4b4a      	ldr	r3, [pc, #296]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	f023 020f 	bic.w	r2, r3, #15
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4947      	ldr	r1, [pc, #284]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0301 	and.w	r3, r3, #1
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d055      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004b52:	4b43      	ldr	r3, [pc, #268]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	4940      	ldr	r1, [pc, #256]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d107      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004b6c:	4b3c      	ldr	r3, [pc, #240]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d121      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0f6      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b84:	4b36      	ldr	r3, [pc, #216]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d115      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0ea      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d107      	bne.n	8004bac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b9c:	4b30      	ldr	r3, [pc, #192]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d109      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e0de      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bac:	4b2c      	ldr	r3, [pc, #176]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0d6      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004bbc:	4b28      	ldr	r3, [pc, #160]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f023 0207 	bic.w	r2, r3, #7
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	4925      	ldr	r1, [pc, #148]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bce:	f7fc fd3d 	bl	800164c <HAL_GetTick>
 8004bd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd6:	f7fc fd39 	bl	800164c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0be      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bec:	4b1c      	ldr	r3, [pc, #112]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d1eb      	bne.n	8004bd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d010      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d208      	bcs.n	8004c2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f023 020f 	bic.w	r2, r3, #15
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <HAL_RCC_ClockConfig+0x244>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 030f 	and.w	r3, r3, #15
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d214      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b08      	ldr	r3, [pc, #32]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 020f 	bic.w	r2, r3, #15
 8004c42:	4906      	ldr	r1, [pc, #24]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_RCC_ClockConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e086      	b.n	8004d6a <HAL_RCC_ClockConfig+0x34e>
 8004c5c:	52002000 	.word	0x52002000
 8004c60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d208      	bcs.n	8004c92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c80:	4b3c      	ldr	r3, [pc, #240]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	4939      	ldr	r1, [pc, #228]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695a      	ldr	r2, [r3, #20]
 8004ca2:	4b34      	ldr	r3, [pc, #208]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d208      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cae:	4b31      	ldr	r3, [pc, #196]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	492e      	ldr	r1, [pc, #184]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d208      	bcs.n	8004cee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	699b      	ldr	r3, [r3, #24]
 8004ce8:	4922      	ldr	r1, [pc, #136]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d010      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69da      	ldr	r2, [r3, #28]
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d208      	bcs.n	8004d1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4917      	ldr	r1, [pc, #92]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004d1c:	f000 f834 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b14      	ldr	r3, [pc, #80]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 030f 	and.w	r3, r3, #15
 8004d2c:	4912      	ldr	r1, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x35c>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	fa22 f303 	lsr.w	r3, r2, r3
 8004d38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d3a:	4b0e      	ldr	r3, [pc, #56]	; (8004d74 <HAL_RCC_ClockConfig+0x358>)
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	4a0d      	ldr	r2, [pc, #52]	; (8004d78 <HAL_RCC_ClockConfig+0x35c>)
 8004d44:	5cd3      	ldrb	r3, [r2, r3]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	4a0a      	ldr	r2, [pc, #40]	; (8004d7c <HAL_RCC_ClockConfig+0x360>)
 8004d52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d54:	4a0a      	ldr	r2, [pc, #40]	; (8004d80 <HAL_RCC_ClockConfig+0x364>)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x368>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fc fc2a 	bl	80015b8 <HAL_InitTick>
 8004d64:	4603      	mov	r3, r0
 8004d66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	58024400 	.word	0x58024400
 8004d78:	0800be30 	.word	0x0800be30
 8004d7c:	24000004 	.word	0x24000004
 8004d80:	24000000 	.word	0x24000000
 8004d84:	24000008 	.word	0x24000008

08004d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	; 0x24
 8004d8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d8e:	4bb3      	ldr	r3, [pc, #716]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d96:	2b18      	cmp	r3, #24
 8004d98:	f200 8155 	bhi.w	8005046 <HAL_RCC_GetSysClockFreq+0x2be>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004e09 	.word	0x08004e09
 8004da8:	08005047 	.word	0x08005047
 8004dac:	08005047 	.word	0x08005047
 8004db0:	08005047 	.word	0x08005047
 8004db4:	08005047 	.word	0x08005047
 8004db8:	08005047 	.word	0x08005047
 8004dbc:	08005047 	.word	0x08005047
 8004dc0:	08005047 	.word	0x08005047
 8004dc4:	08004e2f 	.word	0x08004e2f
 8004dc8:	08005047 	.word	0x08005047
 8004dcc:	08005047 	.word	0x08005047
 8004dd0:	08005047 	.word	0x08005047
 8004dd4:	08005047 	.word	0x08005047
 8004dd8:	08005047 	.word	0x08005047
 8004ddc:	08005047 	.word	0x08005047
 8004de0:	08005047 	.word	0x08005047
 8004de4:	08004e35 	.word	0x08004e35
 8004de8:	08005047 	.word	0x08005047
 8004dec:	08005047 	.word	0x08005047
 8004df0:	08005047 	.word	0x08005047
 8004df4:	08005047 	.word	0x08005047
 8004df8:	08005047 	.word	0x08005047
 8004dfc:	08005047 	.word	0x08005047
 8004e00:	08005047 	.word	0x08005047
 8004e04:	08004e3b 	.word	0x08004e3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e08:	4b94      	ldr	r3, [pc, #592]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d009      	beq.n	8004e28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e14:	4b91      	ldr	r3, [pc, #580]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	08db      	lsrs	r3, r3, #3
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	4a90      	ldr	r2, [pc, #576]	; (8005060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e20:	fa22 f303 	lsr.w	r3, r2, r3
 8004e24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004e26:	e111      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004e28:	4b8d      	ldr	r3, [pc, #564]	; (8005060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004e2a:	61bb      	str	r3, [r7, #24]
      break;
 8004e2c:	e10e      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004e2e:	4b8d      	ldr	r3, [pc, #564]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004e30:	61bb      	str	r3, [r7, #24]
      break;
 8004e32:	e10b      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004e34:	4b8c      	ldr	r3, [pc, #560]	; (8005068 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004e36:	61bb      	str	r3, [r7, #24]
      break;
 8004e38:	e108      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e3a:	4b88      	ldr	r3, [pc, #544]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3e:	f003 0303 	and.w	r3, r3, #3
 8004e42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004e44:	4b85      	ldr	r3, [pc, #532]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	091b      	lsrs	r3, r3, #4
 8004e4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004e50:	4b82      	ldr	r3, [pc, #520]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004e5a:	4b80      	ldr	r3, [pc, #512]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 80e1 	beq.w	8005040 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	f000 8083 	beq.w	8004f8c <HAL_RCC_GetSysClockFreq+0x204>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	f200 80a1 	bhi.w	8004fd0 <HAL_RCC_GetSysClockFreq+0x248>
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d003      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x114>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d056      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004e9a:	e099      	b.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d02d      	beq.n	8004f04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	08db      	lsrs	r3, r3, #3
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	4a6b      	ldr	r2, [pc, #428]	; (8005060 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	ee07 3a90 	vmov	s15, r3
 8004ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ed2:	4b62      	ldr	r3, [pc, #392]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eda:	ee07 3a90 	vmov	s15, r3
 8004ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ee2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ee6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004f02:	e087      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005070 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f16:	4b51      	ldr	r3, [pc, #324]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1e:	ee07 3a90 	vmov	s15, r3
 8004f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f26:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f46:	e065      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	ee07 3a90 	vmov	s15, r3
 8004f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f5a:	4b40      	ldr	r3, [pc, #256]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f62:	ee07 3a90 	vmov	s15, r3
 8004f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f8a:	e043      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	ee07 3a90 	vmov	s15, r3
 8004f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005078 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f9e:	4b2f      	ldr	r3, [pc, #188]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa6:	ee07 3a90 	vmov	s15, r3
 8004faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004fce:	e021      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005074 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800506c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800500a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005012:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005014:	4b11      	ldr	r3, [pc, #68]	; (800505c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005018:	0a5b      	lsrs	r3, r3, #9
 800501a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501e:	3301      	adds	r3, #1
 8005020:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	ee07 3a90 	vmov	s15, r3
 8005028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800502c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005038:	ee17 3a90 	vmov	r3, s15
 800503c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800503e:	e005      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	61bb      	str	r3, [r7, #24]
      break;
 8005044:	e002      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005048:	61bb      	str	r3, [r7, #24]
      break;
 800504a:	bf00      	nop
  }

  return sysclockfreq;
 800504c:	69bb      	ldr	r3, [r7, #24]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3724      	adds	r7, #36	; 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	58024400 	.word	0x58024400
 8005060:	03d09000 	.word	0x03d09000
 8005064:	003d0900 	.word	0x003d0900
 8005068:	007a1200 	.word	0x007a1200
 800506c:	46000000 	.word	0x46000000
 8005070:	4c742400 	.word	0x4c742400
 8005074:	4a742400 	.word	0x4a742400
 8005078:	4af42400 	.word	0x4af42400

0800507c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005082:	f7ff fe81 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8005086:	4602      	mov	r2, r0
 8005088:	4b10      	ldr	r3, [pc, #64]	; (80050cc <HAL_RCC_GetHCLKFreq+0x50>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	f003 030f 	and.w	r3, r3, #15
 8005092:	490f      	ldr	r1, [pc, #60]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_GetHCLKFreq+0x50>)
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80050aa:	5cd3      	ldrb	r3, [r2, r3]
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	fa22 f303 	lsr.w	r3, r2, r3
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80050ba:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	58024400 	.word	0x58024400
 80050d0:	0800be30 	.word	0x0800be30
 80050d4:	24000004 	.word	0x24000004
 80050d8:	24000000 	.word	0x24000000

080050dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80050e0:	f7ff ffcc 	bl	800507c <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b06      	ldr	r3, [pc, #24]	; (8005100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e8:	69db      	ldr	r3, [r3, #28]
 80050ea:	091b      	lsrs	r3, r3, #4
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4904      	ldr	r1, [pc, #16]	; (8005104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	f003 031f 	and.w	r3, r3, #31
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	58024400 	.word	0x58024400
 8005104:	0800be30 	.word	0x0800be30

08005108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800510c:	f7ff ffb6 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8005110:	4602      	mov	r2, r0
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	0a1b      	lsrs	r3, r3, #8
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	4904      	ldr	r1, [pc, #16]	; (8005130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800511e:	5ccb      	ldrb	r3, [r1, r3]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	58024400 	.word	0x58024400
 8005130:	0800be30 	.word	0x0800be30

08005134 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b0ca      	sub	sp, #296	; 0x128
 800513a:	af00      	add	r7, sp, #0
 800513c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005158:	2500      	movs	r5, #0
 800515a:	ea54 0305 	orrs.w	r3, r4, r5
 800515e:	d049      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005166:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800516a:	d02f      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800516c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005170:	d828      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005176:	d01a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005178:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800517c:	d822      	bhi.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005186:	d007      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005188:	e01c      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518a:	4bb8      	ldr	r3, [pc, #736]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4ab7      	ldr	r2, [pc, #732]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005196:	e01a      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519c:	3308      	adds	r3, #8
 800519e:	2102      	movs	r1, #2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f002 fb61 	bl	8007868 <RCCEx_PLL2_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051ac:	e00f      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b2:	3328      	adds	r3, #40	; 0x28
 80051b4:	2102      	movs	r1, #2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f002 fc08 	bl	80079cc <RCCEx_PLL3_Config>
 80051bc:	4603      	mov	r3, r0
 80051be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80051c2:	e004      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80051ca:	e000      	b.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80051cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80051d6:	4ba5      	ldr	r3, [pc, #660]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e4:	4aa1      	ldr	r2, [pc, #644]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051e6:	430b      	orrs	r3, r1
 80051e8:	6513      	str	r3, [r2, #80]	; 0x50
 80051ea:	e003      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80051f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005200:	f04f 0900 	mov.w	r9, #0
 8005204:	ea58 0309 	orrs.w	r3, r8, r9
 8005208:	d047      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800520e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005210:	2b04      	cmp	r3, #4
 8005212:	d82a      	bhi.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005231 	.word	0x08005231
 8005220:	0800523f 	.word	0x0800523f
 8005224:	08005255 	.word	0x08005255
 8005228:	08005273 	.word	0x08005273
 800522c:	08005273 	.word	0x08005273
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005230:	4b8e      	ldr	r3, [pc, #568]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4a8d      	ldr	r2, [pc, #564]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800523c:	e01a      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800523e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005242:	3308      	adds	r3, #8
 8005244:	2100      	movs	r1, #0
 8005246:	4618      	mov	r0, r3
 8005248:	f002 fb0e 	bl	8007868 <RCCEx_PLL2_Config>
 800524c:	4603      	mov	r3, r0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005252:	e00f      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005258:	3328      	adds	r3, #40	; 0x28
 800525a:	2100      	movs	r1, #0
 800525c:	4618      	mov	r0, r3
 800525e:	f002 fbb5 	bl	80079cc <RCCEx_PLL3_Config>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005268:	e004      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005270:	e000      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800527c:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	f023 0107 	bic.w	r1, r3, #7
 8005284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800528a:	4a78      	ldr	r2, [pc, #480]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800528c:	430b      	orrs	r3, r1
 800528e:	6513      	str	r3, [r2, #80]	; 0x50
 8005290:	e003      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800529a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80052a6:	f04f 0b00 	mov.w	fp, #0
 80052aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80052ae:	d04c      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80052b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ba:	d030      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d829      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052c2:	2bc0      	cmp	r3, #192	; 0xc0
 80052c4:	d02d      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80052c6:	2bc0      	cmp	r3, #192	; 0xc0
 80052c8:	d825      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052ca:	2b80      	cmp	r3, #128	; 0x80
 80052cc:	d018      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80052ce:	2b80      	cmp	r3, #128	; 0x80
 80052d0:	d821      	bhi.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80052d6:	2b40      	cmp	r3, #64	; 0x40
 80052d8:	d007      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80052da:	e01c      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4b63      	ldr	r3, [pc, #396]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4a62      	ldr	r2, [pc, #392]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052e8:	e01c      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052ee:	3308      	adds	r3, #8
 80052f0:	2100      	movs	r1, #0
 80052f2:	4618      	mov	r0, r3
 80052f4:	f002 fab8 	bl	8007868 <RCCEx_PLL2_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80052fe:	e011      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005304:	3328      	adds	r3, #40	; 0x28
 8005306:	2100      	movs	r1, #0
 8005308:	4618      	mov	r0, r3
 800530a:	f002 fb5f 	bl	80079cc <RCCEx_PLL3_Config>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005314:	e006      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800531c:	e002      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800532c:	4b4f      	ldr	r3, [pc, #316]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800532e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005330:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	4a4c      	ldr	r2, [pc, #304]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533c:	430b      	orrs	r3, r1
 800533e:	6513      	str	r3, [r2, #80]	; 0x50
 8005340:	e003      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005352:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005356:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800535a:	2300      	movs	r3, #0
 800535c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005360:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8005364:	460b      	mov	r3, r1
 8005366:	4313      	orrs	r3, r2
 8005368:	d053      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800536e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005372:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005376:	d035      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005378:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800537c:	d82e      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800537e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005382:	d031      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005384:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005388:	d828      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800538a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538e:	d01a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005390:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005394:	d822      	bhi.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800539a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800539e:	d007      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80053a0:	e01c      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053a2:	4b32      	ldr	r3, [pc, #200]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	4a31      	ldr	r2, [pc, #196]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053ae:	e01c      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b4:	3308      	adds	r3, #8
 80053b6:	2100      	movs	r1, #0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f002 fa55 	bl	8007868 <RCCEx_PLL2_Config>
 80053be:	4603      	mov	r3, r0
 80053c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053c4:	e011      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053ca:	3328      	adds	r3, #40	; 0x28
 80053cc:	2100      	movs	r1, #0
 80053ce:	4618      	mov	r0, r3
 80053d0:	f002 fafc 	bl	80079cc <RCCEx_PLL3_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053da:	e006      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053e2:	e002      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053e4:	bf00      	nop
 80053e6:	e000      	b.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80053e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10b      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80053f2:	4b1e      	ldr	r3, [pc, #120]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80053fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005402:	4a1a      	ldr	r2, [pc, #104]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005404:	430b      	orrs	r3, r1
 8005406:	6593      	str	r3, [r2, #88]	; 0x58
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800540e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800541e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005422:	2300      	movs	r3, #0
 8005424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005428:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800542c:	460b      	mov	r3, r1
 800542e:	4313      	orrs	r3, r2
 8005430:	d056      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800543a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800543e:	d038      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005440:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005444:	d831      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005446:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800544a:	d034      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800544c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005450:	d82b      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005456:	d01d      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800545c:	d825      	bhi.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800545e:	2b00      	cmp	r3, #0
 8005460:	d006      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005462:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005468:	e01f      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800546a:	bf00      	nop
 800546c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005470:	4ba2      	ldr	r3, [pc, #648]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	4aa1      	ldr	r2, [pc, #644]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800547a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800547c:	e01c      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800547e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005482:	3308      	adds	r3, #8
 8005484:	2100      	movs	r1, #0
 8005486:	4618      	mov	r0, r3
 8005488:	f002 f9ee 	bl	8007868 <RCCEx_PLL2_Config>
 800548c:	4603      	mov	r3, r0
 800548e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005492:	e011      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005498:	3328      	adds	r3, #40	; 0x28
 800549a:	2100      	movs	r1, #0
 800549c:	4618      	mov	r0, r3
 800549e:	f002 fa95 	bl	80079cc <RCCEx_PLL3_Config>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054a8:	e006      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80054b0:	e002      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054b2:	bf00      	nop
 80054b4:	e000      	b.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80054b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10b      	bne.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80054c0:	4b8e      	ldr	r3, [pc, #568]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80054c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80054d0:	4a8a      	ldr	r2, [pc, #552]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	6593      	str	r3, [r2, #88]	; 0x58
 80054d6:	e003      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80054dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80054e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80054ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80054f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d03a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	2b30      	cmp	r3, #48	; 0x30
 8005508:	d01f      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800550a:	2b30      	cmp	r3, #48	; 0x30
 800550c:	d819      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800550e:	2b20      	cmp	r3, #32
 8005510:	d00c      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005512:	2b20      	cmp	r3, #32
 8005514:	d815      	bhi.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005516:	2b00      	cmp	r3, #0
 8005518:	d019      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800551a:	2b10      	cmp	r3, #16
 800551c:	d111      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800551e:	4b77      	ldr	r3, [pc, #476]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	4a76      	ldr	r2, [pc, #472]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005528:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800552a:	e011      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800552c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005530:	3308      	adds	r3, #8
 8005532:	2102      	movs	r1, #2
 8005534:	4618      	mov	r0, r3
 8005536:	f002 f997 	bl	8007868 <RCCEx_PLL2_Config>
 800553a:	4603      	mov	r3, r0
 800553c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005540:	e006      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005548:	e002      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800554e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005558:	4b68      	ldr	r3, [pc, #416]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800555a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	4a65      	ldr	r2, [pc, #404]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005568:	430b      	orrs	r3, r1
 800556a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800556c:	e003      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800556e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005572:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800557a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005582:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005586:	2300      	movs	r3, #0
 8005588:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800558c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005590:	460b      	mov	r3, r1
 8005592:	4313      	orrs	r3, r2
 8005594:	d051      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800559a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800559c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a0:	d035      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80055a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055a6:	d82e      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055ac:	d031      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80055ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055b2:	d828      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055b8:	d01a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055be:	d822      	bhi.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80055c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c8:	d007      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80055ca:	e01c      	b.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055cc:	4b4b      	ldr	r3, [pc, #300]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a4a      	ldr	r2, [pc, #296]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055d8:	e01c      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055de:	3308      	adds	r3, #8
 80055e0:	2100      	movs	r1, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f002 f940 	bl	8007868 <RCCEx_PLL2_Config>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80055ee:	e011      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055f4:	3328      	adds	r3, #40	; 0x28
 80055f6:	2100      	movs	r1, #0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f002 f9e7 	bl	80079cc <RCCEx_PLL3_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005604:	e006      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800560c:	e002      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800560e:	bf00      	nop
 8005610:	e000      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005614:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800561c:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005620:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800562a:	4a34      	ldr	r2, [pc, #208]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562c:	430b      	orrs	r3, r1
 800562e:	6513      	str	r3, [r2, #80]	; 0x50
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005646:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800564a:	2300      	movs	r3, #0
 800564c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005650:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005654:	460b      	mov	r3, r1
 8005656:	4313      	orrs	r3, r2
 8005658:	d056      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800565a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800565e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005664:	d033      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005666:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800566a:	d82c      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800566c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005670:	d02f      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005672:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005676:	d826      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005678:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800567c:	d02b      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800567e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005682:	d820      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005684:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005688:	d012      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800568a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800568e:	d81a      	bhi.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d022      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005698:	d115      	bne.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800569a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569e:	3308      	adds	r3, #8
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 f8e0 	bl	8007868 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056ae:	e015      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056b4:	3328      	adds	r3, #40	; 0x28
 80056b6:	2101      	movs	r1, #1
 80056b8:	4618      	mov	r0, r3
 80056ba:	f002 f987 	bl	80079cc <RCCEx_PLL3_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80056c4:	e00a      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056cc:	e006      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056ce:	bf00      	nop
 80056d0:	e004      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056d2:	bf00      	nop
 80056d4:	e002      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056d6:	bf00      	nop
 80056d8:	e000      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056f2:	4a02      	ldr	r2, [pc, #8]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	6513      	str	r3, [r2, #80]	; 0x50
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005718:	2300      	movs	r3, #0
 800571a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800571e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005722:	460b      	mov	r3, r1
 8005724:	4313      	orrs	r3, r2
 8005726:	d055      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800572c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005730:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005734:	d033      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800573a:	d82c      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800573c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005740:	d02f      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005746:	d826      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005748:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800574c:	d02b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800574e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005752:	d820      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005758:	d012      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800575a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800575e:	d81a      	bhi.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005760:	2b00      	cmp	r3, #0
 8005762:	d022      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005764:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005768:	d115      	bne.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800576a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576e:	3308      	adds	r3, #8
 8005770:	2101      	movs	r1, #1
 8005772:	4618      	mov	r0, r3
 8005774:	f002 f878 	bl	8007868 <RCCEx_PLL2_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800577e:	e015      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005784:	3328      	adds	r3, #40	; 0x28
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f002 f91f 	bl	80079cc <RCCEx_PLL3_Config>
 800578e:	4603      	mov	r3, r0
 8005790:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005794:	e00a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800579c:	e006      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800579e:	bf00      	nop
 80057a0:	e004      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80057aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10b      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80057b4:	4ba3      	ldr	r3, [pc, #652]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057c4:	4a9f      	ldr	r2, [pc, #636]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80057e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80057ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	d037      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80057f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057fe:	d00e      	beq.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005800:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005804:	d816      	bhi.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005806:	2b00      	cmp	r3, #0
 8005808:	d018      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800580a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800580e:	d111      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005810:	4b8c      	ldr	r3, [pc, #560]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	4a8b      	ldr	r2, [pc, #556]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800581a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800581c:	e00f      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800581e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005822:	3308      	adds	r3, #8
 8005824:	2101      	movs	r1, #1
 8005826:	4618      	mov	r0, r3
 8005828:	f002 f81e 	bl	8007868 <RCCEx_PLL2_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005832:	e004      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800583a:	e000      	b.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800583c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005842:	2b00      	cmp	r3, #0
 8005844:	d10a      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005846:	4b7f      	ldr	r3, [pc, #508]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800584e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005854:	4a7b      	ldr	r2, [pc, #492]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005856:	430b      	orrs	r3, r1
 8005858:	6513      	str	r3, [r2, #80]	; 0x50
 800585a:	e003      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800585c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005860:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005870:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005874:	2300      	movs	r3, #0
 8005876:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800587a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800587e:	460b      	mov	r3, r1
 8005880:	4313      	orrs	r3, r2
 8005882:	d039      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588a:	2b03      	cmp	r3, #3
 800588c:	d81c      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800588e:	a201      	add	r2, pc, #4	; (adr r2, 8005894 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058a5 	.word	0x080058a5
 800589c:	080058b3 	.word	0x080058b3
 80058a0:	080058d1 	.word	0x080058d1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058a4:	4b67      	ldr	r3, [pc, #412]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a8:	4a66      	ldr	r2, [pc, #408]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058b0:	e00f      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058b6:	3308      	adds	r3, #8
 80058b8:	2102      	movs	r1, #2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f001 ffd4 	bl	8007868 <RCCEx_PLL2_Config>
 80058c0:	4603      	mov	r3, r0
 80058c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80058c6:	e004      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80058ce:	e000      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80058d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10a      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80058da:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058de:	f023 0103 	bic.w	r1, r3, #3
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058e8:	4a56      	ldr	r2, [pc, #344]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ea:	430b      	orrs	r3, r1
 80058ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80058ee:	e003      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005904:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005908:	2300      	movs	r3, #0
 800590a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800590e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	f000 809f 	beq.w	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800591a:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a4a      	ldr	r2, [pc, #296]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005924:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005926:	f7fb fe91 	bl	800164c <HAL_GetTick>
 800592a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800592e:	e00b      	b.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005930:	f7fb fe8c 	bl	800164c <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	2b64      	cmp	r3, #100	; 0x64
 800593e:	d903      	bls.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005946:	e005      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005948:	4b3f      	ldr	r3, [pc, #252]	; (8005a48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005950:	2b00      	cmp	r3, #0
 8005952:	d0ed      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005954:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005958:	2b00      	cmp	r3, #0
 800595a:	d179      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800595c:	4b39      	ldr	r3, [pc, #228]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800595e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005964:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005968:	4053      	eors	r3, r2
 800596a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596e:	2b00      	cmp	r3, #0
 8005970:	d015      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005972:	4b34      	ldr	r3, [pc, #208]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800597a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800597e:	4b31      	ldr	r3, [pc, #196]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a30      	ldr	r2, [pc, #192]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005984:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005996:	4a2b      	ldr	r2, [pc, #172]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005998:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800599c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800599e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	d118      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059ac:	f7fb fe4e 	bl	800164c <HAL_GetTick>
 80059b0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059b4:	e00d      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059b6:	f7fb fe49 	bl	800164c <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d903      	bls.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80059d0:	e005      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80059d2:	4b1c      	ldr	r3, [pc, #112]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d6:	f003 0302 	and.w	r3, r3, #2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d0eb      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80059de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d129      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80059ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80059ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059f6:	d10e      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80059f8:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a08:	091a      	lsrs	r2, r3, #4
 8005a0a:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	4a0d      	ldr	r2, [pc, #52]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6113      	str	r3, [r2, #16]
 8005a14:	e005      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005a16:	4b0b      	ldr	r3, [pc, #44]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a20:	6113      	str	r3, [r2, #16]
 8005a22:	4b08      	ldr	r3, [pc, #32]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a32:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a34:	430b      	orrs	r3, r1
 8005a36:	6713      	str	r3, [r2, #112]	; 0x70
 8005a38:	e00e      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8005a42:	e009      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005a44:	58024400 	.word	0x58024400
 8005a48:	58024800 	.word	0x58024800
 8005a4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f002 0301 	and.w	r3, r2, #1
 8005a64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f000 8089 	beq.w	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a80:	2b28      	cmp	r3, #40	; 0x28
 8005a82:	d86b      	bhi.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005a84:	a201      	add	r2, pc, #4	; (adr r2, 8005a8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005b65 	.word	0x08005b65
 8005a90:	08005b5d 	.word	0x08005b5d
 8005a94:	08005b5d 	.word	0x08005b5d
 8005a98:	08005b5d 	.word	0x08005b5d
 8005a9c:	08005b5d 	.word	0x08005b5d
 8005aa0:	08005b5d 	.word	0x08005b5d
 8005aa4:	08005b5d 	.word	0x08005b5d
 8005aa8:	08005b5d 	.word	0x08005b5d
 8005aac:	08005b31 	.word	0x08005b31
 8005ab0:	08005b5d 	.word	0x08005b5d
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b5d 	.word	0x08005b5d
 8005abc:	08005b5d 	.word	0x08005b5d
 8005ac0:	08005b5d 	.word	0x08005b5d
 8005ac4:	08005b5d 	.word	0x08005b5d
 8005ac8:	08005b5d 	.word	0x08005b5d
 8005acc:	08005b47 	.word	0x08005b47
 8005ad0:	08005b5d 	.word	0x08005b5d
 8005ad4:	08005b5d 	.word	0x08005b5d
 8005ad8:	08005b5d 	.word	0x08005b5d
 8005adc:	08005b5d 	.word	0x08005b5d
 8005ae0:	08005b5d 	.word	0x08005b5d
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b5d 	.word	0x08005b5d
 8005aec:	08005b65 	.word	0x08005b65
 8005af0:	08005b5d 	.word	0x08005b5d
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b5d 	.word	0x08005b5d
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b5d 	.word	0x08005b5d
 8005b0c:	08005b65 	.word	0x08005b65
 8005b10:	08005b5d 	.word	0x08005b5d
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b5d 	.word	0x08005b5d
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005b5d 	.word	0x08005b5d
 8005b24:	08005b5d 	.word	0x08005b5d
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005b65 	.word	0x08005b65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b34:	3308      	adds	r3, #8
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f001 fe95 	bl	8007868 <RCCEx_PLL2_Config>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b44:	e00f      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4a:	3328      	adds	r3, #40	; 0x28
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f001 ff3c 	bl	80079cc <RCCEx_PLL3_Config>
 8005b54:	4603      	mov	r3, r0
 8005b56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005b5a:	e004      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b62:	e000      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b6e:	4bbf      	ldr	r3, [pc, #764]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7c:	4abb      	ldr	r2, [pc, #748]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b7e:	430b      	orrs	r3, r1
 8005b80:	6553      	str	r3, [r2, #84]	; 0x54
 8005b82:	e003      	b.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f002 0302 	and.w	r3, r2, #2
 8005b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005ba2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	d041      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb2:	2b05      	cmp	r3, #5
 8005bb4:	d824      	bhi.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005c09 	.word	0x08005c09
 8005bc0:	08005bd5 	.word	0x08005bd5
 8005bc4:	08005beb 	.word	0x08005beb
 8005bc8:	08005c09 	.word	0x08005c09
 8005bcc:	08005c09 	.word	0x08005c09
 8005bd0:	08005c09 	.word	0x08005c09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bd8:	3308      	adds	r3, #8
 8005bda:	2101      	movs	r1, #1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 fe43 	bl	8007868 <RCCEx_PLL2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005be8:	e00f      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bee:	3328      	adds	r3, #40	; 0x28
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f001 feea 	bl	80079cc <RCCEx_PLL3_Config>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005bfe:	e004      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c06:	e000      	b.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005c08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10a      	bne.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c12:	4b96      	ldr	r3, [pc, #600]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c16:	f023 0107 	bic.w	r1, r3, #7
 8005c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c20:	4a92      	ldr	r2, [pc, #584]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6553      	str	r3, [r2, #84]	; 0x54
 8005c26:	e003      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f002 0304 	and.w	r3, r2, #4
 8005c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c40:	2300      	movs	r3, #0
 8005c42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d044      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c58:	2b05      	cmp	r3, #5
 8005c5a:	d825      	bhi.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005c5c:	a201      	add	r2, pc, #4	; (adr r2, 8005c64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005cb1 	.word	0x08005cb1
 8005c68:	08005c7d 	.word	0x08005c7d
 8005c6c:	08005c93 	.word	0x08005c93
 8005c70:	08005cb1 	.word	0x08005cb1
 8005c74:	08005cb1 	.word	0x08005cb1
 8005c78:	08005cb1 	.word	0x08005cb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c80:	3308      	adds	r3, #8
 8005c82:	2101      	movs	r1, #1
 8005c84:	4618      	mov	r0, r3
 8005c86:	f001 fdef 	bl	8007868 <RCCEx_PLL2_Config>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005c90:	e00f      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c96:	3328      	adds	r3, #40	; 0x28
 8005c98:	2101      	movs	r1, #1
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fe96 	bl	80079cc <RCCEx_PLL3_Config>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ca6:	e004      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005cae:	e000      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cba:	4b6c      	ldr	r3, [pc, #432]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	f023 0107 	bic.w	r1, r3, #7
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cca:	4a68      	ldr	r2, [pc, #416]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ccc:	430b      	orrs	r3, r1
 8005cce:	6593      	str	r3, [r2, #88]	; 0x58
 8005cd0:	e003      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f002 0320 	and.w	r3, r2, #32
 8005ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005cea:	2300      	movs	r3, #0
 8005cec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005cf4:	460b      	mov	r3, r1
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	d055      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d06:	d033      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d0c:	d82c      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d12:	d02f      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d18:	d826      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d1e:	d02b      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005d20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d24:	d820      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2a:	d012      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d30:	d81a      	bhi.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d022      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d3a:	d115      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d40:	3308      	adds	r3, #8
 8005d42:	2100      	movs	r1, #0
 8005d44:	4618      	mov	r0, r3
 8005d46:	f001 fd8f 	bl	8007868 <RCCEx_PLL2_Config>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d50:	e015      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2102      	movs	r1, #2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f001 fe36 	bl	80079cc <RCCEx_PLL3_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005d66:	e00a      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d6e:	e006      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d70:	bf00      	nop
 8005d72:	e004      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d74:	bf00      	nop
 8005d76:	e002      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d78:	bf00      	nop
 8005d7a:	e000      	b.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10b      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d86:	4b39      	ldr	r3, [pc, #228]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d96:	4a35      	ldr	r2, [pc, #212]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d98:	430b      	orrs	r3, r1
 8005d9a:	6553      	str	r3, [r2, #84]	; 0x54
 8005d9c:	e003      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005da2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005db6:	2300      	movs	r3, #0
 8005db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005dbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	d058      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005dca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dd2:	d033      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005dd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005dd8:	d82c      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dde:	d02f      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de4:	d826      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dea:	d02b      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005df0:	d820      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df6:	d012      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfc:	d81a      	bhi.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d022      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e06:	d115      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	2100      	movs	r1, #0
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fd29 	bl	8007868 <RCCEx_PLL2_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e015      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	3328      	adds	r3, #40	; 0x28
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 fdd0 	bl	80079cc <RCCEx_PLL3_Config>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005e32:	e00a      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e3a:	e006      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e3c:	bf00      	nop
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e40:	bf00      	nop
 8005e42:	e002      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10e      	bne.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e62:	4a02      	ldr	r2, [pc, #8]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6593      	str	r3, [r2, #88]	; 0x58
 8005e68:	e006      	b.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005e84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e8e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005e92:	460b      	mov	r3, r1
 8005e94:	4313      	orrs	r3, r2
 8005e96:	d055      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ea0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005ea4:	d033      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005ea6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005eaa:	d82c      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb0:	d02f      	beq.n	8005f12 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eb6:	d826      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005eb8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ebc:	d02b      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005ebe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005ec2:	d820      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ec8:	d012      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ece:	d81a      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d022      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ed8:	d115      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ede:	3308      	adds	r3, #8
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fcc0 	bl	8007868 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005eee:	e015      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ef4:	3328      	adds	r3, #40	; 0x28
 8005ef6:	2102      	movs	r1, #2
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f001 fd67 	bl	80079cc <RCCEx_PLL3_Config>
 8005efe:	4603      	mov	r3, r0
 8005f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005f04:	e00a      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f0c:	e006      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f0e:	bf00      	nop
 8005f10:	e004      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f12:	bf00      	nop
 8005f14:	e002      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f16:	bf00      	nop
 8005f18:	e000      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005f24:	4ba1      	ldr	r3, [pc, #644]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f34:	4a9d      	ldr	r2, [pc, #628]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3a:	e003      	b.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f40:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4c:	f002 0308 	and.w	r3, r2, #8
 8005f50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f54:	2300      	movs	r3, #0
 8005f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f5a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4313      	orrs	r3, r2
 8005f62:	d01e      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f70:	d10c      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f76:	3328      	adds	r3, #40	; 0x28
 8005f78:	2102      	movs	r1, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fd26 	bl	80079cc <RCCEx_PLL3_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005f8c:	4b87      	ldr	r3, [pc, #540]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f90:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f9c:	4a83      	ldr	r2, [pc, #524]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005faa:	f002 0310 	and.w	r3, r2, #16
 8005fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fb8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	d01e      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fce:	d10c      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd4:	3328      	adds	r3, #40	; 0x28
 8005fd6:	2102      	movs	r1, #2
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f001 fcf7 	bl	80079cc <RCCEx_PLL3_Config>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fea:	4b70      	ldr	r3, [pc, #448]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ffa:	4a6c      	ldr	r2, [pc, #432]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800600c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006016:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d03e      	beq.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800602c:	d022      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800602e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006032:	d81b      	bhi.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603c:	d00b      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800603e:	e015      	b.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006044:	3308      	adds	r3, #8
 8006046:	2100      	movs	r1, #0
 8006048:	4618      	mov	r0, r3
 800604a:	f001 fc0d 	bl	8007868 <RCCEx_PLL2_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006054:	e00f      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800605a:	3328      	adds	r3, #40	; 0x28
 800605c:	2102      	movs	r1, #2
 800605e:	4618      	mov	r0, r3
 8006060:	f001 fcb4 	bl	80079cc <RCCEx_PLL3_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800606a:	e004      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006072:	e000      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800607e:	4b4b      	ldr	r3, [pc, #300]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006082:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800608e:	4a47      	ldr	r2, [pc, #284]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006090:	430b      	orrs	r3, r1
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
 8006094:	e003      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800609a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800609e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80060aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80060ac:	2300      	movs	r3, #0
 80060ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80060b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80060b4:	460b      	mov	r3, r1
 80060b6:	4313      	orrs	r3, r2
 80060b8:	d03b      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80060ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060c6:	d01f      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80060cc:	d818      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80060ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060d2:	d003      	beq.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80060d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060d8:	d007      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80060da:	e011      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060dc:	4b33      	ldr	r3, [pc, #204]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e0:	4a32      	ldr	r2, [pc, #200]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80060e8:	e00f      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060ee:	3328      	adds	r3, #40	; 0x28
 80060f0:	2101      	movs	r1, #1
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fc6a 	bl	80079cc <RCCEx_PLL3_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80060fe:	e004      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006106:	e000      	b.n	800610a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006112:	4b26      	ldr	r3, [pc, #152]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006116:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800611e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006122:	4a22      	ldr	r2, [pc, #136]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006124:	430b      	orrs	r3, r1
 8006126:	6553      	str	r3, [r2, #84]	; 0x54
 8006128:	e003      	b.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800612e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800613e:	673b      	str	r3, [r7, #112]	; 0x70
 8006140:	2300      	movs	r3, #0
 8006142:	677b      	str	r3, [r7, #116]	; 0x74
 8006144:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006148:	460b      	mov	r3, r1
 800614a:	4313      	orrs	r3, r2
 800614c:	d034      	beq.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800614e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006154:	2b00      	cmp	r3, #0
 8006156:	d003      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615c:	d007      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800615e:	e011      	b.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006160:	4b12      	ldr	r3, [pc, #72]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	4a11      	ldr	r2, [pc, #68]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800616c:	e00e      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800616e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006172:	3308      	adds	r3, #8
 8006174:	2102      	movs	r1, #2
 8006176:	4618      	mov	r0, r3
 8006178:	f001 fb76 	bl	8007868 <RCCEx_PLL2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006182:	e003      	b.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800618a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006190:	2b00      	cmp	r3, #0
 8006192:	d10d      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006194:	4b05      	ldr	r3, [pc, #20]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a2:	4a02      	ldr	r2, [pc, #8]	; (80061ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a8:	e006      	b.n	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80061aa:	bf00      	nop
 80061ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80061b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80061c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061c6:	2300      	movs	r3, #0
 80061c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80061ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80061ce:	460b      	mov	r3, r1
 80061d0:	4313      	orrs	r3, r2
 80061d2:	d00c      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061d8:	3328      	adds	r3, #40	; 0x28
 80061da:	2102      	movs	r1, #2
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fbf5 	bl	80079cc <RCCEx_PLL3_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d002      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80061ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80061fa:	663b      	str	r3, [r7, #96]	; 0x60
 80061fc:	2300      	movs	r3, #0
 80061fe:	667b      	str	r3, [r7, #100]	; 0x64
 8006200:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006204:	460b      	mov	r3, r1
 8006206:	4313      	orrs	r3, r2
 8006208:	d038      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800620e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006216:	d018      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006218:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800621c:	d811      	bhi.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800621e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006222:	d014      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006228:	d80b      	bhi.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800622a:	2b00      	cmp	r3, #0
 800622c:	d011      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800622e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006232:	d106      	bne.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006234:	4bc3      	ldr	r3, [pc, #780]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006238:	4ac2      	ldr	r2, [pc, #776]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800623a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800623e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006240:	e008      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006248:	e004      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800624a:	bf00      	nop
 800624c:	e002      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006252:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10b      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800625c:	4bb9      	ldr	r3, [pc, #740]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006260:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006268:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626c:	4ab5      	ldr	r2, [pc, #724]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800626e:	430b      	orrs	r3, r1
 8006270:	6553      	str	r3, [r2, #84]	; 0x54
 8006272:	e003      	b.n	800627c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006284:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006288:	65bb      	str	r3, [r7, #88]	; 0x58
 800628a:	2300      	movs	r3, #0
 800628c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800628e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006292:	460b      	mov	r3, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	d009      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006298:	4baa      	ldr	r3, [pc, #680]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062a6:	4aa7      	ldr	r2, [pc, #668]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062a8:	430b      	orrs	r3, r1
 80062aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80062ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80062b8:	653b      	str	r3, [r7, #80]	; 0x50
 80062ba:	2300      	movs	r3, #0
 80062bc:	657b      	str	r3, [r7, #84]	; 0x54
 80062be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80062c2:	460b      	mov	r3, r1
 80062c4:	4313      	orrs	r3, r2
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80062c8:	4b9e      	ldr	r3, [pc, #632]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80062d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80062d8:	4a9a      	ldr	r2, [pc, #616]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062da:	430b      	orrs	r3, r1
 80062dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80062ec:	2300      	movs	r3, #0
 80062ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80062f4:	460b      	mov	r3, r1
 80062f6:	4313      	orrs	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062fa:	4b92      	ldr	r3, [pc, #584]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006308:	4a8e      	ldr	r2, [pc, #568]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800630e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800631a:	643b      	str	r3, [r7, #64]	; 0x40
 800631c:	2300      	movs	r3, #0
 800631e:	647b      	str	r3, [r7, #68]	; 0x44
 8006320:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006324:	460b      	mov	r3, r1
 8006326:	4313      	orrs	r3, r2
 8006328:	d00e      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800632a:	4b86      	ldr	r3, [pc, #536]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	4a85      	ldr	r2, [pc, #532]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006330:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006334:	6113      	str	r3, [r2, #16]
 8006336:	4b83      	ldr	r3, [pc, #524]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800633e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006342:	4a80      	ldr	r2, [pc, #512]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006344:	430b      	orrs	r3, r1
 8006346:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800634c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006350:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8006354:	63bb      	str	r3, [r7, #56]	; 0x38
 8006356:	2300      	movs	r3, #0
 8006358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800635a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	d009      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006364:	4b77      	ldr	r3, [pc, #476]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006368:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800636c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	4a74      	ldr	r2, [pc, #464]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006374:	430b      	orrs	r3, r1
 8006376:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006384:	633b      	str	r3, [r7, #48]	; 0x30
 8006386:	2300      	movs	r3, #0
 8006388:	637b      	str	r3, [r7, #52]	; 0x34
 800638a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800638e:	460b      	mov	r3, r1
 8006390:	4313      	orrs	r3, r2
 8006392:	d00a      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006394:	4b6b      	ldr	r3, [pc, #428]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006398:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800639c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063a4:	4a67      	ldr	r2, [pc, #412]	; (8006544 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a6:	430b      	orrs	r3, r1
 80063a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80063aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	2100      	movs	r1, #0
 80063b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80063c0:	460b      	mov	r3, r1
 80063c2:	4313      	orrs	r3, r2
 80063c4:	d011      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ca:	3308      	adds	r3, #8
 80063cc:	2100      	movs	r1, #0
 80063ce:	4618      	mov	r0, r3
 80063d0:	f001 fa4a 	bl	8007868 <RCCEx_PLL2_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	2100      	movs	r1, #0
 80063f4:	6239      	str	r1, [r7, #32]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	627b      	str	r3, [r7, #36]	; 0x24
 80063fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d011      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800640a:	3308      	adds	r3, #8
 800640c:	2101      	movs	r1, #1
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fa2a 	bl	8007868 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800641a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006422:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006426:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	2100      	movs	r1, #0
 8006434:	61b9      	str	r1, [r7, #24]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	61fb      	str	r3, [r7, #28]
 800643c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006440:	460b      	mov	r3, r1
 8006442:	4313      	orrs	r3, r2
 8006444:	d011      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800644a:	3308      	adds	r3, #8
 800644c:	2102      	movs	r1, #2
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fa0a 	bl	8007868 <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800645a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	2100      	movs	r1, #0
 8006474:	6139      	str	r1, [r7, #16]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d011      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800648a:	3328      	adds	r3, #40	; 0x28
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f001 fa9c 	bl	80079cc <RCCEx_PLL3_Config>
 8006494:	4603      	mov	r3, r0
 8006496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800649a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	2100      	movs	r1, #0
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	f003 0310 	and.w	r3, r3, #16
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d011      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ca:	3328      	adds	r3, #40	; 0x28
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 fa7c 	bl	80079cc <RCCEx_PLL3_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80064da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d003      	beq.n	80064ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80064e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80064ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f2:	2100      	movs	r1, #0
 80064f4:	6039      	str	r1, [r7, #0]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	607b      	str	r3, [r7, #4]
 80064fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006500:	460b      	mov	r3, r1
 8006502:	4313      	orrs	r3, r2
 8006504:	d011      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800650a:	3328      	adds	r3, #40	; 0x28
 800650c:	2102      	movs	r1, #2
 800650e:	4618      	mov	r0, r3
 8006510:	f001 fa5c 	bl	80079cc <RCCEx_PLL3_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800651a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800651e:	2b00      	cmp	r3, #0
 8006520:	d003      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006522:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006526:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800652a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
}
 8006538:	4618      	mov	r0, r3
 800653a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800653e:	46bd      	mov	sp, r7
 8006540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006544:	58024400 	.word	0x58024400

08006548 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b090      	sub	sp, #64	; 0x40
 800654c:	af00      	add	r7, sp, #0
 800654e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006552:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006556:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800655a:	430b      	orrs	r3, r1
 800655c:	f040 8094 	bne.w	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006560:	4b9e      	ldr	r3, [pc, #632]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	2b04      	cmp	r3, #4
 800656e:	f200 8087 	bhi.w	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	0800658d 	.word	0x0800658d
 800657c:	080065b5 	.word	0x080065b5
 8006580:	080065dd 	.word	0x080065dd
 8006584:	08006679 	.word	0x08006679
 8006588:	08006605 	.word	0x08006605
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800658c:	4b93      	ldr	r3, [pc, #588]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006598:	d108      	bne.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800659a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659e:	4618      	mov	r0, r3
 80065a0:	f001 f810 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065a8:	f000 bd45 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065ac:	2300      	movs	r3, #0
 80065ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065b0:	f000 bd41 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065b4:	4b89      	ldr	r3, [pc, #548]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065c0:	d108      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fd54 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065d0:	f000 bd31 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065d4:	2300      	movs	r3, #0
 80065d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80065d8:	f000 bd2d 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065dc:	4b7f      	ldr	r3, [pc, #508]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065e8:	d108      	bne.n	80065fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ea:	f107 030c 	add.w	r3, r7, #12
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fe94 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80065f8:	f000 bd1d 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006600:	f000 bd19 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006604:	4b75      	ldr	r3, [pc, #468]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006608:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800660c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800660e:	4b73      	ldr	r3, [pc, #460]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0304 	and.w	r3, r3, #4
 8006616:	2b04      	cmp	r3, #4
 8006618:	d10c      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800661a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006620:	4b6e      	ldr	r3, [pc, #440]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	08db      	lsrs	r3, r3, #3
 8006626:	f003 0303 	and.w	r3, r3, #3
 800662a:	4a6d      	ldr	r2, [pc, #436]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800662c:	fa22 f303 	lsr.w	r3, r2, r3
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006632:	e01f      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006634:	4b69      	ldr	r3, [pc, #420]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006640:	d106      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006648:	d102      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800664a:	4b66      	ldr	r3, [pc, #408]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800664c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800664e:	e011      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006650:	4b62      	ldr	r3, [pc, #392]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006658:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800665c:	d106      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800665e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006664:	d102      	bne.n	800666c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006666:	4b60      	ldr	r3, [pc, #384]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800666c:	2300      	movs	r3, #0
 800666e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006670:	f000 bce1 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006674:	f000 bcdf 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006678:	4b5c      	ldr	r3, [pc, #368]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800667c:	f000 bcdb 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006684:	f000 bcd7 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006688:	e9d7 2300 	ldrd	r2, r3, [r7]
 800668c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006690:	430b      	orrs	r3, r1
 8006692:	f040 80ad 	bne.w	80067f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8006696:	4b51      	ldr	r3, [pc, #324]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800669a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800669e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a6:	d056      	beq.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ae:	f200 8090 	bhi.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	2bc0      	cmp	r3, #192	; 0xc0
 80066b6:	f000 8088 	beq.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	2bc0      	cmp	r3, #192	; 0xc0
 80066be:	f200 8088 	bhi.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d032      	beq.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2b80      	cmp	r3, #128	; 0x80
 80066cc:	f200 8081 	bhi.w	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2b40      	cmp	r3, #64	; 0x40
 80066da:	d014      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80066dc:	e079      	b.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066de:	4b3f      	ldr	r3, [pc, #252]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ea:	d108      	bne.n	80066fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 ff67 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80066f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80066fa:	f000 bc9c 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006702:	f000 bc98 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006706:	4b35      	ldr	r3, [pc, #212]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800670e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006712:	d108      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006714:	f107 0318 	add.w	r3, r7, #24
 8006718:	4618      	mov	r0, r3
 800671a:	f000 fcab 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006722:	f000 bc88 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800672a:	f000 bc84 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800672e:	4b2b      	ldr	r3, [pc, #172]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673a:	d108      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800673c:	f107 030c 	add.w	r3, r7, #12
 8006740:	4618      	mov	r0, r3
 8006742:	f000 fdeb 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800674a:	f000 bc74 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006752:	f000 bc70 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006756:	4b21      	ldr	r3, [pc, #132]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800675e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006760:	4b1e      	ldr	r3, [pc, #120]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 0304 	and.w	r3, r3, #4
 8006768:	2b04      	cmp	r3, #4
 800676a:	d10c      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006772:	4b1a      	ldr	r3, [pc, #104]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	08db      	lsrs	r3, r3, #3
 8006778:	f003 0303 	and.w	r3, r3, #3
 800677c:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800677e:	fa22 f303 	lsr.w	r3, r2, r3
 8006782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006784:	e01f      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006786:	4b15      	ldr	r3, [pc, #84]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006792:	d106      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006796:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800679a:	d102      	bne.n	80067a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800679c:	4b11      	ldr	r3, [pc, #68]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800679e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067a0:	e011      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a2:	4b0e      	ldr	r3, [pc, #56]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ae:	d106      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80067b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b6:	d102      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067bc:	e003      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80067c2:	f000 bc38 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067c6:	f000 bc36 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80067ca:	4b08      	ldr	r3, [pc, #32]	; (80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ce:	f000 bc32 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80067d2:	2300      	movs	r3, #0
 80067d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d6:	f000 bc2e 	b.w	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80067da:	bf00      	nop
 80067dc:	58024400 	.word	0x58024400
 80067e0:	03d09000 	.word	0x03d09000
 80067e4:	003d0900 	.word	0x003d0900
 80067e8:	007a1200 	.word	0x007a1200
 80067ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80067f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80067f8:	430b      	orrs	r3, r1
 80067fa:	f040 809c 	bne.w	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80067fe:	4b9e      	ldr	r3, [pc, #632]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006802:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006806:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800680e:	d054      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006812:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006816:	f200 808b 	bhi.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006820:	f000 8083 	beq.w	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006826:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800682a:	f200 8081 	bhi.w	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800682e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006834:	d02f      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800683c:	d878      	bhi.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800683e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006840:	2b00      	cmp	r3, #0
 8006842:	d004      	beq.n	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800684a:	d012      	beq.n	8006872 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800684c:	e070      	b.n	8006930 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800684e:	4b8a      	ldr	r3, [pc, #552]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006856:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800685a:	d107      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800685c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006860:	4618      	mov	r0, r3
 8006862:	f000 feaf 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800686a:	e3e4      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006870:	e3e1      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006872:	4b81      	ldr	r3, [pc, #516]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800687a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800687e:	d107      	bne.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006880:	f107 0318 	add.w	r3, r7, #24
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fbf5 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800688e:	e3d2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006894:	e3cf      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006896:	4b78      	ldr	r3, [pc, #480]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fd37 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068b2:	e3c0      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068b8:	e3bd      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80068ba:	4b6f      	ldr	r3, [pc, #444]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068c4:	4b6c      	ldr	r3, [pc, #432]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	d10c      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80068d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d109      	bne.n	80068ea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068d6:	4b68      	ldr	r3, [pc, #416]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	08db      	lsrs	r3, r3, #3
 80068dc:	f003 0303 	and.w	r3, r3, #3
 80068e0:	4a66      	ldr	r2, [pc, #408]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80068e2:	fa22 f303 	lsr.w	r3, r2, r3
 80068e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068e8:	e01e      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068ea:	4b63      	ldr	r3, [pc, #396]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f6:	d106      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80068f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068fe:	d102      	bne.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006900:	4b5f      	ldr	r3, [pc, #380]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006904:	e010      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006906:	4b5c      	ldr	r3, [pc, #368]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006912:	d106      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8006914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006916:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800691a:	d102      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800691c:	4b59      	ldr	r3, [pc, #356]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006920:	e002      	b.n	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006926:	e386      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006928:	e385      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800692a:	4b57      	ldr	r3, [pc, #348]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800692e:	e382      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006934:	e37f      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800693a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800693e:	430b      	orrs	r3, r1
 8006940:	f040 80a7 	bne.w	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006944:	4b4c      	ldr	r3, [pc, #304]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006948:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800694c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006954:	d055      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800695c:	f200 8096 	bhi.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006962:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006966:	f000 8084 	beq.w	8006a72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006970:	f200 808c 	bhi.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800697a:	d030      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006982:	f200 8083 	bhi.w	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006992:	d012      	beq.n	80069ba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006994:	e07a      	b.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006996:	4b38      	ldr	r3, [pc, #224]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069a2:	d107      	bne.n	80069b4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fe0b 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069b2:	e340      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069b8:	e33d      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069ba:	4b2f      	ldr	r3, [pc, #188]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069c6:	d107      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069c8:	f107 0318 	add.w	r3, r7, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fb51 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069d6:	e32e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069dc:	e32b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069de:	4b26      	ldr	r3, [pc, #152]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069ea:	d107      	bne.n	80069fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ec:	f107 030c 	add.w	r3, r7, #12
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fc93 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80069fa:	e31c      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a00:	e319      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a0c:	4b1a      	ldr	r3, [pc, #104]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0304 	and.w	r3, r3, #4
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d10c      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d109      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a1e:	4b16      	ldr	r3, [pc, #88]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	08db      	lsrs	r3, r3, #3
 8006a24:	f003 0303 	and.w	r3, r3, #3
 8006a28:	4a14      	ldr	r2, [pc, #80]	; (8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	e01e      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a32:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3e:	d106      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a46:	d102      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006a48:	4b0d      	ldr	r3, [pc, #52]	; (8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a4c:	e010      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a4e:	4b0a      	ldr	r3, [pc, #40]	; (8006a78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a5a:	d106      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a62:	d102      	bne.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a68:	e002      	b.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006a6e:	e2e2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a70:	e2e1      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006a74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a76:	e2de      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006a78:	58024400 	.word	0x58024400
 8006a7c:	03d09000 	.word	0x03d09000
 8006a80:	003d0900 	.word	0x003d0900
 8006a84:	007a1200 	.word	0x007a1200
 8006a88:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a90:	e2d1      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a96:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	f040 809c 	bne.w	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006aa0:	4b93      	ldr	r3, [pc, #588]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006aa8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab0:	d054      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ab8:	f200 808b 	bhi.w	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ac2:	f000 8083 	beq.w	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006acc:	f200 8081 	bhi.w	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad6:	d02f      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ade:	d878      	bhi.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aec:	d012      	beq.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006aee:	e070      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006af0:	4b7f      	ldr	r3, [pc, #508]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006afc:	d107      	bne.n	8006b0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b02:	4618      	mov	r0, r3
 8006b04:	f000 fd5e 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b0c:	e293      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b12:	e290      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b14:	4b76      	ldr	r3, [pc, #472]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b20:	d107      	bne.n	8006b32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b22:	f107 0318 	add.w	r3, r7, #24
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 faa4 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b30:	e281      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b36:	e27e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b38:	4b6d      	ldr	r3, [pc, #436]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d107      	bne.n	8006b56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b46:	f107 030c 	add.w	r3, r7, #12
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fbe6 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b54:	e26f      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b56:	2300      	movs	r3, #0
 8006b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b5a:	e26c      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006b5c:	4b64      	ldr	r3, [pc, #400]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b66:	4b62      	ldr	r3, [pc, #392]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0304 	and.w	r3, r3, #4
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d109      	bne.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b78:	4b5d      	ldr	r3, [pc, #372]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	08db      	lsrs	r3, r3, #3
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	4a5c      	ldr	r2, [pc, #368]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006b84:	fa22 f303 	lsr.w	r3, r2, r3
 8006b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b8a:	e01e      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b8c:	4b58      	ldr	r3, [pc, #352]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b98:	d106      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba0:	d102      	bne.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ba2:	4b55      	ldr	r3, [pc, #340]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba6:	e010      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ba8:	4b51      	ldr	r3, [pc, #324]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bb4:	d106      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bbc:	d102      	bne.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006bbe:	4b4f      	ldr	r3, [pc, #316]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bc2:	e002      	b.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006bc8:	e235      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006bca:	e234      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006bcc:	4b4c      	ldr	r3, [pc, #304]	; (8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd0:	e231      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd6:	e22e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bdc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006be0:	430b      	orrs	r3, r1
 8006be2:	f040 808f 	bne.w	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006be6:	4b42      	ldr	r3, [pc, #264]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006bee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bf6:	d06b      	beq.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006bfe:	d874      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c06:	d056      	beq.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c0e:	d86c      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c16:	d03b      	beq.n	8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006c1e:	d864      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c26:	d021      	beq.n	8006c6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c2e:	d85c      	bhi.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3c:	d004      	beq.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006c3e:	e054      	b.n	8006cea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006c40:	f7fe fa4c 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 8006c44:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006c46:	e1f6      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c48:	4b29      	ldr	r3, [pc, #164]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c54:	d107      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c56:	f107 0318 	add.w	r3, r7, #24
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fa0a 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c64:	e1e7      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c66:	2300      	movs	r3, #0
 8006c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c6a:	e1e4      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c78:	d107      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fb4c 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c88:	e1d5      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8e:	e1d2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c90:	4b17      	ldr	r3, [pc, #92]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d109      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c9c:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	08db      	lsrs	r3, r3, #3
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	4a13      	ldr	r2, [pc, #76]	; (8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cae:	e1c2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cb4:	e1bf      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006cb6:	4b0e      	ldr	r3, [pc, #56]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc2:	d102      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006cc8:	e1b5      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cce:	e1b2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cdc:	d102      	bne.n	8006ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006cde:	4b07      	ldr	r3, [pc, #28]	; (8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ce2:	e1a8      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ce8:	e1a5      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006cee:	e1a2      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006cf0:	58024400 	.word	0x58024400
 8006cf4:	03d09000 	.word	0x03d09000
 8006cf8:	003d0900 	.word	0x003d0900
 8006cfc:	007a1200 	.word	0x007a1200
 8006d00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d08:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	d173      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006d10:	4b9c      	ldr	r3, [pc, #624]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d20:	d02f      	beq.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d28:	d863      	bhi.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d004      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d36:	d012      	beq.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d38:	e05b      	b.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d3a:	4b92      	ldr	r3, [pc, #584]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d46:	d107      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d48:	f107 0318 	add.w	r3, r7, #24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 f991 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d56:	e16e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d5c:	e16b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006d5e:	4b89      	ldr	r3, [pc, #548]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d6c:	f107 030c 	add.w	r3, r7, #12
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fad3 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d7a:	e15c      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d80:	e159      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006d82:	4b80      	ldr	r3, [pc, #512]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006d8c:	4b7d      	ldr	r3, [pc, #500]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d10c      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d109      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d9e:	4b79      	ldr	r3, [pc, #484]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	08db      	lsrs	r3, r3, #3
 8006da4:	f003 0303 	and.w	r3, r3, #3
 8006da8:	4a77      	ldr	r2, [pc, #476]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006daa:	fa22 f303 	lsr.w	r3, r2, r3
 8006dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006db0:	e01e      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006db2:	4b74      	ldr	r3, [pc, #464]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dbe:	d106      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006dc6:	d102      	bne.n	8006dce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006dc8:	4b70      	ldr	r3, [pc, #448]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dcc:	e010      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006dce:	4b6d      	ldr	r3, [pc, #436]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dda:	d106      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006de2:	d102      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006de4:	4b6a      	ldr	r3, [pc, #424]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006dee:	e122      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006df0:	e121      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006df2:	2300      	movs	r3, #0
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006df6:	e11e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006df8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dfc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006e00:	430b      	orrs	r3, r1
 8006e02:	d133      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006e04:	4b5f      	ldr	r3, [pc, #380]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e0c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e1a:	d012      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006e1c:	e023      	b.n	8006e66 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e1e:	4b59      	ldr	r3, [pc, #356]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e2a:	d107      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fbc7 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e3a:	e0fc      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e40:	e0f9      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e42:	4b50      	ldr	r3, [pc, #320]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e4e:	d107      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e50:	f107 0318 	add.w	r3, r7, #24
 8006e54:	4618      	mov	r0, r3
 8006e56:	f000 f90d 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5e:	e0ea      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e60:	2300      	movs	r3, #0
 8006e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e64:	e0e7      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e6a:	e0e4      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006e6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e70:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006e74:	430b      	orrs	r3, r1
 8006e76:	f040 808d 	bne.w	8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006e7a:	4b42      	ldr	r3, [pc, #264]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006e82:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e8a:	d06b      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e92:	d874      	bhi.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d056      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ea2:	d86c      	bhi.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eaa:	d03b      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eb2:	d864      	bhi.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006eba:	d021      	beq.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec2:	d85c      	bhi.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d004      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed0:	d004      	beq.n	8006edc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006ed2:	e054      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006ed4:	f000 f8b8 	bl	8007048 <HAL_RCCEx_GetD3PCLK1Freq>
 8006ed8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006eda:	e0ac      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006edc:	4b29      	ldr	r3, [pc, #164]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ee8:	d107      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eea:	f107 0318 	add.w	r3, r7, #24
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 f8c0 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef8:	e09d      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efe:	e09a      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f00:	4b20      	ldr	r3, [pc, #128]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f0e:	f107 030c 	add.w	r3, r7, #12
 8006f12:	4618      	mov	r0, r3
 8006f14:	f000 fa02 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f1c:	e08b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f22:	e088      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f24:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d109      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f30:	4b14      	ldr	r3, [pc, #80]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	4a13      	ldr	r2, [pc, #76]	; (8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f42:	e078      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e075      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006f4a:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f56:	d102      	bne.n	8006f5e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006f58:	4b0c      	ldr	r3, [pc, #48]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f5c:	e06b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f62:	e068      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f64:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f70:	d102      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006f72:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f76:	e05e      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7c:	e05b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f82:	e058      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006f84:	58024400 	.word	0x58024400
 8006f88:	03d09000 	.word	0x03d09000
 8006f8c:	003d0900 	.word	0x003d0900
 8006f90:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f98:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	d148      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006fa0:	4b27      	ldr	r3, [pc, #156]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fa8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb0:	d02a      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fb8:	d838      	bhi.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d004      	beq.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fc6:	d00d      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006fc8:	e030      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006fca:	4b1d      	ldr	r3, [pc, #116]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fd6:	d102      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006fdc:	e02b      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fe2:	e028      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006fe4:	4b16      	ldr	r3, [pc, #88]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ff0:	d107      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f000 fae4 	bl	80075c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007000:	e019      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007006:	e016      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007010:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007014:	d107      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007016:	f107 0318 	add.w	r3, r7, #24
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f82a 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007024:	e007      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007026:	2300      	movs	r3, #0
 8007028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800702c:	2300      	movs	r3, #0
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007030:	e001      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8007036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007038:	4618      	mov	r0, r3
 800703a:	3740      	adds	r7, #64	; 0x40
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	58024400 	.word	0x58024400
 8007044:	007a1200 	.word	0x007a1200

08007048 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800704c:	f7fe f816 	bl	800507c <HAL_RCC_GetHCLKFreq>
 8007050:	4602      	mov	r2, r0
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	091b      	lsrs	r3, r3, #4
 8007058:	f003 0307 	and.w	r3, r3, #7
 800705c:	4904      	ldr	r1, [pc, #16]	; (8007070 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800705e:	5ccb      	ldrb	r3, [r1, r3]
 8007060:	f003 031f 	and.w	r3, r3, #31
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	58024400 	.word	0x58024400
 8007070:	0800be30 	.word	0x0800be30

08007074 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800707c:	4ba1      	ldr	r3, [pc, #644]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800707e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007080:	f003 0303 	and.w	r3, r3, #3
 8007084:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007086:	4b9f      	ldr	r3, [pc, #636]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	0b1b      	lsrs	r3, r3, #12
 800708c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007090:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007092:	4b9c      	ldr	r3, [pc, #624]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800709e:	4b99      	ldr	r3, [pc, #612]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	f000 8111 	beq.w	80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	f000 8083 	beq.w	80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	f200 80a1 	bhi.w	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d056      	beq.n	800718c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80070de:	e099      	b.n	8007214 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070e0:	4b88      	ldr	r3, [pc, #544]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02d      	beq.n	8007148 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070ec:	4b85      	ldr	r3, [pc, #532]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	4a84      	ldr	r2, [pc, #528]	; (8007308 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b7b      	ldr	r3, [pc, #492]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a03 	vldr	s12, [r7, #12]
 800712a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007146:	e087      	b.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007310 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b6a      	ldr	r3, [pc, #424]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800715c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a03 	vldr	s12, [r7, #12]
 800716e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800718a:	e065      	b.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b59      	ldr	r3, [pc, #356]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80071b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ce:	e043      	b.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007318 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b48      	ldr	r3, [pc, #288]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80071f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007212:	e021      	b.n	8007258 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007314 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007226:	4b37      	ldr	r3, [pc, #220]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007236:	ed97 6a03 	vldr	s12, [r7, #12]
 800723a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800730c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800724a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007256:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007258:	4b2a      	ldr	r3, [pc, #168]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	0a5b      	lsrs	r3, r3, #9
 800725e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007262:	ee07 3a90 	vmov	s15, r3
 8007266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800726e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007272:	edd7 6a07 	vldr	s13, [r7, #28]
 8007276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727e:	ee17 2a90 	vmov	r2, s15
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800729c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ac:	ee17 2a90 	vmov	r2, s15
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80072b4:	4b13      	ldr	r3, [pc, #76]	; (8007304 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072e2:	e008      	b.n	80072f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	609a      	str	r2, [r3, #8]
}
 80072f6:	bf00      	nop
 80072f8:	3724      	adds	r7, #36	; 0x24
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop
 8007304:	58024400 	.word	0x58024400
 8007308:	03d09000 	.word	0x03d09000
 800730c:	46000000 	.word	0x46000000
 8007310:	4c742400 	.word	0x4c742400
 8007314:	4a742400 	.word	0x4a742400
 8007318:	4af42400 	.word	0x4af42400

0800731c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800731c:	b480      	push	{r7}
 800731e:	b089      	sub	sp, #36	; 0x24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007324:	4ba1      	ldr	r3, [pc, #644]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800732e:	4b9f      	ldr	r3, [pc, #636]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	0d1b      	lsrs	r3, r3, #20
 8007334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007338:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800733a:	4b9c      	ldr	r3, [pc, #624]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007346:	4b99      	ldr	r3, [pc, #612]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734a:	08db      	lsrs	r3, r3, #3
 800734c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 8111 	beq.w	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	2b02      	cmp	r3, #2
 800736e:	f000 8083 	beq.w	8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	2b02      	cmp	r3, #2
 8007376:	f200 80a1 	bhi.w	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d056      	beq.n	8007434 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007386:	e099      	b.n	80074bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007388:	4b88      	ldr	r3, [pc, #544]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0320 	and.w	r3, r3, #32
 8007390:	2b00      	cmp	r3, #0
 8007392:	d02d      	beq.n	80073f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007394:	4b85      	ldr	r3, [pc, #532]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f003 0303 	and.w	r3, r3, #3
 800739e:	4a84      	ldr	r2, [pc, #528]	; (80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
 80073a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	ee07 3a90 	vmov	s15, r3
 80073ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073be:	4b7b      	ldr	r3, [pc, #492]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80073d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80073ee:	e087      	b.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80075b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	4b6a      	ldr	r3, [pc, #424]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800740a:	ee07 3a90 	vmov	s15, r3
 800740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007412:	ed97 6a03 	vldr	s12, [r7, #12]
 8007416:	eddf 5a67 	vldr	s11, [pc, #412]	; 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800742e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007432:	e065      	b.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	ee07 3a90 	vmov	s15, r3
 800743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800743e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007446:	4b59      	ldr	r3, [pc, #356]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744e:	ee07 3a90 	vmov	s15, r3
 8007452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007456:	ed97 6a03 	vldr	s12, [r7, #12]
 800745a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007466:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007476:	e043      	b.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80075c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748a:	4b48      	ldr	r3, [pc, #288]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800748c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007492:	ee07 3a90 	vmov	s15, r3
 8007496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749a:	ed97 6a03 	vldr	s12, [r7, #12]
 800749e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ba:	e021      	b.n	8007500 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80075bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b37      	ldr	r3, [pc, #220]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007500:	4b2a      	ldr	r3, [pc, #168]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007504:	0a5b      	lsrs	r3, r3, #9
 8007506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800751a:	edd7 6a07 	vldr	s13, [r7, #28]
 800751e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007522:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007526:	ee17 2a90 	vmov	r2, s15
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800752e:	4b1f      	ldr	r3, [pc, #124]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007538:	ee07 3a90 	vmov	s15, r3
 800753c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007540:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007544:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007548:	edd7 6a07 	vldr	s13, [r7, #28]
 800754c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007554:	ee17 2a90 	vmov	r2, s15
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800755c:	4b13      	ldr	r3, [pc, #76]	; (80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800755e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007560:	0e1b      	lsrs	r3, r3, #24
 8007562:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800756e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007572:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007576:	edd7 6a07 	vldr	s13, [r7, #28]
 800757a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800757e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007582:	ee17 2a90 	vmov	r2, s15
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800758a:	e008      	b.n	800759e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	609a      	str	r2, [r3, #8]
}
 800759e:	bf00      	nop
 80075a0:	3724      	adds	r7, #36	; 0x24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	58024400 	.word	0x58024400
 80075b0:	03d09000 	.word	0x03d09000
 80075b4:	46000000 	.word	0x46000000
 80075b8:	4c742400 	.word	0x4c742400
 80075bc:	4a742400 	.word	0x4a742400
 80075c0:	4af42400 	.word	0x4af42400

080075c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b089      	sub	sp, #36	; 0x24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075cc:	4ba0      	ldr	r3, [pc, #640]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d0:	f003 0303 	and.w	r3, r3, #3
 80075d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80075d6:	4b9e      	ldr	r3, [pc, #632]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075da:	091b      	lsrs	r3, r3, #4
 80075dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80075e2:	4b9b      	ldr	r3, [pc, #620]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80075ec:	4b98      	ldr	r3, [pc, #608]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f0:	08db      	lsrs	r3, r3, #3
 80075f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	ee07 3a90 	vmov	s15, r3
 8007600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007604:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8111 	beq.w	8007832 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	2b02      	cmp	r3, #2
 8007614:	f000 8083 	beq.w	800771e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	2b02      	cmp	r3, #2
 800761c:	f200 80a1 	bhi.w	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d056      	beq.n	80076da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800762c:	e099      	b.n	8007762 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800762e:	4b88      	ldr	r3, [pc, #544]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d02d      	beq.n	8007696 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800763a:	4b85      	ldr	r3, [pc, #532]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	08db      	lsrs	r3, r3, #3
 8007640:	f003 0303 	and.w	r3, r3, #3
 8007644:	4a83      	ldr	r2, [pc, #524]	; (8007854 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007646:	fa22 f303 	lsr.w	r3, r2, r3
 800764a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	ee07 3a90 	vmov	s15, r3
 800765c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007660:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007664:	4b7a      	ldr	r3, [pc, #488]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007674:	ed97 6a03 	vldr	s12, [r7, #12]
 8007678:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800767c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007680:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007688:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007690:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007694:	e087      	b.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	ee07 3a90 	vmov	s15, r3
 800769c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800785c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80076a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076a8:	4b69      	ldr	r3, [pc, #420]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b0:	ee07 3a90 	vmov	s15, r3
 80076b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80076bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076d8:	e065      	b.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007860 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80076e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ec:	4b58      	ldr	r3, [pc, #352]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f4:	ee07 3a90 	vmov	s15, r3
 80076f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007700:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007704:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007710:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007718:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771c:	e043      	b.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	ee07 3a90 	vmov	s15, r3
 8007724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007728:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007864 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800772c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007730:	4b47      	ldr	r3, [pc, #284]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007738:	ee07 3a90 	vmov	s15, r3
 800773c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007740:	ed97 6a03 	vldr	s12, [r7, #12]
 8007744:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007748:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007750:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007754:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007760:	e021      	b.n	80077a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	ee07 3a90 	vmov	s15, r3
 8007768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800785c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007770:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007774:	4b36      	ldr	r3, [pc, #216]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777c:	ee07 3a90 	vmov	s15, r3
 8007780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007784:	ed97 6a03 	vldr	s12, [r7, #12]
 8007788:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007858 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800778c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007790:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007794:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80077a6:	4b2a      	ldr	r3, [pc, #168]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077aa:	0a5b      	lsrs	r3, r3, #9
 80077ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077cc:	ee17 2a90 	vmov	r2, s15
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80077d4:	4b1e      	ldr	r3, [pc, #120]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80077d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d8:	0c1b      	lsrs	r3, r3, #16
 80077da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077de:	ee07 3a90 	vmov	s15, r3
 80077e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80077f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077fa:	ee17 2a90 	vmov	r2, s15
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007802:	4b13      	ldr	r3, [pc, #76]	; (8007850 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	0e1b      	lsrs	r3, r3, #24
 8007808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007818:	ee37 7a87 	vadd.f32	s14, s15, s14
 800781c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007828:	ee17 2a90 	vmov	r2, s15
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007830:	e008      	b.n	8007844 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3724      	adds	r7, #36	; 0x24
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	58024400 	.word	0x58024400
 8007854:	03d09000 	.word	0x03d09000
 8007858:	46000000 	.word	0x46000000
 800785c:	4c742400 	.word	0x4c742400
 8007860:	4a742400 	.word	0x4a742400
 8007864:	4af42400 	.word	0x4af42400

08007868 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007876:	4b53      	ldr	r3, [pc, #332]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d101      	bne.n	8007886 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e099      	b.n	80079ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007886:	4b4f      	ldr	r3, [pc, #316]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a4e      	ldr	r2, [pc, #312]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800788c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007890:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007892:	f7f9 fedb 	bl	800164c <HAL_GetTick>
 8007896:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007898:	e008      	b.n	80078ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800789a:	f7f9 fed7 	bl	800164c <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e086      	b.n	80079ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078ac:	4b45      	ldr	r3, [pc, #276]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1f0      	bne.n	800789a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80078b8:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 80078ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	031b      	lsls	r3, r3, #12
 80078c6:	493f      	ldr	r1, [pc, #252]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	628b      	str	r3, [r1, #40]	; 0x28
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	3b01      	subs	r3, #1
 80078d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	3b01      	subs	r3, #1
 80078dc:	025b      	lsls	r3, r3, #9
 80078de:	b29b      	uxth	r3, r3
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	3b01      	subs	r3, #1
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	061b      	lsls	r3, r3, #24
 80078f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078fc:	4931      	ldr	r1, [pc, #196]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007902:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	492d      	ldr	r1, [pc, #180]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007910:	4313      	orrs	r3, r2
 8007912:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007914:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007918:	f023 0220 	bic.w	r2, r3, #32
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	699b      	ldr	r3, [r3, #24]
 8007920:	4928      	ldr	r1, [pc, #160]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007922:	4313      	orrs	r3, r2
 8007924:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007926:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792a:	4a26      	ldr	r2, [pc, #152]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800792c:	f023 0310 	bic.w	r3, r3, #16
 8007930:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007932:	4b24      	ldr	r3, [pc, #144]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007934:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007936:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <RCCEx_PLL2_Config+0x160>)
 8007938:	4013      	ands	r3, r2
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	69d2      	ldr	r2, [r2, #28]
 800793e:	00d2      	lsls	r2, r2, #3
 8007940:	4920      	ldr	r1, [pc, #128]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007946:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4a1e      	ldr	r2, [pc, #120]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800794c:	f043 0310 	orr.w	r3, r3, #16
 8007950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800795a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795c:	4a19      	ldr	r2, [pc, #100]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800795e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007962:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007964:	e00f      	b.n	8007986 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d106      	bne.n	800797a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800796c:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800796e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007970:	4a14      	ldr	r2, [pc, #80]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007978:	e005      	b.n	8007986 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800797a:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	4a11      	ldr	r2, [pc, #68]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007980:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007984:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a0e      	ldr	r2, [pc, #56]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 800798c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007992:	f7f9 fe5b 	bl	800164c <HAL_GetTick>
 8007996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007998:	e008      	b.n	80079ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800799a:	f7f9 fe57 	bl	800164c <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e006      	b.n	80079ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079ac:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <RCCEx_PLL2_Config+0x15c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3710      	adds	r7, #16
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	58024400 	.word	0x58024400
 80079c8:	ffff0007 	.word	0xffff0007

080079cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80079da:	4b53      	ldr	r3, [pc, #332]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d101      	bne.n	80079ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e099      	b.n	8007b1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80079ea:	4b4f      	ldr	r3, [pc, #316]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a4e      	ldr	r2, [pc, #312]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 80079f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f6:	f7f9 fe29 	bl	800164c <HAL_GetTick>
 80079fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079fc:	e008      	b.n	8007a10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079fe:	f7f9 fe25 	bl	800164c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e086      	b.n	8007b1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a10:	4b45      	ldr	r3, [pc, #276]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1f0      	bne.n	80079fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a1c:	4b42      	ldr	r3, [pc, #264]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	051b      	lsls	r3, r3, #20
 8007a2a:	493f      	ldr	r1, [pc, #252]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	025b      	lsls	r3, r3, #9
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	041b      	lsls	r3, r3, #16
 8007a4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	061b      	lsls	r3, r3, #24
 8007a5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007a60:	4931      	ldr	r1, [pc, #196]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a62:	4313      	orrs	r3, r2
 8007a64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007a66:	4b30      	ldr	r3, [pc, #192]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	492d      	ldr	r1, [pc, #180]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a74:	4313      	orrs	r3, r2
 8007a76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007a78:	4b2b      	ldr	r3, [pc, #172]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	4928      	ldr	r1, [pc, #160]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a86:	4313      	orrs	r3, r2
 8007a88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007a8a:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	4a26      	ldr	r2, [pc, #152]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <RCCEx_PLL3_Config+0x160>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	69d2      	ldr	r2, [r2, #28]
 8007aa2:	00d2      	lsls	r2, r2, #3
 8007aa4:	4920      	ldr	r1, [pc, #128]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007aaa:	4b1f      	ldr	r3, [pc, #124]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aae:	4a1e      	ldr	r2, [pc, #120]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d106      	bne.n	8007aca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007abc:	4b1a      	ldr	r3, [pc, #104]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac0:	4a19      	ldr	r2, [pc, #100]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ac2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ac6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ac8:	e00f      	b.n	8007aea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d106      	bne.n	8007ade <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007ad0:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	4a14      	ldr	r2, [pc, #80]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ada:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007adc:	e005      	b.n	8007aea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007ade:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	4a11      	ldr	r2, [pc, #68]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007ae4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a0e      	ldr	r2, [pc, #56]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007af6:	f7f9 fda9 	bl	800164c <HAL_GetTick>
 8007afa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007afc:	e008      	b.n	8007b10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007afe:	f7f9 fda5 	bl	800164c <HAL_GetTick>
 8007b02:	4602      	mov	r2, r0
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	1ad3      	subs	r3, r2, r3
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d901      	bls.n	8007b10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e006      	b.n	8007b1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b10:	4b05      	ldr	r3, [pc, #20]	; (8007b28 <RCCEx_PLL3_Config+0x15c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d0f0      	beq.n	8007afe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	ffff0007 	.word	0xffff0007

08007b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d101      	bne.n	8007b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e042      	b.n	8007bc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7f9 fb37 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2224      	movs	r2, #36	; 0x24
 8007b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f82c 	bl	8007bd0 <UART_SetConfig>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d101      	bne.n	8007b82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e022      	b.n	8007bc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d002      	beq.n	8007b90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fd88 	bl	80086a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689a      	ldr	r2, [r3, #8]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f042 0201 	orr.w	r2, r2, #1
 8007bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fe0f 	bl	80087e4 <UART_CheckIdleState>
 8007bc6:	4603      	mov	r3, r0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bd4:	b092      	sub	sp, #72	; 0x48
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	431a      	orrs	r2, r3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	69db      	ldr	r3, [r3, #28]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4bbe      	ldr	r3, [pc, #760]	; (8007ef8 <UART_SetConfig+0x328>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	6812      	ldr	r2, [r2, #0]
 8007c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	430a      	orrs	r2, r1
 8007c20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4ab3      	ldr	r2, [pc, #716]	; (8007efc <UART_SetConfig+0x32c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	4baf      	ldr	r3, [pc, #700]	; (8007f00 <UART_SetConfig+0x330>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	697a      	ldr	r2, [r7, #20]
 8007c48:	6812      	ldr	r2, [r2, #0]
 8007c4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c4c:	430b      	orrs	r3, r1
 8007c4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c56:	f023 010f 	bic.w	r1, r3, #15
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4aa6      	ldr	r2, [pc, #664]	; (8007f04 <UART_SetConfig+0x334>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d177      	bne.n	8007d60 <UART_SetConfig+0x190>
 8007c70:	4ba5      	ldr	r3, [pc, #660]	; (8007f08 <UART_SetConfig+0x338>)
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c78:	2b28      	cmp	r3, #40	; 0x28
 8007c7a:	d86d      	bhi.n	8007d58 <UART_SetConfig+0x188>
 8007c7c:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <UART_SetConfig+0xb4>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007d29 	.word	0x08007d29
 8007c88:	08007d59 	.word	0x08007d59
 8007c8c:	08007d59 	.word	0x08007d59
 8007c90:	08007d59 	.word	0x08007d59
 8007c94:	08007d59 	.word	0x08007d59
 8007c98:	08007d59 	.word	0x08007d59
 8007c9c:	08007d59 	.word	0x08007d59
 8007ca0:	08007d59 	.word	0x08007d59
 8007ca4:	08007d31 	.word	0x08007d31
 8007ca8:	08007d59 	.word	0x08007d59
 8007cac:	08007d59 	.word	0x08007d59
 8007cb0:	08007d59 	.word	0x08007d59
 8007cb4:	08007d59 	.word	0x08007d59
 8007cb8:	08007d59 	.word	0x08007d59
 8007cbc:	08007d59 	.word	0x08007d59
 8007cc0:	08007d59 	.word	0x08007d59
 8007cc4:	08007d39 	.word	0x08007d39
 8007cc8:	08007d59 	.word	0x08007d59
 8007ccc:	08007d59 	.word	0x08007d59
 8007cd0:	08007d59 	.word	0x08007d59
 8007cd4:	08007d59 	.word	0x08007d59
 8007cd8:	08007d59 	.word	0x08007d59
 8007cdc:	08007d59 	.word	0x08007d59
 8007ce0:	08007d59 	.word	0x08007d59
 8007ce4:	08007d41 	.word	0x08007d41
 8007ce8:	08007d59 	.word	0x08007d59
 8007cec:	08007d59 	.word	0x08007d59
 8007cf0:	08007d59 	.word	0x08007d59
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007d59 	.word	0x08007d59
 8007cfc:	08007d59 	.word	0x08007d59
 8007d00:	08007d59 	.word	0x08007d59
 8007d04:	08007d49 	.word	0x08007d49
 8007d08:	08007d59 	.word	0x08007d59
 8007d0c:	08007d59 	.word	0x08007d59
 8007d10:	08007d59 	.word	0x08007d59
 8007d14:	08007d59 	.word	0x08007d59
 8007d18:	08007d59 	.word	0x08007d59
 8007d1c:	08007d59 	.word	0x08007d59
 8007d20:	08007d59 	.word	0x08007d59
 8007d24:	08007d51 	.word	0x08007d51
 8007d28:	2301      	movs	r3, #1
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e222      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d30:	2304      	movs	r3, #4
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e21e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d38:	2308      	movs	r3, #8
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e21a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d40:	2310      	movs	r3, #16
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e216      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d48:	2320      	movs	r3, #32
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e212      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d50:	2340      	movs	r3, #64	; 0x40
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d56:	e20e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d58:	2380      	movs	r3, #128	; 0x80
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d5e:	e20a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a69      	ldr	r2, [pc, #420]	; (8007f0c <UART_SetConfig+0x33c>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d130      	bne.n	8007dcc <UART_SetConfig+0x1fc>
 8007d6a:	4b67      	ldr	r3, [pc, #412]	; (8007f08 <UART_SetConfig+0x338>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b05      	cmp	r3, #5
 8007d74:	d826      	bhi.n	8007dc4 <UART_SetConfig+0x1f4>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <UART_SetConfig+0x1ac>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007d95 	.word	0x08007d95
 8007d80:	08007d9d 	.word	0x08007d9d
 8007d84:	08007da5 	.word	0x08007da5
 8007d88:	08007dad 	.word	0x08007dad
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007dbd 	.word	0x08007dbd
 8007d94:	2300      	movs	r3, #0
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e1ec      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e1e8      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007da4:	2308      	movs	r3, #8
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e1e4      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007dac:	2310      	movs	r3, #16
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e1e0      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007db4:	2320      	movs	r3, #32
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e1dc      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dc2:	e1d8      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007dc4:	2380      	movs	r3, #128	; 0x80
 8007dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dca:	e1d4      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a4f      	ldr	r2, [pc, #316]	; (8007f10 <UART_SetConfig+0x340>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d130      	bne.n	8007e38 <UART_SetConfig+0x268>
 8007dd6:	4b4c      	ldr	r3, [pc, #304]	; (8007f08 <UART_SetConfig+0x338>)
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dda:	f003 0307 	and.w	r3, r3, #7
 8007dde:	2b05      	cmp	r3, #5
 8007de0:	d826      	bhi.n	8007e30 <UART_SetConfig+0x260>
 8007de2:	a201      	add	r2, pc, #4	; (adr r2, 8007de8 <UART_SetConfig+0x218>)
 8007de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de8:	08007e01 	.word	0x08007e01
 8007dec:	08007e09 	.word	0x08007e09
 8007df0:	08007e11 	.word	0x08007e11
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	2300      	movs	r3, #0
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e1b6      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e1b2      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e1ae      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e1aa      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e20:	2320      	movs	r3, #32
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e1a6      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e28:	2340      	movs	r3, #64	; 0x40
 8007e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e2e:	e1a2      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e30:	2380      	movs	r3, #128	; 0x80
 8007e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e36:	e19e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a35      	ldr	r2, [pc, #212]	; (8007f14 <UART_SetConfig+0x344>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d130      	bne.n	8007ea4 <UART_SetConfig+0x2d4>
 8007e42:	4b31      	ldr	r3, [pc, #196]	; (8007f08 <UART_SetConfig+0x338>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d826      	bhi.n	8007e9c <UART_SetConfig+0x2cc>
 8007e4e:	a201      	add	r2, pc, #4	; (adr r2, 8007e54 <UART_SetConfig+0x284>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e6d 	.word	0x08007e6d
 8007e58:	08007e75 	.word	0x08007e75
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007e85 	.word	0x08007e85
 8007e64:	08007e8d 	.word	0x08007e8d
 8007e68:	08007e95 	.word	0x08007e95
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e180      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e17c      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e178      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e174      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e8c:	2320      	movs	r3, #32
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e92:	e170      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e94:	2340      	movs	r3, #64	; 0x40
 8007e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e9a:	e16c      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ea2:	e168      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a1b      	ldr	r2, [pc, #108]	; (8007f18 <UART_SetConfig+0x348>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d142      	bne.n	8007f34 <UART_SetConfig+0x364>
 8007eae:	4b16      	ldr	r3, [pc, #88]	; (8007f08 <UART_SetConfig+0x338>)
 8007eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b05      	cmp	r3, #5
 8007eb8:	d838      	bhi.n	8007f2c <UART_SetConfig+0x35c>
 8007eba:	a201      	add	r2, pc, #4	; (adr r2, 8007ec0 <UART_SetConfig+0x2f0>)
 8007ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec0:	08007ed9 	.word	0x08007ed9
 8007ec4:	08007ee1 	.word	0x08007ee1
 8007ec8:	08007ee9 	.word	0x08007ee9
 8007ecc:	08007ef1 	.word	0x08007ef1
 8007ed0:	08007f1d 	.word	0x08007f1d
 8007ed4:	08007f25 	.word	0x08007f25
 8007ed8:	2300      	movs	r3, #0
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e14a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ee0:	2304      	movs	r3, #4
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e146      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ee8:	2308      	movs	r3, #8
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e142      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ef0:	2310      	movs	r3, #16
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e13e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ef8:	cfff69f3 	.word	0xcfff69f3
 8007efc:	58000c00 	.word	0x58000c00
 8007f00:	11fff4ff 	.word	0x11fff4ff
 8007f04:	40011000 	.word	0x40011000
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	40004400 	.word	0x40004400
 8007f10:	40004800 	.word	0x40004800
 8007f14:	40004c00 	.word	0x40004c00
 8007f18:	40005000 	.word	0x40005000
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e128      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e124      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007f2c:	2380      	movs	r3, #128	; 0x80
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e120      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4acb      	ldr	r2, [pc, #812]	; (8008268 <UART_SetConfig+0x698>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d176      	bne.n	800802c <UART_SetConfig+0x45c>
 8007f3e:	4bcb      	ldr	r3, [pc, #812]	; (800826c <UART_SetConfig+0x69c>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f46:	2b28      	cmp	r3, #40	; 0x28
 8007f48:	d86c      	bhi.n	8008024 <UART_SetConfig+0x454>
 8007f4a:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <UART_SetConfig+0x380>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007ff5 	.word	0x08007ff5
 8007f54:	08008025 	.word	0x08008025
 8007f58:	08008025 	.word	0x08008025
 8007f5c:	08008025 	.word	0x08008025
 8007f60:	08008025 	.word	0x08008025
 8007f64:	08008025 	.word	0x08008025
 8007f68:	08008025 	.word	0x08008025
 8007f6c:	08008025 	.word	0x08008025
 8007f70:	08007ffd 	.word	0x08007ffd
 8007f74:	08008025 	.word	0x08008025
 8007f78:	08008025 	.word	0x08008025
 8007f7c:	08008025 	.word	0x08008025
 8007f80:	08008025 	.word	0x08008025
 8007f84:	08008025 	.word	0x08008025
 8007f88:	08008025 	.word	0x08008025
 8007f8c:	08008025 	.word	0x08008025
 8007f90:	08008005 	.word	0x08008005
 8007f94:	08008025 	.word	0x08008025
 8007f98:	08008025 	.word	0x08008025
 8007f9c:	08008025 	.word	0x08008025
 8007fa0:	08008025 	.word	0x08008025
 8007fa4:	08008025 	.word	0x08008025
 8007fa8:	08008025 	.word	0x08008025
 8007fac:	08008025 	.word	0x08008025
 8007fb0:	0800800d 	.word	0x0800800d
 8007fb4:	08008025 	.word	0x08008025
 8007fb8:	08008025 	.word	0x08008025
 8007fbc:	08008025 	.word	0x08008025
 8007fc0:	08008025 	.word	0x08008025
 8007fc4:	08008025 	.word	0x08008025
 8007fc8:	08008025 	.word	0x08008025
 8007fcc:	08008025 	.word	0x08008025
 8007fd0:	08008015 	.word	0x08008015
 8007fd4:	08008025 	.word	0x08008025
 8007fd8:	08008025 	.word	0x08008025
 8007fdc:	08008025 	.word	0x08008025
 8007fe0:	08008025 	.word	0x08008025
 8007fe4:	08008025 	.word	0x08008025
 8007fe8:	08008025 	.word	0x08008025
 8007fec:	08008025 	.word	0x08008025
 8007ff0:	0800801d 	.word	0x0800801d
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e0bc      	b.n	8008176 <UART_SetConfig+0x5a6>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e0b8      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008004:	2308      	movs	r3, #8
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e0b4      	b.n	8008176 <UART_SetConfig+0x5a6>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e0b0      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008014:	2320      	movs	r3, #32
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e0ac      	b.n	8008176 <UART_SetConfig+0x5a6>
 800801c:	2340      	movs	r3, #64	; 0x40
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008022:	e0a8      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008024:	2380      	movs	r3, #128	; 0x80
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800802a:	e0a4      	b.n	8008176 <UART_SetConfig+0x5a6>
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a8f      	ldr	r2, [pc, #572]	; (8008270 <UART_SetConfig+0x6a0>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d130      	bne.n	8008098 <UART_SetConfig+0x4c8>
 8008036:	4b8d      	ldr	r3, [pc, #564]	; (800826c <UART_SetConfig+0x69c>)
 8008038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803a:	f003 0307 	and.w	r3, r3, #7
 800803e:	2b05      	cmp	r3, #5
 8008040:	d826      	bhi.n	8008090 <UART_SetConfig+0x4c0>
 8008042:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x478>)
 8008044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008048:	08008061 	.word	0x08008061
 800804c:	08008069 	.word	0x08008069
 8008050:	08008071 	.word	0x08008071
 8008054:	08008079 	.word	0x08008079
 8008058:	08008081 	.word	0x08008081
 800805c:	08008089 	.word	0x08008089
 8008060:	2300      	movs	r3, #0
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e086      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008068:	2304      	movs	r3, #4
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e082      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008070:	2308      	movs	r3, #8
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e07e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008078:	2310      	movs	r3, #16
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e07a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008080:	2320      	movs	r3, #32
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e076      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008088:	2340      	movs	r3, #64	; 0x40
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800808e:	e072      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008090:	2380      	movs	r3, #128	; 0x80
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008096:	e06e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a75      	ldr	r2, [pc, #468]	; (8008274 <UART_SetConfig+0x6a4>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d130      	bne.n	8008104 <UART_SetConfig+0x534>
 80080a2:	4b72      	ldr	r3, [pc, #456]	; (800826c <UART_SetConfig+0x69c>)
 80080a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a6:	f003 0307 	and.w	r3, r3, #7
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d826      	bhi.n	80080fc <UART_SetConfig+0x52c>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <UART_SetConfig+0x4e4>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	080080cd 	.word	0x080080cd
 80080b8:	080080d5 	.word	0x080080d5
 80080bc:	080080dd 	.word	0x080080dd
 80080c0:	080080e5 	.word	0x080080e5
 80080c4:	080080ed 	.word	0x080080ed
 80080c8:	080080f5 	.word	0x080080f5
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e050      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080d4:	2304      	movs	r3, #4
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e04c      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080dc:	2308      	movs	r3, #8
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e048      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080e4:	2310      	movs	r3, #16
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e044      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080ec:	2320      	movs	r3, #32
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e040      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080f4:	2340      	movs	r3, #64	; 0x40
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080fa:	e03c      	b.n	8008176 <UART_SetConfig+0x5a6>
 80080fc:	2380      	movs	r3, #128	; 0x80
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008102:	e038      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a5b      	ldr	r2, [pc, #364]	; (8008278 <UART_SetConfig+0x6a8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d130      	bne.n	8008170 <UART_SetConfig+0x5a0>
 800810e:	4b57      	ldr	r3, [pc, #348]	; (800826c <UART_SetConfig+0x69c>)
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	f003 0307 	and.w	r3, r3, #7
 8008116:	2b05      	cmp	r3, #5
 8008118:	d826      	bhi.n	8008168 <UART_SetConfig+0x598>
 800811a:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <UART_SetConfig+0x550>)
 800811c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008120:	08008139 	.word	0x08008139
 8008124:	08008141 	.word	0x08008141
 8008128:	08008149 	.word	0x08008149
 800812c:	08008151 	.word	0x08008151
 8008130:	08008159 	.word	0x08008159
 8008134:	08008161 	.word	0x08008161
 8008138:	2302      	movs	r3, #2
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e01a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008140:	2304      	movs	r3, #4
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e016      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008148:	2308      	movs	r3, #8
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e012      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008150:	2310      	movs	r3, #16
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e00e      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008158:	2320      	movs	r3, #32
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e00a      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008160:	2340      	movs	r3, #64	; 0x40
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008166:	e006      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008168:	2380      	movs	r3, #128	; 0x80
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800816e:	e002      	b.n	8008176 <UART_SetConfig+0x5a6>
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a3f      	ldr	r2, [pc, #252]	; (8008278 <UART_SetConfig+0x6a8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	f040 80f8 	bne.w	8008372 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008182:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008186:	2b20      	cmp	r3, #32
 8008188:	dc46      	bgt.n	8008218 <UART_SetConfig+0x648>
 800818a:	2b02      	cmp	r3, #2
 800818c:	f2c0 8082 	blt.w	8008294 <UART_SetConfig+0x6c4>
 8008190:	3b02      	subs	r3, #2
 8008192:	2b1e      	cmp	r3, #30
 8008194:	d87e      	bhi.n	8008294 <UART_SetConfig+0x6c4>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <UART_SetConfig+0x5cc>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	0800821f 	.word	0x0800821f
 80081a0:	08008295 	.word	0x08008295
 80081a4:	08008227 	.word	0x08008227
 80081a8:	08008295 	.word	0x08008295
 80081ac:	08008295 	.word	0x08008295
 80081b0:	08008295 	.word	0x08008295
 80081b4:	08008237 	.word	0x08008237
 80081b8:	08008295 	.word	0x08008295
 80081bc:	08008295 	.word	0x08008295
 80081c0:	08008295 	.word	0x08008295
 80081c4:	08008295 	.word	0x08008295
 80081c8:	08008295 	.word	0x08008295
 80081cc:	08008295 	.word	0x08008295
 80081d0:	08008295 	.word	0x08008295
 80081d4:	08008247 	.word	0x08008247
 80081d8:	08008295 	.word	0x08008295
 80081dc:	08008295 	.word	0x08008295
 80081e0:	08008295 	.word	0x08008295
 80081e4:	08008295 	.word	0x08008295
 80081e8:	08008295 	.word	0x08008295
 80081ec:	08008295 	.word	0x08008295
 80081f0:	08008295 	.word	0x08008295
 80081f4:	08008295 	.word	0x08008295
 80081f8:	08008295 	.word	0x08008295
 80081fc:	08008295 	.word	0x08008295
 8008200:	08008295 	.word	0x08008295
 8008204:	08008295 	.word	0x08008295
 8008208:	08008295 	.word	0x08008295
 800820c:	08008295 	.word	0x08008295
 8008210:	08008295 	.word	0x08008295
 8008214:	08008287 	.word	0x08008287
 8008218:	2b40      	cmp	r3, #64	; 0x40
 800821a:	d037      	beq.n	800828c <UART_SetConfig+0x6bc>
 800821c:	e03a      	b.n	8008294 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800821e:	f7fe ff13 	bl	8007048 <HAL_RCCEx_GetD3PCLK1Freq>
 8008222:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008224:	e03c      	b.n	80082a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800822a:	4618      	mov	r0, r3
 800822c:	f7fe ff22 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008234:	e034      	b.n	80082a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008236:	f107 0318 	add.w	r3, r7, #24
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff f86e 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008244:	e02c      	b.n	80082a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008246:	4b09      	ldr	r3, [pc, #36]	; (800826c <UART_SetConfig+0x69c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0320 	and.w	r3, r3, #32
 800824e:	2b00      	cmp	r3, #0
 8008250:	d016      	beq.n	8008280 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008252:	4b06      	ldr	r3, [pc, #24]	; (800826c <UART_SetConfig+0x69c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	08db      	lsrs	r3, r3, #3
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	4a07      	ldr	r2, [pc, #28]	; (800827c <UART_SetConfig+0x6ac>)
 800825e:	fa22 f303 	lsr.w	r3, r2, r3
 8008262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008264:	e01c      	b.n	80082a0 <UART_SetConfig+0x6d0>
 8008266:	bf00      	nop
 8008268:	40011400 	.word	0x40011400
 800826c:	58024400 	.word	0x58024400
 8008270:	40007800 	.word	0x40007800
 8008274:	40007c00 	.word	0x40007c00
 8008278:	58000c00 	.word	0x58000c00
 800827c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008280:	4b9d      	ldr	r3, [pc, #628]	; (80084f8 <UART_SetConfig+0x928>)
 8008282:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008284:	e00c      	b.n	80082a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008286:	4b9d      	ldr	r3, [pc, #628]	; (80084fc <UART_SetConfig+0x92c>)
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800828a:	e009      	b.n	80082a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800828c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008290:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008292:	e005      	b.n	80082a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800829e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 81de 	beq.w	8008664 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	4a94      	ldr	r2, [pc, #592]	; (8008500 <UART_SetConfig+0x930>)
 80082ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082b2:	461a      	mov	r2, r3
 80082b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	4613      	mov	r3, r2
 80082c2:	005b      	lsls	r3, r3, #1
 80082c4:	4413      	add	r3, r2
 80082c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d305      	bcc.n	80082d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d903      	bls.n	80082e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80082de:	e1c1      	b.n	8008664 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e2:	2200      	movs	r2, #0
 80082e4:	60bb      	str	r3, [r7, #8]
 80082e6:	60fa      	str	r2, [r7, #12]
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	4a84      	ldr	r2, [pc, #528]	; (8008500 <UART_SetConfig+0x930>)
 80082ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	2200      	movs	r2, #0
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	607a      	str	r2, [r7, #4]
 80082fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008302:	f7f7 ffed 	bl	80002e0 <__aeabi_uldivmod>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	4610      	mov	r0, r2
 800830c:	4619      	mov	r1, r3
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	020b      	lsls	r3, r1, #8
 8008318:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800831c:	0202      	lsls	r2, r0, #8
 800831e:	6979      	ldr	r1, [r7, #20]
 8008320:	6849      	ldr	r1, [r1, #4]
 8008322:	0849      	lsrs	r1, r1, #1
 8008324:	2000      	movs	r0, #0
 8008326:	460c      	mov	r4, r1
 8008328:	4605      	mov	r5, r0
 800832a:	eb12 0804 	adds.w	r8, r2, r4
 800832e:	eb43 0905 	adc.w	r9, r3, r5
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	469a      	mov	sl, r3
 800833a:	4693      	mov	fp, r2
 800833c:	4652      	mov	r2, sl
 800833e:	465b      	mov	r3, fp
 8008340:	4640      	mov	r0, r8
 8008342:	4649      	mov	r1, r9
 8008344:	f7f7 ffcc 	bl	80002e0 <__aeabi_uldivmod>
 8008348:	4602      	mov	r2, r0
 800834a:	460b      	mov	r3, r1
 800834c:	4613      	mov	r3, r2
 800834e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008356:	d308      	bcc.n	800836a <UART_SetConfig+0x79a>
 8008358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800835e:	d204      	bcs.n	800836a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	e17c      	b.n	8008664 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008370:	e178      	b.n	8008664 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837a:	f040 80c5 	bne.w	8008508 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800837e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008382:	2b20      	cmp	r3, #32
 8008384:	dc48      	bgt.n	8008418 <UART_SetConfig+0x848>
 8008386:	2b00      	cmp	r3, #0
 8008388:	db7b      	blt.n	8008482 <UART_SetConfig+0x8b2>
 800838a:	2b20      	cmp	r3, #32
 800838c:	d879      	bhi.n	8008482 <UART_SetConfig+0x8b2>
 800838e:	a201      	add	r2, pc, #4	; (adr r2, 8008394 <UART_SetConfig+0x7c4>)
 8008390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008394:	0800841f 	.word	0x0800841f
 8008398:	08008427 	.word	0x08008427
 800839c:	08008483 	.word	0x08008483
 80083a0:	08008483 	.word	0x08008483
 80083a4:	0800842f 	.word	0x0800842f
 80083a8:	08008483 	.word	0x08008483
 80083ac:	08008483 	.word	0x08008483
 80083b0:	08008483 	.word	0x08008483
 80083b4:	0800843f 	.word	0x0800843f
 80083b8:	08008483 	.word	0x08008483
 80083bc:	08008483 	.word	0x08008483
 80083c0:	08008483 	.word	0x08008483
 80083c4:	08008483 	.word	0x08008483
 80083c8:	08008483 	.word	0x08008483
 80083cc:	08008483 	.word	0x08008483
 80083d0:	08008483 	.word	0x08008483
 80083d4:	0800844f 	.word	0x0800844f
 80083d8:	08008483 	.word	0x08008483
 80083dc:	08008483 	.word	0x08008483
 80083e0:	08008483 	.word	0x08008483
 80083e4:	08008483 	.word	0x08008483
 80083e8:	08008483 	.word	0x08008483
 80083ec:	08008483 	.word	0x08008483
 80083f0:	08008483 	.word	0x08008483
 80083f4:	08008483 	.word	0x08008483
 80083f8:	08008483 	.word	0x08008483
 80083fc:	08008483 	.word	0x08008483
 8008400:	08008483 	.word	0x08008483
 8008404:	08008483 	.word	0x08008483
 8008408:	08008483 	.word	0x08008483
 800840c:	08008483 	.word	0x08008483
 8008410:	08008483 	.word	0x08008483
 8008414:	08008475 	.word	0x08008475
 8008418:	2b40      	cmp	r3, #64	; 0x40
 800841a:	d02e      	beq.n	800847a <UART_SetConfig+0x8aa>
 800841c:	e031      	b.n	8008482 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841e:	f7fc fe5d 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 8008422:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008424:	e033      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008426:	f7fc fe6f 	bl	8005108 <HAL_RCC_GetPCLK2Freq>
 800842a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800842c:	e02f      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fe1e 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800843c:	e027      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800843e:	f107 0318 	add.w	r3, r7, #24
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe ff6a 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008448:	69fb      	ldr	r3, [r7, #28]
 800844a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800844c:	e01f      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800844e:	4b2d      	ldr	r3, [pc, #180]	; (8008504 <UART_SetConfig+0x934>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b00      	cmp	r3, #0
 8008458:	d009      	beq.n	800846e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800845a:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <UART_SetConfig+0x934>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	08db      	lsrs	r3, r3, #3
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	4a24      	ldr	r2, [pc, #144]	; (80084f8 <UART_SetConfig+0x928>)
 8008466:	fa22 f303 	lsr.w	r3, r2, r3
 800846a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800846c:	e00f      	b.n	800848e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800846e:	4b22      	ldr	r3, [pc, #136]	; (80084f8 <UART_SetConfig+0x928>)
 8008470:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008472:	e00c      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008474:	4b21      	ldr	r3, [pc, #132]	; (80084fc <UART_SetConfig+0x92c>)
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008478:	e009      	b.n	800848e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008480:	e005      	b.n	800848e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800848c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80e7 	beq.w	8008664 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	4a19      	ldr	r2, [pc, #100]	; (8008500 <UART_SetConfig+0x930>)
 800849c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80084a8:	005a      	lsls	r2, r3, #1
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	085b      	lsrs	r3, r3, #1
 80084b0:	441a      	add	r2, r3
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084be:	2b0f      	cmp	r3, #15
 80084c0:	d916      	bls.n	80084f0 <UART_SetConfig+0x920>
 80084c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c8:	d212      	bcs.n	80084f0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80084ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084cc:	b29b      	uxth	r3, r3
 80084ce:	f023 030f 	bic.w	r3, r3, #15
 80084d2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	085b      	lsrs	r3, r3, #1
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f003 0307 	and.w	r3, r3, #7
 80084de:	b29a      	uxth	r2, r3
 80084e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80084e2:	4313      	orrs	r3, r2
 80084e4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	e0b9      	b.n	8008664 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80084f6:	e0b5      	b.n	8008664 <UART_SetConfig+0xa94>
 80084f8:	03d09000 	.word	0x03d09000
 80084fc:	003d0900 	.word	0x003d0900
 8008500:	0800be40 	.word	0x0800be40
 8008504:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008508:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800850c:	2b20      	cmp	r3, #32
 800850e:	dc49      	bgt.n	80085a4 <UART_SetConfig+0x9d4>
 8008510:	2b00      	cmp	r3, #0
 8008512:	db7c      	blt.n	800860e <UART_SetConfig+0xa3e>
 8008514:	2b20      	cmp	r3, #32
 8008516:	d87a      	bhi.n	800860e <UART_SetConfig+0xa3e>
 8008518:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <UART_SetConfig+0x950>)
 800851a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851e:	bf00      	nop
 8008520:	080085ab 	.word	0x080085ab
 8008524:	080085b3 	.word	0x080085b3
 8008528:	0800860f 	.word	0x0800860f
 800852c:	0800860f 	.word	0x0800860f
 8008530:	080085bb 	.word	0x080085bb
 8008534:	0800860f 	.word	0x0800860f
 8008538:	0800860f 	.word	0x0800860f
 800853c:	0800860f 	.word	0x0800860f
 8008540:	080085cb 	.word	0x080085cb
 8008544:	0800860f 	.word	0x0800860f
 8008548:	0800860f 	.word	0x0800860f
 800854c:	0800860f 	.word	0x0800860f
 8008550:	0800860f 	.word	0x0800860f
 8008554:	0800860f 	.word	0x0800860f
 8008558:	0800860f 	.word	0x0800860f
 800855c:	0800860f 	.word	0x0800860f
 8008560:	080085db 	.word	0x080085db
 8008564:	0800860f 	.word	0x0800860f
 8008568:	0800860f 	.word	0x0800860f
 800856c:	0800860f 	.word	0x0800860f
 8008570:	0800860f 	.word	0x0800860f
 8008574:	0800860f 	.word	0x0800860f
 8008578:	0800860f 	.word	0x0800860f
 800857c:	0800860f 	.word	0x0800860f
 8008580:	0800860f 	.word	0x0800860f
 8008584:	0800860f 	.word	0x0800860f
 8008588:	0800860f 	.word	0x0800860f
 800858c:	0800860f 	.word	0x0800860f
 8008590:	0800860f 	.word	0x0800860f
 8008594:	0800860f 	.word	0x0800860f
 8008598:	0800860f 	.word	0x0800860f
 800859c:	0800860f 	.word	0x0800860f
 80085a0:	08008601 	.word	0x08008601
 80085a4:	2b40      	cmp	r3, #64	; 0x40
 80085a6:	d02e      	beq.n	8008606 <UART_SetConfig+0xa36>
 80085a8:	e031      	b.n	800860e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085aa:	f7fc fd97 	bl	80050dc <HAL_RCC_GetPCLK1Freq>
 80085ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085b0:	e033      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b2:	f7fc fda9 	bl	8005108 <HAL_RCC_GetPCLK2Freq>
 80085b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80085b8:	e02f      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085be:	4618      	mov	r0, r3
 80085c0:	f7fe fd58 	bl	8007074 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085c8:	e027      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ca:	f107 0318 	add.w	r3, r7, #24
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe fea4 	bl	800731c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085d8:	e01f      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <UART_SetConfig+0xac0>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d009      	beq.n	80085fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085e6:	4b2a      	ldr	r3, [pc, #168]	; (8008690 <UART_SetConfig+0xac0>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	08db      	lsrs	r3, r3, #3
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	4a28      	ldr	r2, [pc, #160]	; (8008694 <UART_SetConfig+0xac4>)
 80085f2:	fa22 f303 	lsr.w	r3, r2, r3
 80085f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085f8:	e00f      	b.n	800861a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80085fa:	4b26      	ldr	r3, [pc, #152]	; (8008694 <UART_SetConfig+0xac4>)
 80085fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80085fe:	e00c      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008600:	4b25      	ldr	r3, [pc, #148]	; (8008698 <UART_SetConfig+0xac8>)
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008604:	e009      	b.n	800861a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800860a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800860c:	e005      	b.n	800861a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800860e:	2300      	movs	r3, #0
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008618:	bf00      	nop
    }

    if (pclk != 0U)
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d021      	beq.n	8008664 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008624:	4a1d      	ldr	r2, [pc, #116]	; (800869c <UART_SetConfig+0xacc>)
 8008626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800862a:	461a      	mov	r2, r3
 800862c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800862e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	085b      	lsrs	r3, r3, #1
 8008638:	441a      	add	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008642:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	2b0f      	cmp	r3, #15
 8008648:	d909      	bls.n	800865e <UART_SetConfig+0xa8e>
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008650:	d205      	bcs.n	800865e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	b29a      	uxth	r2, r3
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	60da      	str	r2, [r3, #12]
 800865c:	e002      	b.n	8008664 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2201      	movs	r2, #1
 8008668:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2201      	movs	r2, #1
 8008670:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2200      	movs	r2, #0
 8008678:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2200      	movs	r2, #0
 800867e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008680:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008684:	4618      	mov	r0, r3
 8008686:	3748      	adds	r7, #72	; 0x48
 8008688:	46bd      	mov	sp, r7
 800868a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800868e:	bf00      	nop
 8008690:	58024400 	.word	0x58024400
 8008694:	03d09000 	.word	0x03d09000
 8008698:	003d0900 	.word	0x003d0900
 800869c:	0800be40 	.word	0x0800be40

080086a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	430a      	orrs	r2, r1
 80086c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008712:	f003 0308 	and.w	r3, r3, #8
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008734:	f003 0310 	and.w	r3, r3, #16
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008756:	f003 0320 	and.w	r3, r3, #32
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800877c:	2b00      	cmp	r3, #0
 800877e:	d01a      	beq.n	80087b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800879e:	d10a      	bne.n	80087b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00a      	beq.n	80087d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	605a      	str	r2, [r3, #4]
  }
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b098      	sub	sp, #96	; 0x60
 80087e8:	af02      	add	r7, sp, #8
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80087f4:	f7f8 ff2a 	bl	800164c <HAL_GetTick>
 80087f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0308 	and.w	r3, r3, #8
 8008804:	2b08      	cmp	r3, #8
 8008806:	d12f      	bne.n	8008868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008810:	2200      	movs	r2, #0
 8008812:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 f88e 	bl	8008938 <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d022      	beq.n	8008868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882a:	e853 3f00 	ldrex	r3, [r3]
 800882e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008836:	653b      	str	r3, [r7, #80]	; 0x50
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	461a      	mov	r2, r3
 800883e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008840:	647b      	str	r3, [r7, #68]	; 0x44
 8008842:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008848:	e841 2300 	strex	r3, r2, [r1]
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800884e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1e6      	bne.n	8008822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e063      	b.n	8008930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d149      	bne.n	800890a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008876:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887e:	2200      	movs	r2, #0
 8008880:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f857 	bl	8008938 <UART_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d03c      	beq.n	800890a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	623b      	str	r3, [r7, #32]
   return(result);
 800889e:	6a3b      	ldr	r3, [r7, #32]
 80088a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088ae:	633b      	str	r3, [r7, #48]	; 0x30
 80088b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f023 0301 	bic.w	r3, r3, #1
 80088d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088e2:	61fa      	str	r2, [r7, #28]
 80088e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	69b9      	ldr	r1, [r7, #24]
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	617b      	str	r3, [r7, #20]
   return(result);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e012      	b.n	8008930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2220      	movs	r2, #32
 800890e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2220      	movs	r2, #32
 8008916:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3758      	adds	r7, #88	; 0x58
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	603b      	str	r3, [r7, #0]
 8008944:	4613      	mov	r3, r2
 8008946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008948:	e049      	b.n	80089de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008950:	d045      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008952:	f7f8 fe7b 	bl	800164c <HAL_GetTick>
 8008956:	4602      	mov	r2, r0
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	1ad3      	subs	r3, r2, r3
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	429a      	cmp	r2, r3
 8008960:	d302      	bcc.n	8008968 <UART_WaitOnFlagUntilTimeout+0x30>
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d101      	bne.n	800896c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e048      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d031      	beq.n	80089de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69db      	ldr	r3, [r3, #28]
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b08      	cmp	r3, #8
 8008986:	d110      	bne.n	80089aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	2208      	movs	r2, #8
 800898e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f839 	bl	8008a08 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2208      	movs	r2, #8
 800899a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e029      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089b8:	d111      	bne.n	80089de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f000 f81f 	bl	8008a08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2200      	movs	r2, #0
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e00f      	b.n	80089fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4013      	ands	r3, r2
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	bf0c      	ite	eq
 80089ee:	2301      	moveq	r3, #1
 80089f0:	2300      	movne	r3, #0
 80089f2:	b2db      	uxtb	r3, r3
 80089f4:	461a      	mov	r2, r3
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d0a6      	beq.n	800894a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b095      	sub	sp, #84	; 0x54
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a18:	e853 3f00 	ldrex	r3, [r3]
 8008a1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a2e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e6      	bne.n	8008a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3308      	adds	r3, #8
 8008a48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	e853 3f00 	ldrex	r3, [r3]
 8008a50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a52:	69fa      	ldr	r2, [r7, #28]
 8008a54:	4b1e      	ldr	r3, [pc, #120]	; (8008ad0 <UART_EndRxTransfer+0xc8>)
 8008a56:	4013      	ands	r3, r2
 8008a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a6a:	e841 2300 	strex	r3, r2, [r1]
 8008a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1e5      	bne.n	8008a42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d118      	bne.n	8008ab0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	f023 0310 	bic.w	r3, r3, #16
 8008a92:	647b      	str	r3, [r7, #68]	; 0x44
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9c:	61bb      	str	r3, [r7, #24]
 8008a9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6979      	ldr	r1, [r7, #20]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e6      	bne.n	8008a7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2220      	movs	r2, #32
 8008ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2200      	movs	r2, #0
 8008abc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008ac4:	bf00      	nop
 8008ac6:	3754      	adds	r7, #84	; 0x54
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ace:	4770      	bx	lr
 8008ad0:	effffffe 	.word	0xeffffffe

08008ad4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_UARTEx_DisableFifoMode+0x16>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e027      	b.n	8008b3a <HAL_UARTEx_DisableFifoMode+0x66>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2224      	movs	r2, #36	; 0x24
 8008af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0201 	bic.w	r2, r2, #1
 8008b10:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr

08008b46 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	e02d      	b.n	8008bba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2224      	movs	r2, #36	; 0x24
 8008b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0201 	bic.w	r2, r2, #1
 8008b84:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f850 	bl	8008c40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d101      	bne.n	8008bda <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008bd6:	2302      	movs	r3, #2
 8008bd8:	e02d      	b.n	8008c36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2224      	movs	r2, #36	; 0x24
 8008be6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0201 	bic.w	r2, r2, #1
 8008c00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f812 	bl	8008c40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2220      	movs	r2, #32
 8008c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d108      	bne.n	8008c62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008c60:	e031      	b.n	8008cc6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008c62:	2310      	movs	r3, #16
 8008c64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008c66:	2310      	movs	r3, #16
 8008c68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	0e5b      	lsrs	r3, r3, #25
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	f003 0307 	and.w	r3, r3, #7
 8008c78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	0f5b      	lsrs	r3, r3, #29
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0307 	and.w	r3, r3, #7
 8008c88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	7b3a      	ldrb	r2, [r7, #12]
 8008c8e:	4911      	ldr	r1, [pc, #68]	; (8008cd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008c90:	5c8a      	ldrb	r2, [r1, r2]
 8008c92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008c96:	7b3a      	ldrb	r2, [r7, #12]
 8008c98:	490f      	ldr	r1, [pc, #60]	; (8008cd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008c9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	7b7a      	ldrb	r2, [r7, #13]
 8008cac:	4909      	ldr	r1, [pc, #36]	; (8008cd4 <UARTEx_SetNbDataToProcess+0x94>)
 8008cae:	5c8a      	ldrb	r2, [r1, r2]
 8008cb0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cb4:	7b7a      	ldrb	r2, [r7, #13]
 8008cb6:	4908      	ldr	r1, [pc, #32]	; (8008cd8 <UARTEx_SetNbDataToProcess+0x98>)
 8008cb8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cba:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cbe:	b29a      	uxth	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	0800be58 	.word	0x0800be58
 8008cd8:	0800be60 	.word	0x0800be60

08008cdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cdc:	b084      	sub	sp, #16
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
 8008ce6:	f107 001c 	add.w	r0, r7, #28
 8008cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d120      	bne.n	8008d36 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	68da      	ldr	r2, [r3, #12]
 8008d04:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <USB_CoreInit+0xd4>)
 8008d06:	4013      	ands	r3, r2
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d105      	bne.n	8008d2a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 faac 	bl	8009288 <USB_CoreReset>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73fb      	strb	r3, [r7, #15]
 8008d34:	e01a      	b.n	8008d6c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 faa0 	bl	8009288 <USB_CoreReset>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8008d5e:	e005      	b.n	8008d6c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	2b01      	cmp	r3, #1
 8008d70:	d116      	bne.n	8008da0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d76:	b29a      	uxth	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d80:	4b0c      	ldr	r3, [pc, #48]	; (8008db4 <USB_CoreInit+0xd8>)
 8008d82:	4313      	orrs	r3, r2
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f043 0206 	orr.w	r2, r3, #6
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f043 0220 	orr.w	r2, r3, #32
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008dac:	b004      	add	sp, #16
 8008dae:	4770      	bx	lr
 8008db0:	ffbdffbf 	.word	0xffbdffbf
 8008db4:	03ee0000 	.word	0x03ee0000

08008db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	f023 0201 	bic.w	r2, r3, #1
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b084      	sub	sp, #16
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	460b      	mov	r3, r1
 8008de4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d115      	bne.n	8008e28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e08:	2001      	movs	r0, #1
 8008e0a:	f7f8 fc2b 	bl	8001664 <HAL_Delay>
      ms++;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	3301      	adds	r3, #1
 8008e12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa29 	bl	800926c <USB_GetMode>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d01e      	beq.n	8008e5e <USB_SetCurrentMode+0x84>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b31      	cmp	r3, #49	; 0x31
 8008e24:	d9f0      	bls.n	8008e08 <USB_SetCurrentMode+0x2e>
 8008e26:	e01a      	b.n	8008e5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d115      	bne.n	8008e5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f7f8 fc12 	bl	8001664 <HAL_Delay>
      ms++;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fa10 	bl	800926c <USB_GetMode>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d005      	beq.n	8008e5e <USB_SetCurrentMode+0x84>
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2b31      	cmp	r3, #49	; 0x31
 8008e56:	d9f0      	bls.n	8008e3a <USB_SetCurrentMode+0x60>
 8008e58:	e001      	b.n	8008e5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e005      	b.n	8008e6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b32      	cmp	r3, #50	; 0x32
 8008e62:	d101      	bne.n	8008e68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008e64:	2301      	movs	r3, #1
 8008e66:	e000      	b.n	8008e6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
	...

08008e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008e74:	b084      	sub	sp, #16
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b086      	sub	sp, #24
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008e8e:	2300      	movs	r3, #0
 8008e90:	613b      	str	r3, [r7, #16]
 8008e92:	e009      	b.n	8008ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	693b      	ldr	r3, [r7, #16]
 8008e98:	3340      	adds	r3, #64	; 0x40
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	4413      	add	r3, r2
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	2b0e      	cmp	r3, #14
 8008eac:	d9f2      	bls.n	8008e94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d11c      	bne.n	8008eee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	601a      	str	r2, [r3, #0]
 8008eec:	e005      	b.n	8008efa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f00:	461a      	mov	r2, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f14:	461a      	mov	r2, r3
 8008f16:	680b      	ldr	r3, [r1, #0]
 8008f18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d10c      	bne.n	8008f3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d104      	bne.n	8008f30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008f26:	2100      	movs	r1, #0
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f965 	bl	80091f8 <USB_SetDevSpeed>
 8008f2e:	e008      	b.n	8008f42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008f30:	2101      	movs	r1, #1
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f960 	bl	80091f8 <USB_SetDevSpeed>
 8008f38:	e003      	b.n	8008f42 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008f3a:	2103      	movs	r1, #3
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f95b 	bl	80091f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f42:	2110      	movs	r1, #16
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f8f3 	bl	8009130 <USB_FlushTxFifo>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f91f 	bl	8009198 <USB_FlushRxFifo>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f76:	461a      	mov	r2, r3
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	461a      	mov	r2, r3
 8008f84:	2300      	movs	r3, #0
 8008f86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f88:	2300      	movs	r3, #0
 8008f8a:	613b      	str	r3, [r7, #16]
 8008f8c:	e043      	b.n	8009016 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa4:	d118      	bne.n	8008fd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	e013      	b.n	8008fea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e008      	b.n	8008fea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	015a      	lsls	r2, r3, #5
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	015a      	lsls	r2, r3, #5
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009008:	461a      	mov	r2, r3
 800900a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800900e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	3301      	adds	r3, #1
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	429a      	cmp	r2, r3
 800901c:	d3b7      	bcc.n	8008f8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800901e:	2300      	movs	r3, #0
 8009020:	613b      	str	r3, [r7, #16]
 8009022:	e043      	b.n	80090ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009036:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800903a:	d118      	bne.n	800906e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10a      	bne.n	8009058 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	015a      	lsls	r2, r3, #5
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4413      	add	r3, r2
 800904a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904e:	461a      	mov	r2, r3
 8009050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	e013      	b.n	8009080 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009064:	461a      	mov	r2, r3
 8009066:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e008      	b.n	8009080 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907a:	461a      	mov	r2, r3
 800907c:	2300      	movs	r3, #0
 800907e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4413      	add	r3, r2
 8009088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800908c:	461a      	mov	r2, r3
 800908e:	2300      	movs	r3, #0
 8009090:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	015a      	lsls	r2, r3, #5
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	4413      	add	r3, r2
 800909a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800909e:	461a      	mov	r2, r3
 80090a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d3b7      	bcc.n	8009024 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ba:	691b      	ldr	r3, [r3, #16]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80090d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80090d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d105      	bne.n	80090e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f043 0210 	orr.w	r2, r3, #16
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699a      	ldr	r2, [r3, #24]
 80090ec:	4b0e      	ldr	r3, [pc, #56]	; (8009128 <USB_DevInit+0x2b4>)
 80090ee:	4313      	orrs	r3, r2
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80090f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f043 0208 	orr.w	r2, r3, #8
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009108:	2b01      	cmp	r3, #1
 800910a:	d105      	bne.n	8009118 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <USB_DevInit+0x2b8>)
 8009112:	4313      	orrs	r3, r2
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009118:	7dfb      	ldrb	r3, [r7, #23]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009124:	b004      	add	sp, #16
 8009126:	4770      	bx	lr
 8009128:	803c3800 	.word	0x803c3800
 800912c:	40000004 	.word	0x40000004

08009130 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a13      	ldr	r2, [pc, #76]	; (8009194 <USB_FlushTxFifo+0x64>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d901      	bls.n	8009150 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e01b      	b.n	8009188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	daf2      	bge.n	800913e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	019b      	lsls	r3, r3, #6
 8009160:	f043 0220 	orr.w	r2, r3, #32
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4a08      	ldr	r2, [pc, #32]	; (8009194 <USB_FlushTxFifo+0x64>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d901      	bls.n	800917a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e006      	b.n	8009188 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b20      	cmp	r3, #32
 8009184:	d0f0      	beq.n	8009168 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr
 8009194:	00030d40 	.word	0x00030d40

08009198 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3301      	adds	r3, #1
 80091a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4a11      	ldr	r2, [pc, #68]	; (80091f4 <USB_FlushRxFifo+0x5c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d901      	bls.n	80091b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80091b2:	2303      	movs	r3, #3
 80091b4:	e018      	b.n	80091e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	691b      	ldr	r3, [r3, #16]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	daf2      	bge.n	80091a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2210      	movs	r2, #16
 80091c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4a08      	ldr	r2, [pc, #32]	; (80091f4 <USB_FlushRxFifo+0x5c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d901      	bls.n	80091da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e006      	b.n	80091e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b10      	cmp	r3, #16
 80091e4:	d0f0      	beq.n	80091c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	00030d40 	.word	0x00030d40

080091f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	460b      	mov	r3, r1
 8009202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	68f9      	ldr	r1, [r7, #12]
 8009214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009218:	4313      	orrs	r3, r2
 800921a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3714      	adds	r7, #20
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800922a:	b480      	push	{r7}
 800922c:	b085      	sub	sp, #20
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009244:	f023 0303 	bic.w	r3, r3, #3
 8009248:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009258:	f043 0302 	orr.w	r3, r3, #2
 800925c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	f003 0301 	and.w	r3, r3, #1
}
 800927c:	4618      	mov	r0, r3
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009288:	b480      	push	{r7}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	3301      	adds	r3, #1
 8009298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	4a13      	ldr	r2, [pc, #76]	; (80092ec <USB_CoreReset+0x64>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d901      	bls.n	80092a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e01b      	b.n	80092de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	daf2      	bge.n	8009294 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f043 0201 	orr.w	r2, r3, #1
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	3301      	adds	r3, #1
 80092c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4a09      	ldr	r2, [pc, #36]	; (80092ec <USB_CoreReset+0x64>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d901      	bls.n	80092d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e006      	b.n	80092de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d0f0      	beq.n	80092be <USB_CoreReset+0x36>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	00030d40 	.word	0x00030d40

080092f0 <__NVIC_SetPriority>:
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80092fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009300:	2b00      	cmp	r3, #0
 8009302:	db0a      	blt.n	800931a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	b2da      	uxtb	r2, r3
 8009308:	490c      	ldr	r1, [pc, #48]	; (800933c <__NVIC_SetPriority+0x4c>)
 800930a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800930e:	0112      	lsls	r2, r2, #4
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	440b      	add	r3, r1
 8009314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009318:	e00a      	b.n	8009330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	b2da      	uxtb	r2, r3
 800931e:	4908      	ldr	r1, [pc, #32]	; (8009340 <__NVIC_SetPriority+0x50>)
 8009320:	88fb      	ldrh	r3, [r7, #6]
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	3b04      	subs	r3, #4
 8009328:	0112      	lsls	r2, r2, #4
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	440b      	add	r3, r1
 800932e:	761a      	strb	r2, [r3, #24]
}
 8009330:	bf00      	nop
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr
 800933c:	e000e100 	.word	0xe000e100
 8009340:	e000ed00 	.word	0xe000ed00

08009344 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009348:	2100      	movs	r1, #0
 800934a:	f06f 0004 	mvn.w	r0, #4
 800934e:	f7ff ffcf 	bl	80092f0 <__NVIC_SetPriority>
#endif
}
 8009352:	bf00      	nop
 8009354:	bd80      	pop	{r7, pc}
	...

08009358 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800935e:	f3ef 8305 	mrs	r3, IPSR
 8009362:	603b      	str	r3, [r7, #0]
  return(result);
 8009364:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009366:	2b00      	cmp	r3, #0
 8009368:	d003      	beq.n	8009372 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800936a:	f06f 0305 	mvn.w	r3, #5
 800936e:	607b      	str	r3, [r7, #4]
 8009370:	e00c      	b.n	800938c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <osKernelInitialize+0x44>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800937a:	4b08      	ldr	r3, [pc, #32]	; (800939c <osKernelInitialize+0x44>)
 800937c:	2201      	movs	r2, #1
 800937e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009380:	2300      	movs	r3, #0
 8009382:	607b      	str	r3, [r7, #4]
 8009384:	e002      	b.n	800938c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009386:	f04f 33ff 	mov.w	r3, #4294967295
 800938a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800938c:	687b      	ldr	r3, [r7, #4]
}
 800938e:	4618      	mov	r0, r3
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	240007f4 	.word	0x240007f4

080093a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a6:	f3ef 8305 	mrs	r3, IPSR
 80093aa:	603b      	str	r3, [r7, #0]
  return(result);
 80093ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80093b2:	f06f 0305 	mvn.w	r3, #5
 80093b6:	607b      	str	r3, [r7, #4]
 80093b8:	e010      	b.n	80093dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80093ba:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <osKernelStart+0x48>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d109      	bne.n	80093d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80093c2:	f7ff ffbf 	bl	8009344 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80093c6:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <osKernelStart+0x48>)
 80093c8:	2202      	movs	r2, #2
 80093ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80093cc:	f001 f816 	bl	800a3fc <vTaskStartScheduler>
      stat = osOK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	e002      	b.n	80093dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80093dc:	687b      	ldr	r3, [r7, #4]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	240007f4 	.word	0x240007f4

080093ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08e      	sub	sp, #56	; 0x38
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093fc:	f3ef 8305 	mrs	r3, IPSR
 8009400:	617b      	str	r3, [r7, #20]
  return(result);
 8009402:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009404:	2b00      	cmp	r3, #0
 8009406:	d17e      	bne.n	8009506 <osThreadNew+0x11a>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d07b      	beq.n	8009506 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800940e:	2380      	movs	r3, #128	; 0x80
 8009410:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009412:	2318      	movs	r3, #24
 8009414:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009416:	2300      	movs	r3, #0
 8009418:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800941a:	f04f 33ff 	mov.w	r3, #4294967295
 800941e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d045      	beq.n	80094b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d002      	beq.n	8009434 <osThreadNew+0x48>
        name = attr->name;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d008      	beq.n	800945a <osThreadNew+0x6e>
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	2b38      	cmp	r3, #56	; 0x38
 800944c:	d805      	bhi.n	800945a <osThreadNew+0x6e>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f003 0301 	and.w	r3, r3, #1
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <osThreadNew+0x72>
        return (NULL);
 800945a:	2300      	movs	r3, #0
 800945c:	e054      	b.n	8009508 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	695b      	ldr	r3, [r3, #20]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	089b      	lsrs	r3, r3, #2
 800946c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00e      	beq.n	8009494 <osThreadNew+0xa8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2b5b      	cmp	r3, #91	; 0x5b
 800947c:	d90a      	bls.n	8009494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009482:	2b00      	cmp	r3, #0
 8009484:	d006      	beq.n	8009494 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <osThreadNew+0xa8>
        mem = 1;
 800948e:	2301      	movs	r3, #1
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e010      	b.n	80094b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10c      	bne.n	80094b6 <osThreadNew+0xca>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d108      	bne.n	80094b6 <osThreadNew+0xca>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d104      	bne.n	80094b6 <osThreadNew+0xca>
          mem = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61bb      	str	r3, [r7, #24]
 80094b0:	e001      	b.n	80094b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d110      	bne.n	80094de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80094c4:	9202      	str	r2, [sp, #8]
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	6a3a      	ldr	r2, [r7, #32]
 80094d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f000 fdf0 	bl	800a0b8 <xTaskCreateStatic>
 80094d8:	4603      	mov	r3, r0
 80094da:	613b      	str	r3, [r7, #16]
 80094dc:	e013      	b.n	8009506 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d110      	bne.n	8009506 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80094e4:	6a3b      	ldr	r3, [r7, #32]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	f107 0310 	add.w	r3, r7, #16
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	9300      	str	r3, [sp, #0]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f000 fe3b 	bl	800a172 <xTaskCreate>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d001      	beq.n	8009506 <osThreadNew+0x11a>
            hTask = NULL;
 8009502:	2300      	movs	r3, #0
 8009504:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009506:	693b      	ldr	r3, [r7, #16]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3728      	adds	r7, #40	; 0x28
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	60b9      	str	r1, [r7, #8]
 800951a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	4a07      	ldr	r2, [pc, #28]	; (800953c <vApplicationGetIdleTaskMemory+0x2c>)
 8009520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4a06      	ldr	r2, [pc, #24]	; (8009540 <vApplicationGetIdleTaskMemory+0x30>)
 8009526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2280      	movs	r2, #128	; 0x80
 800952c:	601a      	str	r2, [r3, #0]
}
 800952e:	bf00      	nop
 8009530:	3714      	adds	r7, #20
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	240007f8 	.word	0x240007f8
 8009540:	24000854 	.word	0x24000854

08009544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4a07      	ldr	r2, [pc, #28]	; (8009570 <vApplicationGetTimerTaskMemory+0x2c>)
 8009554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a06      	ldr	r2, [pc, #24]	; (8009574 <vApplicationGetTimerTaskMemory+0x30>)
 800955a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009562:	601a      	str	r2, [r3, #0]
}
 8009564:	bf00      	nop
 8009566:	3714      	adds	r7, #20
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	24000a54 	.word	0x24000a54
 8009574:	24000ab0 	.word	0x24000ab0

08009578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f103 0208 	add.w	r2, r3, #8
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f04f 32ff 	mov.w	r2, #4294967295
 8009590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f103 0208 	add.w	r2, r3, #8
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f103 0208 	add.w	r2, r3, #8
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095ac:	bf00      	nop
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
 80095da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	689a      	ldr	r2, [r3, #8]
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	687a      	ldr	r2, [r7, #4]
 8009602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	1c5a      	adds	r2, r3, #1
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	601a      	str	r2, [r3, #0]
}
 800960e:	bf00      	nop
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009630:	d103      	bne.n	800963a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	e00c      	b.n	8009654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	3308      	adds	r3, #8
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	e002      	b.n	8009648 <vListInsert+0x2e>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	429a      	cmp	r2, r3
 8009652:	d2f6      	bcs.n	8009642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685a      	ldr	r2, [r3, #4]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	1c5a      	adds	r2, r3, #1
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	601a      	str	r2, [r3, #0]
}
 8009680:	bf00      	nop
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	6892      	ldr	r2, [r2, #8]
 80096a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6852      	ldr	r2, [r2, #4]
 80096ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d103      	bne.n	80096c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	689a      	ldr	r2, [r3, #8]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	1e5a      	subs	r2, r3, #1
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3714      	adds	r7, #20
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d10a      	bne.n	800970a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009706:	bf00      	nop
 8009708:	e7fe      	b.n	8009708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800970a:	f002 f81b 	bl	800b744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800971a:	fb01 f303 	mul.w	r3, r1, r3
 800971e:	441a      	add	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800973a:	3b01      	subs	r3, #1
 800973c:	68f9      	ldr	r1, [r7, #12]
 800973e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	441a      	add	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	22ff      	movs	r2, #255	; 0xff
 800974e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	22ff      	movs	r2, #255	; 0xff
 8009756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d114      	bne.n	800978a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	691b      	ldr	r3, [r3, #16]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d01a      	beq.n	800979e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	3310      	adds	r3, #16
 800976c:	4618      	mov	r0, r3
 800976e:	f001 f8cf 	bl	800a910 <xTaskRemoveFromEventList>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d012      	beq.n	800979e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009778:	4b0c      	ldr	r3, [pc, #48]	; (80097ac <xQueueGenericReset+0xcc>)
 800977a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	e009      	b.n	800979e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3310      	adds	r3, #16
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fef2 	bl	8009578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3324      	adds	r3, #36	; 0x24
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff feed 	bl	8009578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800979e:	f002 f801 	bl	800b7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097a2:	2301      	movs	r3, #1
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	e000ed04 	.word	0xe000ed04

080097b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08e      	sub	sp, #56	; 0x38
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
 80097bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d10a      	bne.n	80097da <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097d6:	bf00      	nop
 80097d8:	e7fe      	b.n	80097d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d002      	beq.n	8009802 <xQueueGenericCreateStatic+0x52>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <xQueueGenericCreateStatic+0x56>
 8009802:	2301      	movs	r3, #1
 8009804:	e000      	b.n	8009808 <xQueueGenericCreateStatic+0x58>
 8009806:	2300      	movs	r3, #0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	623b      	str	r3, [r7, #32]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <xQueueGenericCreateStatic+0x7e>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d101      	bne.n	8009832 <xQueueGenericCreateStatic+0x82>
 800982e:	2301      	movs	r3, #1
 8009830:	e000      	b.n	8009834 <xQueueGenericCreateStatic+0x84>
 8009832:	2300      	movs	r3, #0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10a      	bne.n	800984e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800983c:	f383 8811 	msr	BASEPRI, r3
 8009840:	f3bf 8f6f 	isb	sy
 8009844:	f3bf 8f4f 	dsb	sy
 8009848:	61fb      	str	r3, [r7, #28]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800984e:	2350      	movs	r3, #80	; 0x50
 8009850:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b50      	cmp	r3, #80	; 0x50
 8009856:	d00a      	beq.n	800986e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	61bb      	str	r3, [r7, #24]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800986e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	2201      	movs	r2, #1
 800987e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009882:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	4613      	mov	r3, r2
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f805 	bl	80098a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009898:	4618      	mov	r0, r3
 800989a:	3730      	adds	r7, #48	; 0x30
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b084      	sub	sp, #16
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	60b9      	str	r1, [r7, #8]
 80098aa:	607a      	str	r2, [r7, #4]
 80098ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	69ba      	ldr	r2, [r7, #24]
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098ce:	2101      	movs	r1, #1
 80098d0:	69b8      	ldr	r0, [r7, #24]
 80098d2:	f7ff ff05 	bl	80096e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	78fa      	ldrb	r2, [r7, #3]
 80098da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80098de:	bf00      	nop
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
	...

080098e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b08e      	sub	sp, #56	; 0x38
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xQueueGenericSend+0x32>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d103      	bne.n	8009928 <xQueueGenericSend+0x40>
 8009920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <xQueueGenericSend+0x44>
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <xQueueGenericSend+0x46>
 800992c:	2300      	movs	r3, #0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d10a      	bne.n	8009948 <xQueueGenericSend+0x60>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d103      	bne.n	8009956 <xQueueGenericSend+0x6e>
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	2b01      	cmp	r3, #1
 8009954:	d101      	bne.n	800995a <xQueueGenericSend+0x72>
 8009956:	2301      	movs	r3, #1
 8009958:	e000      	b.n	800995c <xQueueGenericSend+0x74>
 800995a:	2300      	movs	r3, #0
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <xQueueGenericSend+0x8e>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	623b      	str	r3, [r7, #32]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009976:	f001 f989 	bl	800ac8c <xTaskGetSchedulerState>
 800997a:	4603      	mov	r3, r0
 800997c:	2b00      	cmp	r3, #0
 800997e:	d102      	bne.n	8009986 <xQueueGenericSend+0x9e>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <xQueueGenericSend+0xa2>
 8009986:	2301      	movs	r3, #1
 8009988:	e000      	b.n	800998c <xQueueGenericSend+0xa4>
 800998a:	2300      	movs	r3, #0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d10a      	bne.n	80099a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	61fb      	str	r3, [r7, #28]
}
 80099a2:	bf00      	nop
 80099a4:	e7fe      	b.n	80099a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099a6:	f001 fecd 	bl	800b744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d302      	bcc.n	80099bc <xQueueGenericSend+0xd4>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d129      	bne.n	8009a10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	68b9      	ldr	r1, [r7, #8]
 80099c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099c2:	f000 fa0b 	bl	8009ddc <prvCopyDataToQueue>
 80099c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	3324      	adds	r3, #36	; 0x24
 80099d4:	4618      	mov	r0, r3
 80099d6:	f000 ff9b 	bl	800a910 <xTaskRemoveFromEventList>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d013      	beq.n	8009a08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80099e0:	4b3f      	ldr	r3, [pc, #252]	; (8009ae0 <xQueueGenericSend+0x1f8>)
 80099e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e6:	601a      	str	r2, [r3, #0]
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	e00a      	b.n	8009a08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80099f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d007      	beq.n	8009a08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80099f8:	4b39      	ldr	r3, [pc, #228]	; (8009ae0 <xQueueGenericSend+0x1f8>)
 80099fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099fe:	601a      	str	r2, [r3, #0]
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009a08:	f001 fecc 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e063      	b.n	8009ad8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d103      	bne.n	8009a1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a16:	f001 fec5 	bl	800b7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	e05c      	b.n	8009ad8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d106      	bne.n	8009a32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a24:	f107 0314 	add.w	r3, r7, #20
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f000 ffd5 	bl	800a9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a32:	f001 feb7 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a36:	f000 fd47 	bl	800a4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a3a:	f001 fe83 	bl	800b744 <vPortEnterCritical>
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a44:	b25b      	sxtb	r3, r3
 8009a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4a:	d103      	bne.n	8009a54 <xQueueGenericSend+0x16c>
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a5a:	b25b      	sxtb	r3, r3
 8009a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a60:	d103      	bne.n	8009a6a <xQueueGenericSend+0x182>
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a6a:	f001 fe9b 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a6e:	1d3a      	adds	r2, r7, #4
 8009a70:	f107 0314 	add.w	r3, r7, #20
 8009a74:	4611      	mov	r1, r2
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 ffc4 	bl	800aa04 <xTaskCheckForTimeOut>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d124      	bne.n	8009acc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009a82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a84:	f000 faa2 	bl	8009fcc <prvIsQueueFull>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d018      	beq.n	8009ac0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	3310      	adds	r3, #16
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	4611      	mov	r1, r2
 8009a96:	4618      	mov	r0, r3
 8009a98:	f000 feea 	bl	800a870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009a9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a9e:	f000 fa2d 	bl	8009efc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009aa2:	f000 fd1f 	bl	800a4e4 <xTaskResumeAll>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f af7c 	bne.w	80099a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009aae:	4b0c      	ldr	r3, [pc, #48]	; (8009ae0 <xQueueGenericSend+0x1f8>)
 8009ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab4:	601a      	str	r2, [r3, #0]
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	e772      	b.n	80099a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ac0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ac2:	f000 fa1b 	bl	8009efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ac6:	f000 fd0d 	bl	800a4e4 <xTaskResumeAll>
 8009aca:	e76c      	b.n	80099a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009acc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ace:	f000 fa15 	bl	8009efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ad2:	f000 fd07 	bl	800a4e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009ad6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3738      	adds	r7, #56	; 0x38
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b090      	sub	sp, #64	; 0x40
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <xQueueGenericSendFromISR+0x3c>
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <xQueueGenericSendFromISR+0x40>
 8009b20:	2301      	movs	r3, #1
 8009b22:	e000      	b.n	8009b26 <xQueueGenericSendFromISR+0x42>
 8009b24:	2300      	movs	r3, #0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d103      	bne.n	8009b4e <xQueueGenericSendFromISR+0x6a>
 8009b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <xQueueGenericSendFromISR+0x6e>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e000      	b.n	8009b54 <xQueueGenericSendFromISR+0x70>
 8009b52:	2300      	movs	r3, #0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	623b      	str	r3, [r7, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b6e:	f001 fecb 	bl	800b908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009b72:	f3ef 8211 	mrs	r2, BASEPRI
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	61fa      	str	r2, [r7, #28]
 8009b88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d302      	bcc.n	8009ba0 <xQueueGenericSendFromISR+0xbc>
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d12f      	bne.n	8009c00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	68b9      	ldr	r1, [r7, #8]
 8009bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bb6:	f000 f911 	bl	8009ddc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009bba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc2:	d112      	bne.n	8009bea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d016      	beq.n	8009bfa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bce:	3324      	adds	r3, #36	; 0x24
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fe9d 	bl	800a910 <xTaskRemoveFromEventList>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d00e      	beq.n	8009bfa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d00b      	beq.n	8009bfa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
 8009be8:	e007      	b.n	8009bfa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009bea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	b25a      	sxtb	r2, r3
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009bfe:	e001      	b.n	8009c04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009c0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3740      	adds	r7, #64	; 0x40
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08c      	sub	sp, #48	; 0x30
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <xQueueReceive+0x30>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	623b      	str	r3, [r7, #32]
}
 8009c48:	bf00      	nop
 8009c4a:	e7fe      	b.n	8009c4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <xQueueReceive+0x3e>
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <xQueueReceive+0x42>
 8009c5a:	2301      	movs	r3, #1
 8009c5c:	e000      	b.n	8009c60 <xQueueReceive+0x44>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <xQueueReceive+0x5e>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	61fb      	str	r3, [r7, #28]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c7a:	f001 f807 	bl	800ac8c <xTaskGetSchedulerState>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d102      	bne.n	8009c8a <xQueueReceive+0x6e>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d101      	bne.n	8009c8e <xQueueReceive+0x72>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	e000      	b.n	8009c90 <xQueueReceive+0x74>
 8009c8e:	2300      	movs	r3, #0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d10a      	bne.n	8009caa <xQueueReceive+0x8e>
	__asm volatile
 8009c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	61bb      	str	r3, [r7, #24]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009caa:	f001 fd4b 	bl	800b744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d01f      	beq.n	8009cfa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009cba:	68b9      	ldr	r1, [r7, #8]
 8009cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cbe:	f000 f8f7 	bl	8009eb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc4:	1e5a      	subs	r2, r3, #1
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00f      	beq.n	8009cf2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd4:	3310      	adds	r3, #16
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 fe1a 	bl	800a910 <xTaskRemoveFromEventList>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d007      	beq.n	8009cf2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009ce2:	4b3d      	ldr	r3, [pc, #244]	; (8009dd8 <xQueueReceive+0x1bc>)
 8009ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009cf2:	f001 fd57 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e069      	b.n	8009dce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d00:	f001 fd50 	bl	800b7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d04:	2300      	movs	r3, #0
 8009d06:	e062      	b.n	8009dce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d106      	bne.n	8009d1c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d0e:	f107 0310 	add.w	r3, r7, #16
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 fe60 	bl	800a9d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d1c:	f001 fd42 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d20:	f000 fbd2 	bl	800a4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d24:	f001 fd0e 	bl	800b744 <vPortEnterCritical>
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d2e:	b25b      	sxtb	r3, r3
 8009d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d34:	d103      	bne.n	8009d3e <xQueueReceive+0x122>
 8009d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d44:	b25b      	sxtb	r3, r3
 8009d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4a:	d103      	bne.n	8009d54 <xQueueReceive+0x138>
 8009d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d54:	f001 fd26 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d58:	1d3a      	adds	r2, r7, #4
 8009d5a:	f107 0310 	add.w	r3, r7, #16
 8009d5e:	4611      	mov	r1, r2
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 fe4f 	bl	800aa04 <xTaskCheckForTimeOut>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d123      	bne.n	8009db4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d6e:	f000 f917 	bl	8009fa0 <prvIsQueueEmpty>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d017      	beq.n	8009da8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	3324      	adds	r3, #36	; 0x24
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	4611      	mov	r1, r2
 8009d80:	4618      	mov	r0, r3
 8009d82:	f000 fd75 	bl	800a870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d88:	f000 f8b8 	bl	8009efc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d8c:	f000 fbaa 	bl	800a4e4 <xTaskResumeAll>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d189      	bne.n	8009caa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d96:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <xQueueReceive+0x1bc>)
 8009d98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	e780      	b.n	8009caa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009daa:	f000 f8a7 	bl	8009efc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009dae:	f000 fb99 	bl	800a4e4 <xTaskResumeAll>
 8009db2:	e77a      	b.n	8009caa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009db6:	f000 f8a1 	bl	8009efc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009dba:	f000 fb93 	bl	800a4e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dc0:	f000 f8ee 	bl	8009fa0 <prvIsQueueEmpty>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	f43f af6f 	beq.w	8009caa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009dcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009dce:	4618      	mov	r0, r3
 8009dd0:	3730      	adds	r7, #48	; 0x30
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	bd80      	pop	{r7, pc}
 8009dd6:	bf00      	nop
 8009dd8:	e000ed04 	.word	0xe000ed04

08009ddc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d10d      	bne.n	8009e16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d14d      	bne.n	8009e9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 ff5e 	bl	800acc8 <xTaskPriorityDisinherit>
 8009e0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	609a      	str	r2, [r3, #8]
 8009e14:	e043      	b.n	8009e9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d119      	bne.n	8009e50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	6858      	ldr	r0, [r3, #4]
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e24:	461a      	mov	r2, r3
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	f001 ffc4 	bl	800bdb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e34:	441a      	add	r2, r3
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d32b      	bcc.n	8009e9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	605a      	str	r2, [r3, #4]
 8009e4e:	e026      	b.n	8009e9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	68d8      	ldr	r0, [r3, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e58:	461a      	mov	r2, r3
 8009e5a:	68b9      	ldr	r1, [r7, #8]
 8009e5c:	f001 ffaa 	bl	800bdb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	68da      	ldr	r2, [r3, #12]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e68:	425b      	negs	r3, r3
 8009e6a:	441a      	add	r2, r3
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	68da      	ldr	r2, [r3, #12]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d207      	bcs.n	8009e8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e84:	425b      	negs	r3, r3
 8009e86:	441a      	add	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d105      	bne.n	8009e9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d002      	beq.n	8009e9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	3b01      	subs	r3, #1
 8009e9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	1c5a      	adds	r2, r3, #1
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009ea6:	697b      	ldr	r3, [r7, #20]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3718      	adds	r7, #24
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d018      	beq.n	8009ef4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eca:	441a      	add	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	68da      	ldr	r2, [r3, #12]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d303      	bcc.n	8009ee4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68d9      	ldr	r1, [r3, #12]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eec:	461a      	mov	r2, r3
 8009eee:	6838      	ldr	r0, [r7, #0]
 8009ef0:	f001 ff60 	bl	800bdb4 <memcpy>
	}
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009f04:	f001 fc1e 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f10:	e011      	b.n	8009f36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d012      	beq.n	8009f40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	3324      	adds	r3, #36	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f000 fcf6 	bl	800a910 <xTaskRemoveFromEventList>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d001      	beq.n	8009f2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009f2a:	f000 fdcd 	bl	800aac8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009f2e:	7bfb      	ldrb	r3, [r7, #15]
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dce9      	bgt.n	8009f12 <prvUnlockQueue+0x16>
 8009f3e:	e000      	b.n	8009f42 <prvUnlockQueue+0x46>
					break;
 8009f40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	22ff      	movs	r2, #255	; 0xff
 8009f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009f4a:	f001 fc2b 	bl	800b7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009f4e:	f001 fbf9 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f5a:	e011      	b.n	8009f80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d012      	beq.n	8009f8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3310      	adds	r3, #16
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fcd1 	bl	800a910 <xTaskRemoveFromEventList>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009f74:	f000 fda8 	bl	800aac8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009f78:	7bbb      	ldrb	r3, [r7, #14]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009f80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	dce9      	bgt.n	8009f5c <prvUnlockQueue+0x60>
 8009f88:	e000      	b.n	8009f8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009f8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	22ff      	movs	r2, #255	; 0xff
 8009f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009f94:	f001 fc06 	bl	800b7a4 <vPortExitCritical>
}
 8009f98:	bf00      	nop
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fa8:	f001 fbcc 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d102      	bne.n	8009fba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	60fb      	str	r3, [r7, #12]
 8009fb8:	e001      	b.n	8009fbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fbe:	f001 fbf1 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009fd4:	f001 fbb6 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d102      	bne.n	8009fea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]
 8009fe8:	e001      	b.n	8009fee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009fea:	2300      	movs	r3, #0
 8009fec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009fee:	f001 fbd9 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a006:	2300      	movs	r3, #0
 800a008:	60fb      	str	r3, [r7, #12]
 800a00a:	e014      	b.n	800a036 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a00c:	4a0f      	ldr	r2, [pc, #60]	; (800a04c <vQueueAddToRegistry+0x50>)
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d10b      	bne.n	800a030 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a018:	490c      	ldr	r1, [pc, #48]	; (800a04c <vQueueAddToRegistry+0x50>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a022:	4a0a      	ldr	r2, [pc, #40]	; (800a04c <vQueueAddToRegistry+0x50>)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4413      	add	r3, r2
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a02e:	e006      	b.n	800a03e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3301      	adds	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2b07      	cmp	r3, #7
 800a03a:	d9e7      	bls.n	800a00c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a03c:	bf00      	nop
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	24000eb0 	.word	0x24000eb0

0800a050 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a050:	b580      	push	{r7, lr}
 800a052:	b086      	sub	sp, #24
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a060:	f001 fb70 	bl	800b744 <vPortEnterCritical>
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a06a:	b25b      	sxtb	r3, r3
 800a06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a070:	d103      	bne.n	800a07a <vQueueWaitForMessageRestricted+0x2a>
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a080:	b25b      	sxtb	r3, r3
 800a082:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a086:	d103      	bne.n	800a090 <vQueueWaitForMessageRestricted+0x40>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a090:	f001 fb88 	bl	800b7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	3324      	adds	r3, #36	; 0x24
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	68b9      	ldr	r1, [r7, #8]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f000 fc07 	bl	800a8b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a0aa:	6978      	ldr	r0, [r7, #20]
 800a0ac:	f7ff ff26 	bl	8009efc <prvUnlockQueue>
	}
 800a0b0:	bf00      	nop
 800a0b2:	3718      	adds	r7, #24
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b08e      	sub	sp, #56	; 0x38
 800a0bc:	af04      	add	r7, sp, #16
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a0c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	623b      	str	r3, [r7, #32]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10a      	bne.n	800a0fe <xTaskCreateStatic+0x46>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	61fb      	str	r3, [r7, #28]
}
 800a0fa:	bf00      	nop
 800a0fc:	e7fe      	b.n	800a0fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a0fe:	235c      	movs	r3, #92	; 0x5c
 800a100:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2b5c      	cmp	r3, #92	; 0x5c
 800a106:	d00a      	beq.n	800a11e <xTaskCreateStatic+0x66>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	61bb      	str	r3, [r7, #24]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a11e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	2b00      	cmp	r3, #0
 800a124:	d01e      	beq.n	800a164 <xTaskCreateStatic+0xac>
 800a126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d01b      	beq.n	800a164 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a134:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a138:	2202      	movs	r2, #2
 800a13a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a13e:	2300      	movs	r3, #0
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a144:	9302      	str	r3, [sp, #8]
 800a146:	f107 0314 	add.w	r3, r7, #20
 800a14a:	9301      	str	r3, [sp, #4]
 800a14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	68b9      	ldr	r1, [r7, #8]
 800a156:	68f8      	ldr	r0, [r7, #12]
 800a158:	f000 f850 	bl	800a1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a15c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a15e:	f000 f8dd 	bl	800a31c <prvAddNewTaskToReadyList>
 800a162:	e001      	b.n	800a168 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a168:	697b      	ldr	r3, [r7, #20]
	}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3728      	adds	r7, #40	; 0x28
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a172:	b580      	push	{r7, lr}
 800a174:	b08c      	sub	sp, #48	; 0x30
 800a176:	af04      	add	r7, sp, #16
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	603b      	str	r3, [r7, #0]
 800a17e:	4613      	mov	r3, r2
 800a180:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a182:	88fb      	ldrh	r3, [r7, #6]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4618      	mov	r0, r3
 800a188:	f001 fbfe 	bl	800b988 <pvPortMalloc>
 800a18c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00e      	beq.n	800a1b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a194:	205c      	movs	r0, #92	; 0x5c
 800a196:	f001 fbf7 	bl	800b988 <pvPortMalloc>
 800a19a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d003      	beq.n	800a1aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	631a      	str	r2, [r3, #48]	; 0x30
 800a1a8:	e005      	b.n	800a1b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a1aa:	6978      	ldr	r0, [r7, #20]
 800a1ac:	f001 fcb8 	bl	800bb20 <vPortFree>
 800a1b0:	e001      	b.n	800a1b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d017      	beq.n	800a1ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a1c4:	88fa      	ldrh	r2, [r7, #6]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9303      	str	r3, [sp, #12]
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	9302      	str	r3, [sp, #8]
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1d0:	9301      	str	r3, [sp, #4]
 800a1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	68f8      	ldr	r0, [r7, #12]
 800a1dc:	f000 f80e 	bl	800a1fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a1e0:	69f8      	ldr	r0, [r7, #28]
 800a1e2:	f000 f89b 	bl	800a31c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	61bb      	str	r3, [r7, #24]
 800a1ea:	e002      	b.n	800a1f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a1f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a1f2:	69bb      	ldr	r3, [r7, #24]
	}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	3720      	adds	r7, #32
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b088      	sub	sp, #32
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	461a      	mov	r2, r3
 800a214:	21a5      	movs	r1, #165	; 0xa5
 800a216:	f001 fda1 	bl	800bd5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a224:	440b      	add	r3, r1
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4413      	add	r3, r2
 800a22a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	f023 0307 	bic.w	r3, r3, #7
 800a232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	f003 0307 	and.w	r3, r3, #7
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a23e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a242:	f383 8811 	msr	BASEPRI, r3
 800a246:	f3bf 8f6f 	isb	sy
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	617b      	str	r3, [r7, #20]
}
 800a250:	bf00      	nop
 800a252:	e7fe      	b.n	800a252 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d01f      	beq.n	800a29a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a25a:	2300      	movs	r3, #0
 800a25c:	61fb      	str	r3, [r7, #28]
 800a25e:	e012      	b.n	800a286 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	7819      	ldrb	r1, [r3, #0]
 800a268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a26a:	69fb      	ldr	r3, [r7, #28]
 800a26c:	4413      	add	r3, r2
 800a26e:	3334      	adds	r3, #52	; 0x34
 800a270:	460a      	mov	r2, r1
 800a272:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	4413      	add	r3, r2
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d006      	beq.n	800a28e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	3301      	adds	r3, #1
 800a284:	61fb      	str	r3, [r7, #28]
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d9e9      	bls.n	800a260 <prvInitialiseNewTask+0x64>
 800a28c:	e000      	b.n	800a290 <prvInitialiseNewTask+0x94>
			{
				break;
 800a28e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a292:	2200      	movs	r2, #0
 800a294:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a298:	e003      	b.n	800a2a2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29c:	2200      	movs	r2, #0
 800a29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a4:	2b37      	cmp	r3, #55	; 0x37
 800a2a6:	d901      	bls.n	800a2ac <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a2a8:	2337      	movs	r3, #55	; 0x37
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2b6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	3304      	adds	r3, #4
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff f978 	bl	80095b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ca:	3318      	adds	r3, #24
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff f973 	bl	80095b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	68f9      	ldr	r1, [r7, #12]
 800a2fa:	69b8      	ldr	r0, [r7, #24]
 800a2fc:	f001 f8f4 	bl	800b4e8 <pxPortInitialiseStack>
 800a300:	4602      	mov	r2, r0
 800a302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a304:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d002      	beq.n	800a312 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a30c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a30e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a310:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a312:	bf00      	nop
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a324:	f001 fa0e 	bl	800b744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a328:	4b2d      	ldr	r3, [pc, #180]	; (800a3e0 <prvAddNewTaskToReadyList+0xc4>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	3301      	adds	r3, #1
 800a32e:	4a2c      	ldr	r2, [pc, #176]	; (800a3e0 <prvAddNewTaskToReadyList+0xc4>)
 800a330:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a332:	4b2c      	ldr	r3, [pc, #176]	; (800a3e4 <prvAddNewTaskToReadyList+0xc8>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a33a:	4a2a      	ldr	r2, [pc, #168]	; (800a3e4 <prvAddNewTaskToReadyList+0xc8>)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a340:	4b27      	ldr	r3, [pc, #156]	; (800a3e0 <prvAddNewTaskToReadyList+0xc4>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d110      	bne.n	800a36a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a348:	f000 fbe2 	bl	800ab10 <prvInitialiseTaskLists>
 800a34c:	e00d      	b.n	800a36a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a34e:	4b26      	ldr	r3, [pc, #152]	; (800a3e8 <prvAddNewTaskToReadyList+0xcc>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a356:	4b23      	ldr	r3, [pc, #140]	; (800a3e4 <prvAddNewTaskToReadyList+0xc8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a360:	429a      	cmp	r2, r3
 800a362:	d802      	bhi.n	800a36a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a364:	4a1f      	ldr	r2, [pc, #124]	; (800a3e4 <prvAddNewTaskToReadyList+0xc8>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a36a:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <prvAddNewTaskToReadyList+0xd0>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	3301      	adds	r3, #1
 800a370:	4a1e      	ldr	r2, [pc, #120]	; (800a3ec <prvAddNewTaskToReadyList+0xd0>)
 800a372:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a374:	4b1d      	ldr	r3, [pc, #116]	; (800a3ec <prvAddNewTaskToReadyList+0xd0>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a380:	4b1b      	ldr	r3, [pc, #108]	; (800a3f0 <prvAddNewTaskToReadyList+0xd4>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d903      	bls.n	800a390 <prvAddNewTaskToReadyList+0x74>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a38c:	4a18      	ldr	r2, [pc, #96]	; (800a3f0 <prvAddNewTaskToReadyList+0xd4>)
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4a15      	ldr	r2, [pc, #84]	; (800a3f4 <prvAddNewTaskToReadyList+0xd8>)
 800a39e:	441a      	add	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f7ff f913 	bl	80095d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a3ac:	f001 f9fa 	bl	800b7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a3b0:	4b0d      	ldr	r3, [pc, #52]	; (800a3e8 <prvAddNewTaskToReadyList+0xcc>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00e      	beq.n	800a3d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a3b8:	4b0a      	ldr	r3, [pc, #40]	; (800a3e4 <prvAddNewTaskToReadyList+0xc8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d207      	bcs.n	800a3d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a3c6:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <prvAddNewTaskToReadyList+0xdc>)
 800a3c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3cc:	601a      	str	r2, [r3, #0]
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	240013c4 	.word	0x240013c4
 800a3e4:	24000ef0 	.word	0x24000ef0
 800a3e8:	240013d0 	.word	0x240013d0
 800a3ec:	240013e0 	.word	0x240013e0
 800a3f0:	240013cc 	.word	0x240013cc
 800a3f4:	24000ef4 	.word	0x24000ef4
 800a3f8:	e000ed04 	.word	0xe000ed04

0800a3fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b08a      	sub	sp, #40	; 0x28
 800a400:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a406:	2300      	movs	r3, #0
 800a408:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a40a:	463a      	mov	r2, r7
 800a40c:	1d39      	adds	r1, r7, #4
 800a40e:	f107 0308 	add.w	r3, r7, #8
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff f87c 	bl	8009510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a418:	6839      	ldr	r1, [r7, #0]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	68ba      	ldr	r2, [r7, #8]
 800a41e:	9202      	str	r2, [sp, #8]
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	2300      	movs	r3, #0
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	2300      	movs	r3, #0
 800a428:	460a      	mov	r2, r1
 800a42a:	4921      	ldr	r1, [pc, #132]	; (800a4b0 <vTaskStartScheduler+0xb4>)
 800a42c:	4821      	ldr	r0, [pc, #132]	; (800a4b4 <vTaskStartScheduler+0xb8>)
 800a42e:	f7ff fe43 	bl	800a0b8 <xTaskCreateStatic>
 800a432:	4603      	mov	r3, r0
 800a434:	4a20      	ldr	r2, [pc, #128]	; (800a4b8 <vTaskStartScheduler+0xbc>)
 800a436:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a438:	4b1f      	ldr	r3, [pc, #124]	; (800a4b8 <vTaskStartScheduler+0xbc>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d002      	beq.n	800a446 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a440:	2301      	movs	r3, #1
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e001      	b.n	800a44a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d102      	bne.n	800a456 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a450:	f000 fcfc 	bl	800ae4c <xTimerCreateTimerTask>
 800a454:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d116      	bne.n	800a48a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	f383 8811 	msr	BASEPRI, r3
 800a464:	f3bf 8f6f 	isb	sy
 800a468:	f3bf 8f4f 	dsb	sy
 800a46c:	613b      	str	r3, [r7, #16]
}
 800a46e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a470:	4b12      	ldr	r3, [pc, #72]	; (800a4bc <vTaskStartScheduler+0xc0>)
 800a472:	f04f 32ff 	mov.w	r2, #4294967295
 800a476:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a478:	4b11      	ldr	r3, [pc, #68]	; (800a4c0 <vTaskStartScheduler+0xc4>)
 800a47a:	2201      	movs	r2, #1
 800a47c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a47e:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <vTaskStartScheduler+0xc8>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a484:	f001 f8bc 	bl	800b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a488:	e00e      	b.n	800a4a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a490:	d10a      	bne.n	800a4a8 <vTaskStartScheduler+0xac>
	__asm volatile
 800a492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a496:	f383 8811 	msr	BASEPRI, r3
 800a49a:	f3bf 8f6f 	isb	sy
 800a49e:	f3bf 8f4f 	dsb	sy
 800a4a2:	60fb      	str	r3, [r7, #12]
}
 800a4a4:	bf00      	nop
 800a4a6:	e7fe      	b.n	800a4a6 <vTaskStartScheduler+0xaa>
}
 800a4a8:	bf00      	nop
 800a4aa:	3718      	adds	r7, #24
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}
 800a4b0:	0800bdf4 	.word	0x0800bdf4
 800a4b4:	0800aae1 	.word	0x0800aae1
 800a4b8:	240013e8 	.word	0x240013e8
 800a4bc:	240013e4 	.word	0x240013e4
 800a4c0:	240013d0 	.word	0x240013d0
 800a4c4:	240013c8 	.word	0x240013c8

0800a4c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <vTaskSuspendAll+0x18>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	4a03      	ldr	r2, [pc, #12]	; (800a4e0 <vTaskSuspendAll+0x18>)
 800a4d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a4d6:	bf00      	nop
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	240013ec 	.word	0x240013ec

0800a4e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4f2:	4b42      	ldr	r3, [pc, #264]	; (800a5fc <xTaskResumeAll+0x118>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d10a      	bne.n	800a510 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	603b      	str	r3, [r7, #0]
}
 800a50c:	bf00      	nop
 800a50e:	e7fe      	b.n	800a50e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a510:	f001 f918 	bl	800b744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a514:	4b39      	ldr	r3, [pc, #228]	; (800a5fc <xTaskResumeAll+0x118>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	3b01      	subs	r3, #1
 800a51a:	4a38      	ldr	r2, [pc, #224]	; (800a5fc <xTaskResumeAll+0x118>)
 800a51c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a51e:	4b37      	ldr	r3, [pc, #220]	; (800a5fc <xTaskResumeAll+0x118>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d162      	bne.n	800a5ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a526:	4b36      	ldr	r3, [pc, #216]	; (800a600 <xTaskResumeAll+0x11c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d05e      	beq.n	800a5ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a52e:	e02f      	b.n	800a590 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a530:	4b34      	ldr	r3, [pc, #208]	; (800a604 <xTaskResumeAll+0x120>)
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3318      	adds	r3, #24
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7ff f8a5 	bl	800968c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	3304      	adds	r3, #4
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff f8a0 	bl	800968c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a550:	4b2d      	ldr	r3, [pc, #180]	; (800a608 <xTaskResumeAll+0x124>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	429a      	cmp	r2, r3
 800a556:	d903      	bls.n	800a560 <xTaskResumeAll+0x7c>
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	4a2a      	ldr	r2, [pc, #168]	; (800a608 <xTaskResumeAll+0x124>)
 800a55e:	6013      	str	r3, [r2, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4a27      	ldr	r2, [pc, #156]	; (800a60c <xTaskResumeAll+0x128>)
 800a56e:	441a      	add	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3304      	adds	r3, #4
 800a574:	4619      	mov	r1, r3
 800a576:	4610      	mov	r0, r2
 800a578:	f7ff f82b 	bl	80095d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a580:	4b23      	ldr	r3, [pc, #140]	; (800a610 <xTaskResumeAll+0x12c>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a586:	429a      	cmp	r2, r3
 800a588:	d302      	bcc.n	800a590 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a58a:	4b22      	ldr	r3, [pc, #136]	; (800a614 <xTaskResumeAll+0x130>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a590:	4b1c      	ldr	r3, [pc, #112]	; (800a604 <xTaskResumeAll+0x120>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1cb      	bne.n	800a530 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d001      	beq.n	800a5a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a59e:	f000 fb55 	bl	800ac4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a5a2:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <xTaskResumeAll+0x134>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d010      	beq.n	800a5d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a5ae:	f000 f847 	bl	800a640 <xTaskIncrementTick>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a5b8:	4b16      	ldr	r3, [pc, #88]	; (800a614 <xTaskResumeAll+0x130>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1f1      	bne.n	800a5ae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a5ca:	4b13      	ldr	r3, [pc, #76]	; (800a618 <xTaskResumeAll+0x134>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a5d0:	4b10      	ldr	r3, [pc, #64]	; (800a614 <xTaskResumeAll+0x130>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d009      	beq.n	800a5ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <xTaskResumeAll+0x138>)
 800a5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5ec:	f001 f8da 	bl	800b7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	240013ec 	.word	0x240013ec
 800a600:	240013c4 	.word	0x240013c4
 800a604:	24001384 	.word	0x24001384
 800a608:	240013cc 	.word	0x240013cc
 800a60c:	24000ef4 	.word	0x24000ef4
 800a610:	24000ef0 	.word	0x24000ef0
 800a614:	240013d8 	.word	0x240013d8
 800a618:	240013d4 	.word	0x240013d4
 800a61c:	e000ed04 	.word	0xe000ed04

0800a620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a626:	4b05      	ldr	r3, [pc, #20]	; (800a63c <xTaskGetTickCount+0x1c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a62c:	687b      	ldr	r3, [r7, #4]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	370c      	adds	r7, #12
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	240013c8 	.word	0x240013c8

0800a640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b086      	sub	sp, #24
 800a644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a646:	2300      	movs	r3, #0
 800a648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a64a:	4b4f      	ldr	r3, [pc, #316]	; (800a788 <xTaskIncrementTick+0x148>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f040 808f 	bne.w	800a772 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a654:	4b4d      	ldr	r3, [pc, #308]	; (800a78c <xTaskIncrementTick+0x14c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	3301      	adds	r3, #1
 800a65a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a65c:	4a4b      	ldr	r2, [pc, #300]	; (800a78c <xTaskIncrementTick+0x14c>)
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d120      	bne.n	800a6aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a668:	4b49      	ldr	r3, [pc, #292]	; (800a790 <xTaskIncrementTick+0x150>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00a      	beq.n	800a688 <xTaskIncrementTick+0x48>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	603b      	str	r3, [r7, #0]
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xTaskIncrementTick+0x46>
 800a688:	4b41      	ldr	r3, [pc, #260]	; (800a790 <xTaskIncrementTick+0x150>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	60fb      	str	r3, [r7, #12]
 800a68e:	4b41      	ldr	r3, [pc, #260]	; (800a794 <xTaskIncrementTick+0x154>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a3f      	ldr	r2, [pc, #252]	; (800a790 <xTaskIncrementTick+0x150>)
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	4a3f      	ldr	r2, [pc, #252]	; (800a794 <xTaskIncrementTick+0x154>)
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6013      	str	r3, [r2, #0]
 800a69c:	4b3e      	ldr	r3, [pc, #248]	; (800a798 <xTaskIncrementTick+0x158>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	4a3d      	ldr	r2, [pc, #244]	; (800a798 <xTaskIncrementTick+0x158>)
 800a6a4:	6013      	str	r3, [r2, #0]
 800a6a6:	f000 fad1 	bl	800ac4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a6aa:	4b3c      	ldr	r3, [pc, #240]	; (800a79c <xTaskIncrementTick+0x15c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	693a      	ldr	r2, [r7, #16]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d349      	bcc.n	800a748 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6b4:	4b36      	ldr	r3, [pc, #216]	; (800a790 <xTaskIncrementTick+0x150>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6be:	4b37      	ldr	r3, [pc, #220]	; (800a79c <xTaskIncrementTick+0x15c>)
 800a6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c4:	601a      	str	r2, [r3, #0]
					break;
 800a6c6:	e03f      	b.n	800a748 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6c8:	4b31      	ldr	r3, [pc, #196]	; (800a790 <xTaskIncrementTick+0x150>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6d8:	693a      	ldr	r2, [r7, #16]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d203      	bcs.n	800a6e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6e0:	4a2e      	ldr	r2, [pc, #184]	; (800a79c <xTaskIncrementTick+0x15c>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a6e6:	e02f      	b.n	800a748 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	3304      	adds	r3, #4
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7fe ffcd 	bl	800968c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d004      	beq.n	800a704 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	3318      	adds	r3, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fe ffc4 	bl	800968c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a708:	4b25      	ldr	r3, [pc, #148]	; (800a7a0 <xTaskIncrementTick+0x160>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d903      	bls.n	800a718 <xTaskIncrementTick+0xd8>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a714:	4a22      	ldr	r2, [pc, #136]	; (800a7a0 <xTaskIncrementTick+0x160>)
 800a716:	6013      	str	r3, [r2, #0]
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71c:	4613      	mov	r3, r2
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	4413      	add	r3, r2
 800a722:	009b      	lsls	r3, r3, #2
 800a724:	4a1f      	ldr	r2, [pc, #124]	; (800a7a4 <xTaskIncrementTick+0x164>)
 800a726:	441a      	add	r2, r3
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	3304      	adds	r3, #4
 800a72c:	4619      	mov	r1, r3
 800a72e:	4610      	mov	r0, r2
 800a730:	f7fe ff4f 	bl	80095d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a738:	4b1b      	ldr	r3, [pc, #108]	; (800a7a8 <xTaskIncrementTick+0x168>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	429a      	cmp	r2, r3
 800a740:	d3b8      	bcc.n	800a6b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a742:	2301      	movs	r3, #1
 800a744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a746:	e7b5      	b.n	800a6b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a748:	4b17      	ldr	r3, [pc, #92]	; (800a7a8 <xTaskIncrementTick+0x168>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74e:	4915      	ldr	r1, [pc, #84]	; (800a7a4 <xTaskIncrementTick+0x164>)
 800a750:	4613      	mov	r3, r2
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	440b      	add	r3, r1
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d901      	bls.n	800a764 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a760:	2301      	movs	r3, #1
 800a762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a764:	4b11      	ldr	r3, [pc, #68]	; (800a7ac <xTaskIncrementTick+0x16c>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d007      	beq.n	800a77c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a76c:	2301      	movs	r3, #1
 800a76e:	617b      	str	r3, [r7, #20]
 800a770:	e004      	b.n	800a77c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a772:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <xTaskIncrementTick+0x170>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	3301      	adds	r3, #1
 800a778:	4a0d      	ldr	r2, [pc, #52]	; (800a7b0 <xTaskIncrementTick+0x170>)
 800a77a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a77c:	697b      	ldr	r3, [r7, #20]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	240013ec 	.word	0x240013ec
 800a78c:	240013c8 	.word	0x240013c8
 800a790:	2400137c 	.word	0x2400137c
 800a794:	24001380 	.word	0x24001380
 800a798:	240013dc 	.word	0x240013dc
 800a79c:	240013e4 	.word	0x240013e4
 800a7a0:	240013cc 	.word	0x240013cc
 800a7a4:	24000ef4 	.word	0x24000ef4
 800a7a8:	24000ef0 	.word	0x24000ef0
 800a7ac:	240013d8 	.word	0x240013d8
 800a7b0:	240013d4 	.word	0x240013d4

0800a7b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7ba:	4b28      	ldr	r3, [pc, #160]	; (800a85c <vTaskSwitchContext+0xa8>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d003      	beq.n	800a7ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7c2:	4b27      	ldr	r3, [pc, #156]	; (800a860 <vTaskSwitchContext+0xac>)
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7c8:	e041      	b.n	800a84e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a7ca:	4b25      	ldr	r3, [pc, #148]	; (800a860 <vTaskSwitchContext+0xac>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d0:	4b24      	ldr	r3, [pc, #144]	; (800a864 <vTaskSwitchContext+0xb0>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e010      	b.n	800a7fa <vTaskSwitchContext+0x46>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10a      	bne.n	800a7f4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	607b      	str	r3, [r7, #4]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <vTaskSwitchContext+0x3e>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	491b      	ldr	r1, [pc, #108]	; (800a868 <vTaskSwitchContext+0xb4>)
 800a7fc:	68fa      	ldr	r2, [r7, #12]
 800a7fe:	4613      	mov	r3, r2
 800a800:	009b      	lsls	r3, r3, #2
 800a802:	4413      	add	r3, r2
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0e4      	beq.n	800a7d8 <vTaskSwitchContext+0x24>
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	4613      	mov	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4413      	add	r3, r2
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4a13      	ldr	r2, [pc, #76]	; (800a868 <vTaskSwitchContext+0xb4>)
 800a81a:	4413      	add	r3, r2
 800a81c:	60bb      	str	r3, [r7, #8]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	605a      	str	r2, [r3, #4]
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	3308      	adds	r3, #8
 800a830:	429a      	cmp	r2, r3
 800a832:	d104      	bne.n	800a83e <vTaskSwitchContext+0x8a>
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	685a      	ldr	r2, [r3, #4]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	605a      	str	r2, [r3, #4]
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	4a09      	ldr	r2, [pc, #36]	; (800a86c <vTaskSwitchContext+0xb8>)
 800a846:	6013      	str	r3, [r2, #0]
 800a848:	4a06      	ldr	r2, [pc, #24]	; (800a864 <vTaskSwitchContext+0xb0>)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	6013      	str	r3, [r2, #0]
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	240013ec 	.word	0x240013ec
 800a860:	240013d8 	.word	0x240013d8
 800a864:	240013cc 	.word	0x240013cc
 800a868:	24000ef4 	.word	0x24000ef4
 800a86c:	24000ef0 	.word	0x24000ef0

0800a870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60fb      	str	r3, [r7, #12]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a896:	4b07      	ldr	r3, [pc, #28]	; (800a8b4 <vTaskPlaceOnEventList+0x44>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	3318      	adds	r3, #24
 800a89c:	4619      	mov	r1, r3
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7fe febb 	bl	800961a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	6838      	ldr	r0, [r7, #0]
 800a8a8:	f000 fa7c 	bl	800ada4 <prvAddCurrentTaskToDelayedList>
}
 800a8ac:	bf00      	nop
 800a8ae:	3710      	adds	r7, #16
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}
 800a8b4:	24000ef0 	.word	0x24000ef0

0800a8b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b086      	sub	sp, #24
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	60f8      	str	r0, [r7, #12]
 800a8c0:	60b9      	str	r1, [r7, #8]
 800a8c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	617b      	str	r3, [r7, #20]
}
 800a8dc:	bf00      	nop
 800a8de:	e7fe      	b.n	800a8de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8e0:	4b0a      	ldr	r3, [pc, #40]	; (800a90c <vTaskPlaceOnEventListRestricted+0x54>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	3318      	adds	r3, #24
 800a8e6:	4619      	mov	r1, r3
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7fe fe72 	bl	80095d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d002      	beq.n	800a8fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8fa:	6879      	ldr	r1, [r7, #4]
 800a8fc:	68b8      	ldr	r0, [r7, #8]
 800a8fe:	f000 fa51 	bl	800ada4 <prvAddCurrentTaskToDelayedList>
	}
 800a902:	bf00      	nop
 800a904:	3718      	adds	r7, #24
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	24000ef0 	.word	0x24000ef0

0800a910 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	68db      	ldr	r3, [r3, #12]
 800a91e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10a      	bne.n	800a93c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	60fb      	str	r3, [r7, #12]
}
 800a938:	bf00      	nop
 800a93a:	e7fe      	b.n	800a93a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	3318      	adds	r3, #24
 800a940:	4618      	mov	r0, r3
 800a942:	f7fe fea3 	bl	800968c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a946:	4b1e      	ldr	r3, [pc, #120]	; (800a9c0 <xTaskRemoveFromEventList+0xb0>)
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d11d      	bne.n	800a98a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	3304      	adds	r3, #4
 800a952:	4618      	mov	r0, r3
 800a954:	f7fe fe9a 	bl	800968c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95c:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <xTaskRemoveFromEventList+0xb4>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d903      	bls.n	800a96c <xTaskRemoveFromEventList+0x5c>
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	4a16      	ldr	r2, [pc, #88]	; (800a9c4 <xTaskRemoveFromEventList+0xb4>)
 800a96a:	6013      	str	r3, [r2, #0]
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a970:	4613      	mov	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4a13      	ldr	r2, [pc, #76]	; (800a9c8 <xTaskRemoveFromEventList+0xb8>)
 800a97a:	441a      	add	r2, r3
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	3304      	adds	r3, #4
 800a980:	4619      	mov	r1, r3
 800a982:	4610      	mov	r0, r2
 800a984:	f7fe fe25 	bl	80095d2 <vListInsertEnd>
 800a988:	e005      	b.n	800a996 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	3318      	adds	r3, #24
 800a98e:	4619      	mov	r1, r3
 800a990:	480e      	ldr	r0, [pc, #56]	; (800a9cc <xTaskRemoveFromEventList+0xbc>)
 800a992:	f7fe fe1e 	bl	80095d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a99a:	4b0d      	ldr	r3, [pc, #52]	; (800a9d0 <xTaskRemoveFromEventList+0xc0>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d905      	bls.n	800a9b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a9a8:	4b0a      	ldr	r3, [pc, #40]	; (800a9d4 <xTaskRemoveFromEventList+0xc4>)
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	e001      	b.n	800a9b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a9b4:	697b      	ldr	r3, [r7, #20]
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	240013ec 	.word	0x240013ec
 800a9c4:	240013cc 	.word	0x240013cc
 800a9c8:	24000ef4 	.word	0x24000ef4
 800a9cc:	24001384 	.word	0x24001384
 800a9d0:	24000ef0 	.word	0x24000ef0
 800a9d4:	240013d8 	.word	0x240013d8

0800a9d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9e0:	4b06      	ldr	r3, [pc, #24]	; (800a9fc <vTaskInternalSetTimeOutState+0x24>)
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9e8:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <vTaskInternalSetTimeOutState+0x28>)
 800a9ea:	681a      	ldr	r2, [r3, #0]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	605a      	str	r2, [r3, #4]
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr
 800a9fc:	240013dc 	.word	0x240013dc
 800aa00:	240013c8 	.word	0x240013c8

0800aa04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b088      	sub	sp, #32
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	613b      	str	r3, [r7, #16]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	60fb      	str	r3, [r7, #12]
}
 800aa42:	bf00      	nop
 800aa44:	e7fe      	b.n	800aa44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aa46:	f000 fe7d 	bl	800b744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa4a:	4b1d      	ldr	r3, [pc, #116]	; (800aac0 <xTaskCheckForTimeOut+0xbc>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	1ad3      	subs	r3, r2, r3
 800aa58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	d102      	bne.n	800aa6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa64:	2300      	movs	r3, #0
 800aa66:	61fb      	str	r3, [r7, #28]
 800aa68:	e023      	b.n	800aab2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b15      	ldr	r3, [pc, #84]	; (800aac4 <xTaskCheckForTimeOut+0xc0>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d007      	beq.n	800aa86 <xTaskCheckForTimeOut+0x82>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	69ba      	ldr	r2, [r7, #24]
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d302      	bcc.n	800aa86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa80:	2301      	movs	r3, #1
 800aa82:	61fb      	str	r3, [r7, #28]
 800aa84:	e015      	b.n	800aab2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	697a      	ldr	r2, [r7, #20]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d20b      	bcs.n	800aaa8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	697b      	ldr	r3, [r7, #20]
 800aa96:	1ad2      	subs	r2, r2, r3
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ff9b 	bl	800a9d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	61fb      	str	r3, [r7, #28]
 800aaa6:	e004      	b.n	800aab2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aaae:	2301      	movs	r3, #1
 800aab0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aab2:	f000 fe77 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800aab6:	69fb      	ldr	r3, [r7, #28]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3720      	adds	r7, #32
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	240013c8 	.word	0x240013c8
 800aac4:	240013dc 	.word	0x240013dc

0800aac8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aac8:	b480      	push	{r7}
 800aaca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aacc:	4b03      	ldr	r3, [pc, #12]	; (800aadc <vTaskMissedYield+0x14>)
 800aace:	2201      	movs	r2, #1
 800aad0:	601a      	str	r2, [r3, #0]
}
 800aad2:	bf00      	nop
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	240013d8 	.word	0x240013d8

0800aae0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b082      	sub	sp, #8
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aae8:	f000 f852 	bl	800ab90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aaec:	4b06      	ldr	r3, [pc, #24]	; (800ab08 <prvIdleTask+0x28>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d9f9      	bls.n	800aae8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaf4:	4b05      	ldr	r3, [pc, #20]	; (800ab0c <prvIdleTask+0x2c>)
 800aaf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafa:	601a      	str	r2, [r3, #0]
 800aafc:	f3bf 8f4f 	dsb	sy
 800ab00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab04:	e7f0      	b.n	800aae8 <prvIdleTask+0x8>
 800ab06:	bf00      	nop
 800ab08:	24000ef4 	.word	0x24000ef4
 800ab0c:	e000ed04 	.word	0xe000ed04

0800ab10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab16:	2300      	movs	r3, #0
 800ab18:	607b      	str	r3, [r7, #4]
 800ab1a:	e00c      	b.n	800ab36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	4a12      	ldr	r2, [pc, #72]	; (800ab70 <prvInitialiseTaskLists+0x60>)
 800ab28:	4413      	add	r3, r2
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7fe fd24 	bl	8009578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	3301      	adds	r3, #1
 800ab34:	607b      	str	r3, [r7, #4]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2b37      	cmp	r3, #55	; 0x37
 800ab3a:	d9ef      	bls.n	800ab1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab3c:	480d      	ldr	r0, [pc, #52]	; (800ab74 <prvInitialiseTaskLists+0x64>)
 800ab3e:	f7fe fd1b 	bl	8009578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab42:	480d      	ldr	r0, [pc, #52]	; (800ab78 <prvInitialiseTaskLists+0x68>)
 800ab44:	f7fe fd18 	bl	8009578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab48:	480c      	ldr	r0, [pc, #48]	; (800ab7c <prvInitialiseTaskLists+0x6c>)
 800ab4a:	f7fe fd15 	bl	8009578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab4e:	480c      	ldr	r0, [pc, #48]	; (800ab80 <prvInitialiseTaskLists+0x70>)
 800ab50:	f7fe fd12 	bl	8009578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab54:	480b      	ldr	r0, [pc, #44]	; (800ab84 <prvInitialiseTaskLists+0x74>)
 800ab56:	f7fe fd0f 	bl	8009578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <prvInitialiseTaskLists+0x78>)
 800ab5c:	4a05      	ldr	r2, [pc, #20]	; (800ab74 <prvInitialiseTaskLists+0x64>)
 800ab5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab60:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <prvInitialiseTaskLists+0x7c>)
 800ab62:	4a05      	ldr	r2, [pc, #20]	; (800ab78 <prvInitialiseTaskLists+0x68>)
 800ab64:	601a      	str	r2, [r3, #0]
}
 800ab66:	bf00      	nop
 800ab68:	3708      	adds	r7, #8
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}
 800ab6e:	bf00      	nop
 800ab70:	24000ef4 	.word	0x24000ef4
 800ab74:	24001354 	.word	0x24001354
 800ab78:	24001368 	.word	0x24001368
 800ab7c:	24001384 	.word	0x24001384
 800ab80:	24001398 	.word	0x24001398
 800ab84:	240013b0 	.word	0x240013b0
 800ab88:	2400137c 	.word	0x2400137c
 800ab8c:	24001380 	.word	0x24001380

0800ab90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab96:	e019      	b.n	800abcc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab98:	f000 fdd4 	bl	800b744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab9c:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <prvCheckTasksWaitingTermination+0x50>)
 800ab9e:	68db      	ldr	r3, [r3, #12]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	3304      	adds	r3, #4
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fe fd6f 	bl	800968c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800abae:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <prvCheckTasksWaitingTermination+0x54>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	4a0b      	ldr	r2, [pc, #44]	; (800abe4 <prvCheckTasksWaitingTermination+0x54>)
 800abb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abb8:	4b0b      	ldr	r3, [pc, #44]	; (800abe8 <prvCheckTasksWaitingTermination+0x58>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3b01      	subs	r3, #1
 800abbe:	4a0a      	ldr	r2, [pc, #40]	; (800abe8 <prvCheckTasksWaitingTermination+0x58>)
 800abc0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abc2:	f000 fdef 	bl	800b7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 f810 	bl	800abec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <prvCheckTasksWaitingTermination+0x58>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d1e1      	bne.n	800ab98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	24001398 	.word	0x24001398
 800abe4:	240013c4 	.word	0x240013c4
 800abe8:	240013ac 	.word	0x240013ac

0800abec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d108      	bne.n	800ac10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 ff8c 	bl	800bb20 <vPortFree>
				vPortFree( pxTCB );
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 ff89 	bl	800bb20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac0e:	e018      	b.n	800ac42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d103      	bne.n	800ac22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 ff80 	bl	800bb20 <vPortFree>
	}
 800ac20:	e00f      	b.n	800ac42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d00a      	beq.n	800ac42 <prvDeleteTCB+0x56>
	__asm volatile
 800ac2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	60fb      	str	r3, [r7, #12]
}
 800ac3e:	bf00      	nop
 800ac40:	e7fe      	b.n	800ac40 <prvDeleteTCB+0x54>
	}
 800ac42:	bf00      	nop
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac52:	4b0c      	ldr	r3, [pc, #48]	; (800ac84 <prvResetNextTaskUnblockTime+0x38>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d104      	bne.n	800ac66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac5c:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <prvResetNextTaskUnblockTime+0x3c>)
 800ac5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac64:	e008      	b.n	800ac78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac66:	4b07      	ldr	r3, [pc, #28]	; (800ac84 <prvResetNextTaskUnblockTime+0x38>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4a04      	ldr	r2, [pc, #16]	; (800ac88 <prvResetNextTaskUnblockTime+0x3c>)
 800ac76:	6013      	str	r3, [r2, #0]
}
 800ac78:	bf00      	nop
 800ac7a:	370c      	adds	r7, #12
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	2400137c 	.word	0x2400137c
 800ac88:	240013e4 	.word	0x240013e4

0800ac8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac92:	4b0b      	ldr	r3, [pc, #44]	; (800acc0 <xTaskGetSchedulerState+0x34>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	607b      	str	r3, [r7, #4]
 800ac9e:	e008      	b.n	800acb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca0:	4b08      	ldr	r3, [pc, #32]	; (800acc4 <xTaskGetSchedulerState+0x38>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aca8:	2302      	movs	r3, #2
 800acaa:	607b      	str	r3, [r7, #4]
 800acac:	e001      	b.n	800acb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800acae:	2300      	movs	r3, #0
 800acb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800acb2:	687b      	ldr	r3, [r7, #4]
	}
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr
 800acc0:	240013d0 	.word	0x240013d0
 800acc4:	240013ec 	.word	0x240013ec

0800acc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800acd4:	2300      	movs	r3, #0
 800acd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d056      	beq.n	800ad8c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800acde:	4b2e      	ldr	r3, [pc, #184]	; (800ad98 <xTaskPriorityDisinherit+0xd0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	693a      	ldr	r2, [r7, #16]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d00a      	beq.n	800acfe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ace8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acec:	f383 8811 	msr	BASEPRI, r3
 800acf0:	f3bf 8f6f 	isb	sy
 800acf4:	f3bf 8f4f 	dsb	sy
 800acf8:	60fb      	str	r3, [r7, #12]
}
 800acfa:	bf00      	nop
 800acfc:	e7fe      	b.n	800acfc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	60bb      	str	r3, [r7, #8]
}
 800ad18:	bf00      	nop
 800ad1a:	e7fe      	b.n	800ad1a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad20:	1e5a      	subs	r2, r3, #1
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d02c      	beq.n	800ad8c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d128      	bne.n	800ad8c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7fe fca4 	bl	800968c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad50:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5c:	4b0f      	ldr	r3, [pc, #60]	; (800ad9c <xTaskPriorityDisinherit+0xd4>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d903      	bls.n	800ad6c <xTaskPriorityDisinherit+0xa4>
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad68:	4a0c      	ldr	r2, [pc, #48]	; (800ad9c <xTaskPriorityDisinherit+0xd4>)
 800ad6a:	6013      	str	r3, [r2, #0]
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad70:	4613      	mov	r3, r2
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4a09      	ldr	r2, [pc, #36]	; (800ada0 <xTaskPriorityDisinherit+0xd8>)
 800ad7a:	441a      	add	r2, r3
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	3304      	adds	r3, #4
 800ad80:	4619      	mov	r1, r3
 800ad82:	4610      	mov	r0, r2
 800ad84:	f7fe fc25 	bl	80095d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad8c:	697b      	ldr	r3, [r7, #20]
	}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	24000ef0 	.word	0x24000ef0
 800ad9c:	240013cc 	.word	0x240013cc
 800ada0:	24000ef4 	.word	0x24000ef4

0800ada4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adae:	4b21      	ldr	r3, [pc, #132]	; (800ae34 <prvAddCurrentTaskToDelayedList+0x90>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb4:	4b20      	ldr	r3, [pc, #128]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x94>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3304      	adds	r3, #4
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fc66 	bl	800968c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adc6:	d10a      	bne.n	800adde <prvAddCurrentTaskToDelayedList+0x3a>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d007      	beq.n	800adde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adce:	4b1a      	ldr	r3, [pc, #104]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x94>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3304      	adds	r3, #4
 800add4:	4619      	mov	r1, r3
 800add6:	4819      	ldr	r0, [pc, #100]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x98>)
 800add8:	f7fe fbfb 	bl	80095d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800addc:	e026      	b.n	800ae2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ade6:	4b14      	ldr	r3, [pc, #80]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x94>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d209      	bcs.n	800ae0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adf6:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b0f      	ldr	r3, [pc, #60]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x94>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3304      	adds	r3, #4
 800ae00:	4619      	mov	r1, r3
 800ae02:	4610      	mov	r0, r2
 800ae04:	f7fe fc09 	bl	800961a <vListInsert>
}
 800ae08:	e010      	b.n	800ae2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae0a:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x94>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	3304      	adds	r3, #4
 800ae14:	4619      	mov	r1, r3
 800ae16:	4610      	mov	r0, r2
 800ae18:	f7fe fbff 	bl	800961a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d202      	bcs.n	800ae2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae26:	4a08      	ldr	r2, [pc, #32]	; (800ae48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	6013      	str	r3, [r2, #0]
}
 800ae2c:	bf00      	nop
 800ae2e:	3710      	adds	r7, #16
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	240013c8 	.word	0x240013c8
 800ae38:	24000ef0 	.word	0x24000ef0
 800ae3c:	240013b0 	.word	0x240013b0
 800ae40:	24001380 	.word	0x24001380
 800ae44:	2400137c 	.word	0x2400137c
 800ae48:	240013e4 	.word	0x240013e4

0800ae4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b08a      	sub	sp, #40	; 0x28
 800ae50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae56:	f000 fb07 	bl	800b468 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae5a:	4b1c      	ldr	r3, [pc, #112]	; (800aecc <xTimerCreateTimerTask+0x80>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d021      	beq.n	800aea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae62:	2300      	movs	r3, #0
 800ae64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae6a:	1d3a      	adds	r2, r7, #4
 800ae6c:	f107 0108 	add.w	r1, r7, #8
 800ae70:	f107 030c 	add.w	r3, r7, #12
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fb65 	bl	8009544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	9202      	str	r2, [sp, #8]
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	2302      	movs	r3, #2
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	460a      	mov	r2, r1
 800ae8c:	4910      	ldr	r1, [pc, #64]	; (800aed0 <xTimerCreateTimerTask+0x84>)
 800ae8e:	4811      	ldr	r0, [pc, #68]	; (800aed4 <xTimerCreateTimerTask+0x88>)
 800ae90:	f7ff f912 	bl	800a0b8 <xTaskCreateStatic>
 800ae94:	4603      	mov	r3, r0
 800ae96:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <xTimerCreateTimerTask+0x8c>)
 800ae98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae9a:	4b0f      	ldr	r3, [pc, #60]	; (800aed8 <xTimerCreateTimerTask+0x8c>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aea2:	2301      	movs	r3, #1
 800aea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	613b      	str	r3, [r7, #16]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aec2:	697b      	ldr	r3, [r7, #20]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	24001420 	.word	0x24001420
 800aed0:	0800bdfc 	.word	0x0800bdfc
 800aed4:	0800b011 	.word	0x0800b011
 800aed8:	24001424 	.word	0x24001424

0800aedc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08a      	sub	sp, #40	; 0x28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	607a      	str	r2, [r7, #4]
 800aee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d10a      	bne.n	800af0a <xTimerGenericCommand+0x2e>
	__asm volatile
 800aef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef8:	f383 8811 	msr	BASEPRI, r3
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	f3bf 8f4f 	dsb	sy
 800af04:	623b      	str	r3, [r7, #32]
}
 800af06:	bf00      	nop
 800af08:	e7fe      	b.n	800af08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af0a:	4b1a      	ldr	r3, [pc, #104]	; (800af74 <xTimerGenericCommand+0x98>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d02a      	beq.n	800af68 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b05      	cmp	r3, #5
 800af22:	dc18      	bgt.n	800af56 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af24:	f7ff feb2 	bl	800ac8c <xTaskGetSchedulerState>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b02      	cmp	r3, #2
 800af2c:	d109      	bne.n	800af42 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af2e:	4b11      	ldr	r3, [pc, #68]	; (800af74 <xTimerGenericCommand+0x98>)
 800af30:	6818      	ldr	r0, [r3, #0]
 800af32:	f107 0110 	add.w	r1, r7, #16
 800af36:	2300      	movs	r3, #0
 800af38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3a:	f7fe fcd5 	bl	80098e8 <xQueueGenericSend>
 800af3e:	6278      	str	r0, [r7, #36]	; 0x24
 800af40:	e012      	b.n	800af68 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af42:	4b0c      	ldr	r3, [pc, #48]	; (800af74 <xTimerGenericCommand+0x98>)
 800af44:	6818      	ldr	r0, [r3, #0]
 800af46:	f107 0110 	add.w	r1, r7, #16
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	f7fe fccb 	bl	80098e8 <xQueueGenericSend>
 800af52:	6278      	str	r0, [r7, #36]	; 0x24
 800af54:	e008      	b.n	800af68 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af56:	4b07      	ldr	r3, [pc, #28]	; (800af74 <xTimerGenericCommand+0x98>)
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f107 0110 	add.w	r1, r7, #16
 800af5e:	2300      	movs	r3, #0
 800af60:	683a      	ldr	r2, [r7, #0]
 800af62:	f7fe fdbf 	bl	8009ae4 <xQueueGenericSendFromISR>
 800af66:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3728      	adds	r7, #40	; 0x28
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}
 800af72:	bf00      	nop
 800af74:	24001420 	.word	0x24001420

0800af78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af02      	add	r7, sp, #8
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b22      	ldr	r3, [pc, #136]	; (800b00c <prvProcessExpiredTimer+0x94>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	3304      	adds	r3, #4
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fb7b 	bl	800968c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af9c:	f003 0304 	and.w	r3, r3, #4
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d022      	beq.n	800afea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	699a      	ldr	r2, [r3, #24]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	18d1      	adds	r1, r2, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	6978      	ldr	r0, [r7, #20]
 800afb2:	f000 f8d1 	bl	800b158 <prvInsertTimerInActiveList>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d01f      	beq.n	800affc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afbc:	2300      	movs	r3, #0
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	2300      	movs	r3, #0
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	2100      	movs	r1, #0
 800afc6:	6978      	ldr	r0, [r7, #20]
 800afc8:	f7ff ff88 	bl	800aedc <xTimerGenericCommand>
 800afcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d113      	bne.n	800affc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800afd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd8:	f383 8811 	msr	BASEPRI, r3
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	60fb      	str	r3, [r7, #12]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff0:	f023 0301 	bic.w	r3, r3, #1
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	6978      	ldr	r0, [r7, #20]
 800b002:	4798      	blx	r3
}
 800b004:	bf00      	nop
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	24001418 	.word	0x24001418

0800b010 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b018:	f107 0308 	add.w	r3, r7, #8
 800b01c:	4618      	mov	r0, r3
 800b01e:	f000 f857 	bl	800b0d0 <prvGetNextExpireTime>
 800b022:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	4619      	mov	r1, r3
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f803 	bl	800b034 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b02e:	f000 f8d5 	bl	800b1dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b032:	e7f1      	b.n	800b018 <prvTimerTask+0x8>

0800b034 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b084      	sub	sp, #16
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b03e:	f7ff fa43 	bl	800a4c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b042:	f107 0308 	add.w	r3, r7, #8
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f866 	bl	800b118 <prvSampleTimeNow>
 800b04c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d130      	bne.n	800b0b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <prvProcessTimerOrBlockTask+0x3c>
 800b05a:	687a      	ldr	r2, [r7, #4]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d806      	bhi.n	800b070 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b062:	f7ff fa3f 	bl	800a4e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b066:	68f9      	ldr	r1, [r7, #12]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff ff85 	bl	800af78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b06e:	e024      	b.n	800b0ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d008      	beq.n	800b088 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b076:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <prvProcessTimerOrBlockTask+0x90>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <prvProcessTimerOrBlockTask+0x50>
 800b080:	2301      	movs	r3, #1
 800b082:	e000      	b.n	800b086 <prvProcessTimerOrBlockTask+0x52>
 800b084:	2300      	movs	r3, #0
 800b086:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b088:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <prvProcessTimerOrBlockTask+0x94>)
 800b08a:	6818      	ldr	r0, [r3, #0]
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	4619      	mov	r1, r3
 800b096:	f7fe ffdb 	bl	800a050 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b09a:	f7ff fa23 	bl	800a4e4 <xTaskResumeAll>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10a      	bne.n	800b0ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0a4:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <prvProcessTimerOrBlockTask+0x98>)
 800b0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0aa:	601a      	str	r2, [r3, #0]
 800b0ac:	f3bf 8f4f 	dsb	sy
 800b0b0:	f3bf 8f6f 	isb	sy
}
 800b0b4:	e001      	b.n	800b0ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0b6:	f7ff fa15 	bl	800a4e4 <xTaskResumeAll>
}
 800b0ba:	bf00      	nop
 800b0bc:	3710      	adds	r7, #16
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	2400141c 	.word	0x2400141c
 800b0c8:	24001420 	.word	0x24001420
 800b0cc:	e000ed04 	.word	0xe000ed04

0800b0d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b085      	sub	sp, #20
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0d8:	4b0e      	ldr	r3, [pc, #56]	; (800b114 <prvGetNextExpireTime+0x44>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d101      	bne.n	800b0e6 <prvGetNextExpireTime+0x16>
 800b0e2:	2201      	movs	r2, #1
 800b0e4:	e000      	b.n	800b0e8 <prvGetNextExpireTime+0x18>
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d105      	bne.n	800b100 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0f4:	4b07      	ldr	r3, [pc, #28]	; (800b114 <prvGetNextExpireTime+0x44>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	e001      	b.n	800b104 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b104:	68fb      	ldr	r3, [r7, #12]
}
 800b106:	4618      	mov	r0, r3
 800b108:	3714      	adds	r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop
 800b114:	24001418 	.word	0x24001418

0800b118 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b120:	f7ff fa7e 	bl	800a620 <xTaskGetTickCount>
 800b124:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b126:	4b0b      	ldr	r3, [pc, #44]	; (800b154 <prvSampleTimeNow+0x3c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d205      	bcs.n	800b13c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b130:	f000 f936 	bl	800b3a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2201      	movs	r2, #1
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	e002      	b.n	800b142 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b142:	4a04      	ldr	r2, [pc, #16]	; (800b154 <prvSampleTimeNow+0x3c>)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b148:	68fb      	ldr	r3, [r7, #12]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	24001428 	.word	0x24001428

0800b158 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b086      	sub	sp, #24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b176:	68ba      	ldr	r2, [r7, #8]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d812      	bhi.n	800b1a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	1ad2      	subs	r2, r2, r3
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d302      	bcc.n	800b192 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b18c:	2301      	movs	r3, #1
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	e01b      	b.n	800b1ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b192:	4b10      	ldr	r3, [pc, #64]	; (800b1d4 <prvInsertTimerInActiveList+0x7c>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3304      	adds	r3, #4
 800b19a:	4619      	mov	r1, r3
 800b19c:	4610      	mov	r0, r2
 800b19e:	f7fe fa3c 	bl	800961a <vListInsert>
 800b1a2:	e012      	b.n	800b1ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d206      	bcs.n	800b1ba <prvInsertTimerInActiveList+0x62>
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d302      	bcc.n	800b1ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	e007      	b.n	800b1ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1ba:	4b07      	ldr	r3, [pc, #28]	; (800b1d8 <prvInsertTimerInActiveList+0x80>)
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4610      	mov	r0, r2
 800b1c6:	f7fe fa28 	bl	800961a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ca:	697b      	ldr	r3, [r7, #20]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3718      	adds	r7, #24
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	2400141c 	.word	0x2400141c
 800b1d8:	24001418 	.word	0x24001418

0800b1dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b08e      	sub	sp, #56	; 0x38
 800b1e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1e2:	e0ca      	b.n	800b37a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	da18      	bge.n	800b21c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ea:	1d3b      	adds	r3, r7, #4
 800b1ec:	3304      	adds	r3, #4
 800b1ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	61fb      	str	r3, [r7, #28]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b212:	6850      	ldr	r0, [r2, #4]
 800b214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b216:	6892      	ldr	r2, [r2, #8]
 800b218:	4611      	mov	r1, r2
 800b21a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f2c0 80ab 	blt.w	800b37a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	695b      	ldr	r3, [r3, #20]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d004      	beq.n	800b23a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	3304      	adds	r3, #4
 800b234:	4618      	mov	r0, r3
 800b236:	f7fe fa29 	bl	800968c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b23a:	463b      	mov	r3, r7
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff ff6b 	bl	800b118 <prvSampleTimeNow>
 800b242:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b09      	cmp	r3, #9
 800b248:	f200 8096 	bhi.w	800b378 <prvProcessReceivedCommands+0x19c>
 800b24c:	a201      	add	r2, pc, #4	; (adr r2, 800b254 <prvProcessReceivedCommands+0x78>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b27d 	.word	0x0800b27d
 800b258:	0800b27d 	.word	0x0800b27d
 800b25c:	0800b27d 	.word	0x0800b27d
 800b260:	0800b2f1 	.word	0x0800b2f1
 800b264:	0800b305 	.word	0x0800b305
 800b268:	0800b34f 	.word	0x0800b34f
 800b26c:	0800b27d 	.word	0x0800b27d
 800b270:	0800b27d 	.word	0x0800b27d
 800b274:	0800b2f1 	.word	0x0800b2f1
 800b278:	0800b305 	.word	0x0800b305
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b282:	f043 0301 	orr.w	r3, r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b292:	699b      	ldr	r3, [r3, #24]
 800b294:	18d1      	adds	r1, r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b29c:	f7ff ff5c 	bl	800b158 <prvInsertTimerInActiveList>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d069      	beq.n	800b37a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a8:	6a1b      	ldr	r3, [r3, #32]
 800b2aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b4:	f003 0304 	and.w	r3, r3, #4
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d05e      	beq.n	800b37a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2bc:	68ba      	ldr	r2, [r7, #8]
 800b2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c0:	699b      	ldr	r3, [r3, #24]
 800b2c2:	441a      	add	r2, r3
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9300      	str	r3, [sp, #0]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	2100      	movs	r1, #0
 800b2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ce:	f7ff fe05 	bl	800aedc <xTimerGenericCommand>
 800b2d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d14f      	bne.n	800b37a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b2da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2de:	f383 8811 	msr	BASEPRI, r3
 800b2e2:	f3bf 8f6f 	isb	sy
 800b2e6:	f3bf 8f4f 	dsb	sy
 800b2ea:	61bb      	str	r3, [r7, #24]
}
 800b2ec:	bf00      	nop
 800b2ee:	e7fe      	b.n	800b2ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f6:	f023 0301 	bic.w	r3, r3, #1
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b302:	e03a      	b.n	800b37a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b30a:	f043 0301 	orr.w	r3, r3, #1
 800b30e:	b2da      	uxtb	r2, r3
 800b310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b312:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b316:	68ba      	ldr	r2, [r7, #8]
 800b318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	617b      	str	r3, [r7, #20]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	699a      	ldr	r2, [r3, #24]
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	18d1      	adds	r1, r2, r3
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b348:	f7ff ff06 	bl	800b158 <prvInsertTimerInActiveList>
					break;
 800b34c:	e015      	b.n	800b37a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d103      	bne.n	800b364 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b35c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b35e:	f000 fbdf 	bl	800bb20 <vPortFree>
 800b362:	e00a      	b.n	800b37a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36a:	f023 0301 	bic.w	r3, r3, #1
 800b36e:	b2da      	uxtb	r2, r3
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b376:	e000      	b.n	800b37a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b37a:	4b08      	ldr	r3, [pc, #32]	; (800b39c <prvProcessReceivedCommands+0x1c0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	1d39      	adds	r1, r7, #4
 800b380:	2200      	movs	r2, #0
 800b382:	4618      	mov	r0, r3
 800b384:	f7fe fc4a 	bl	8009c1c <xQueueReceive>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f47f af2a 	bne.w	800b1e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	3730      	adds	r7, #48	; 0x30
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	24001420 	.word	0x24001420

0800b3a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b088      	sub	sp, #32
 800b3a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3a6:	e048      	b.n	800b43a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3a8:	4b2d      	ldr	r3, [pc, #180]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b2:	4b2b      	ldr	r3, [pc, #172]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7fe f963 	bl	800968c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a1b      	ldr	r3, [r3, #32]
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3d4:	f003 0304 	and.w	r3, r3, #4
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d02e      	beq.n	800b43a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	693a      	ldr	r2, [r7, #16]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d90e      	bls.n	800b40c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3fa:	4b19      	ldr	r3, [pc, #100]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	3304      	adds	r3, #4
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7fe f908 	bl	800961a <vListInsert>
 800b40a:	e016      	b.n	800b43a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b40c:	2300      	movs	r3, #0
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	2300      	movs	r3, #0
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	2100      	movs	r1, #0
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f7ff fd60 	bl	800aedc <xTimerGenericCommand>
 800b41c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d10a      	bne.n	800b43a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b428:	f383 8811 	msr	BASEPRI, r3
 800b42c:	f3bf 8f6f 	isb	sy
 800b430:	f3bf 8f4f 	dsb	sy
 800b434:	603b      	str	r3, [r7, #0]
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b43a:	4b09      	ldr	r3, [pc, #36]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1b1      	bne.n	800b3a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b444:	4b06      	ldr	r3, [pc, #24]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b44a:	4b06      	ldr	r3, [pc, #24]	; (800b464 <prvSwitchTimerLists+0xc4>)
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a04      	ldr	r2, [pc, #16]	; (800b460 <prvSwitchTimerLists+0xc0>)
 800b450:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b452:	4a04      	ldr	r2, [pc, #16]	; (800b464 <prvSwitchTimerLists+0xc4>)
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	6013      	str	r3, [r2, #0]
}
 800b458:	bf00      	nop
 800b45a:	3718      	adds	r7, #24
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	24001418 	.word	0x24001418
 800b464:	2400141c 	.word	0x2400141c

0800b468 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b46e:	f000 f969 	bl	800b744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <prvCheckForValidListAndQueue+0x60>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d120      	bne.n	800b4bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b47a:	4814      	ldr	r0, [pc, #80]	; (800b4cc <prvCheckForValidListAndQueue+0x64>)
 800b47c:	f7fe f87c 	bl	8009578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b480:	4813      	ldr	r0, [pc, #76]	; (800b4d0 <prvCheckForValidListAndQueue+0x68>)
 800b482:	f7fe f879 	bl	8009578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b486:	4b13      	ldr	r3, [pc, #76]	; (800b4d4 <prvCheckForValidListAndQueue+0x6c>)
 800b488:	4a10      	ldr	r2, [pc, #64]	; (800b4cc <prvCheckForValidListAndQueue+0x64>)
 800b48a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b48c:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <prvCheckForValidListAndQueue+0x70>)
 800b48e:	4a10      	ldr	r2, [pc, #64]	; (800b4d0 <prvCheckForValidListAndQueue+0x68>)
 800b490:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b492:	2300      	movs	r3, #0
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <prvCheckForValidListAndQueue+0x74>)
 800b498:	4a11      	ldr	r2, [pc, #68]	; (800b4e0 <prvCheckForValidListAndQueue+0x78>)
 800b49a:	2110      	movs	r1, #16
 800b49c:	200a      	movs	r0, #10
 800b49e:	f7fe f987 	bl	80097b0 <xQueueGenericCreateStatic>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4a08      	ldr	r2, [pc, #32]	; (800b4c8 <prvCheckForValidListAndQueue+0x60>)
 800b4a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b4a8:	4b07      	ldr	r3, [pc, #28]	; (800b4c8 <prvCheckForValidListAndQueue+0x60>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d005      	beq.n	800b4bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4b0:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <prvCheckForValidListAndQueue+0x60>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	490b      	ldr	r1, [pc, #44]	; (800b4e4 <prvCheckForValidListAndQueue+0x7c>)
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7fe fda0 	bl	8009ffc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4bc:	f000 f972 	bl	800b7a4 <vPortExitCritical>
}
 800b4c0:	bf00      	nop
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	24001420 	.word	0x24001420
 800b4cc:	240013f0 	.word	0x240013f0
 800b4d0:	24001404 	.word	0x24001404
 800b4d4:	24001418 	.word	0x24001418
 800b4d8:	2400141c 	.word	0x2400141c
 800b4dc:	240014cc 	.word	0x240014cc
 800b4e0:	2400142c 	.word	0x2400142c
 800b4e4:	0800be04 	.word	0x0800be04

0800b4e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	3b04      	subs	r3, #4
 800b4f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b500:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3b04      	subs	r3, #4
 800b506:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	f023 0201 	bic.w	r2, r3, #1
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3b04      	subs	r3, #4
 800b516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b518:	4a0c      	ldr	r2, [pc, #48]	; (800b54c <pxPortInitialiseStack+0x64>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3b14      	subs	r3, #20
 800b522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	3b04      	subs	r3, #4
 800b52e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f06f 0202 	mvn.w	r2, #2
 800b536:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	3b20      	subs	r3, #32
 800b53c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b53e:	68fb      	ldr	r3, [r7, #12]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3714      	adds	r7, #20
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	0800b551 	.word	0x0800b551

0800b550 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b55a:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <prvTaskExitError+0x54>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b562:	d00a      	beq.n	800b57a <prvTaskExitError+0x2a>
	__asm volatile
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	60fb      	str	r3, [r7, #12]
}
 800b576:	bf00      	nop
 800b578:	e7fe      	b.n	800b578 <prvTaskExitError+0x28>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	60bb      	str	r3, [r7, #8]
}
 800b58c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b58e:	bf00      	nop
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d0fc      	beq.n	800b590 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b596:	bf00      	nop
 800b598:	bf00      	nop
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	24000010 	.word	0x24000010
	...

0800b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <pxCurrentTCBConst2>)
 800b5b2:	6819      	ldr	r1, [r3, #0]
 800b5b4:	6808      	ldr	r0, [r1, #0]
 800b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	f380 8809 	msr	PSP, r0
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8811 	msr	BASEPRI, r0
 800b5ca:	4770      	bx	lr
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst2>:
 800b5d0:	24000ef0 	.word	0x24000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <prvPortStartFirstTask+0x24>)
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f380 8808 	msr	MSP, r0
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8814 	msr	CONTROL, r0
 800b5ea:	b662      	cpsie	i
 800b5ec:	b661      	cpsie	f
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	df00      	svc	0
 800b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed08 	.word	0xe000ed08

0800b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b606:	4b46      	ldr	r3, [pc, #280]	; (800b720 <xPortStartScheduler+0x120>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a46      	ldr	r2, [pc, #280]	; (800b724 <xPortStartScheduler+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10a      	bne.n	800b626 <xPortStartScheduler+0x26>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	613b      	str	r3, [r7, #16]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <xPortStartScheduler+0x120>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <xPortStartScheduler+0x128>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d10a      	bne.n	800b646 <xPortStartScheduler+0x46>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60fb      	str	r3, [r7, #12]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b646:	4b39      	ldr	r3, [pc, #228]	; (800b72c <xPortStartScheduler+0x12c>)
 800b648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <xPortStartScheduler+0x130>)
 800b66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b66e:	4b31      	ldr	r3, [pc, #196]	; (800b734 <xPortStartScheduler+0x134>)
 800b670:	2207      	movs	r2, #7
 800b672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b674:	e009      	b.n	800b68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <xPortStartScheduler+0x134>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a2d      	ldr	r2, [pc, #180]	; (800b734 <xPortStartScheduler+0x134>)
 800b67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d0ef      	beq.n	800b676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b696:	4b27      	ldr	r3, [pc, #156]	; (800b734 <xPortStartScheduler+0x134>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1c3 0307 	rsb	r3, r3, #7
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d00a      	beq.n	800b6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6b8:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <xPortStartScheduler+0x134>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ca:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <xPortStartScheduler+0x134>)
 800b6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6d6:	4b18      	ldr	r3, [pc, #96]	; (800b738 <xPortStartScheduler+0x138>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <xPortStartScheduler+0x138>)
 800b6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6e2:	4b15      	ldr	r3, [pc, #84]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a14      	ldr	r2, [pc, #80]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6ee:	f000 f8dd 	bl	800b8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <xPortStartScheduler+0x13c>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6f8:	f000 f8fc 	bl	800b8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <xPortStartScheduler+0x140>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <xPortStartScheduler+0x140>)
 800b702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b708:	f7ff ff66 	bl	800b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b70c:	f7ff f852 	bl	800a7b4 <vTaskSwitchContext>
	prvTaskExitError();
 800b710:	f7ff ff1e 	bl	800b550 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	e000ed00 	.word	0xe000ed00
 800b724:	410fc271 	.word	0x410fc271
 800b728:	410fc270 	.word	0x410fc270
 800b72c:	e000e400 	.word	0xe000e400
 800b730:	2400151c 	.word	0x2400151c
 800b734:	24001520 	.word	0x24001520
 800b738:	e000ed20 	.word	0xe000ed20
 800b73c:	24000010 	.word	0x24000010
 800b740:	e000ef34 	.word	0xe000ef34

0800b744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	607b      	str	r3, [r7, #4]
}
 800b75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <vPortEnterCritical+0x58>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a0d      	ldr	r2, [pc, #52]	; (800b79c <vPortEnterCritical+0x58>)
 800b766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <vPortEnterCritical+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d10f      	bne.n	800b790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortEnterCritical+0x5c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <vPortEnterCritical+0x4c>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	603b      	str	r3, [r7, #0]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vPortEnterCritical+0x4a>
	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	24000010 	.word	0x24000010
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <vPortExitCritical+0x24>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	607b      	str	r3, [r7, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7d2:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <vPortExitCritical+0x42>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f383 8811 	msr	BASEPRI, r3
}
 800b7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	24000010 	.word	0x24000010
	...

0800b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7fe ffc0 	bl	800a7b4 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	24000ef0 	.word	0x24000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b882:	f7fe fedd 	bl	800a640 <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <xPortSysTickHandler+0x40>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f383 8811 	msr	BASEPRI, r3
}
 800b89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <vPortSetupTimerInterrupt+0x38>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <vPortSetupTimerInterrupt+0x3c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <vPortSetupTimerInterrupt+0x40>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <vPortSetupTimerInterrupt+0x44>)
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ce:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	e000e010 	.word	0xe000e010
 800b8e4:	e000e018 	.word	0xe000e018
 800b8e8:	24000000 	.word	0x24000000
 800b8ec:	10624dd3 	.word	0x10624dd3
 800b8f0:	e000e014 	.word	0xe000e014

0800b8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b904 <vPortEnableVFP+0x10>
 800b8f8:	6801      	ldr	r1, [r0, #0]
 800b8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8fe:	6001      	str	r1, [r0, #0]
 800b900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b902:	bf00      	nop
 800b904:	e000ed88 	.word	0xe000ed88

0800b908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b90e:	f3ef 8305 	mrs	r3, IPSR
 800b912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d914      	bls.n	800b944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <vPortValidateInterruptPriority+0x70>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <vPortValidateInterruptPriority+0x74>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	7afa      	ldrb	r2, [r7, #11]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20a      	bcs.n	800b944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <vPortValidateInterruptPriority+0x78>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <vPortValidateInterruptPriority+0x7c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d90a      	bls.n	800b96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	603b      	str	r3, [r7, #0]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vPortValidateInterruptPriority+0x60>
	}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	e000e3f0 	.word	0xe000e3f0
 800b97c:	2400151c 	.word	0x2400151c
 800b980:	e000ed0c 	.word	0xe000ed0c
 800b984:	24001520 	.word	0x24001520

0800b988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b08a      	sub	sp, #40	; 0x28
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b994:	f7fe fd98 	bl	800a4c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b998:	4b5b      	ldr	r3, [pc, #364]	; (800bb08 <pvPortMalloc+0x180>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d101      	bne.n	800b9a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9a0:	f000 f920 	bl	800bbe4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9a4:	4b59      	ldr	r3, [pc, #356]	; (800bb0c <pvPortMalloc+0x184>)
 800b9a6:	681a      	ldr	r2, [r3, #0]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f040 8093 	bne.w	800bad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d01d      	beq.n	800b9f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b9b8:	2208      	movs	r2, #8
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4413      	add	r3, r2
 800b9be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f003 0307 	and.w	r3, r3, #7
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d014      	beq.n	800b9f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f023 0307 	bic.w	r3, r3, #7
 800b9d0:	3308      	adds	r3, #8
 800b9d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <pvPortMalloc+0x6c>
	__asm volatile
 800b9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e2:	f383 8811 	msr	BASEPRI, r3
 800b9e6:	f3bf 8f6f 	isb	sy
 800b9ea:	f3bf 8f4f 	dsb	sy
 800b9ee:	617b      	str	r3, [r7, #20]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d06e      	beq.n	800bad8 <pvPortMalloc+0x150>
 800b9fa:	4b45      	ldr	r3, [pc, #276]	; (800bb10 <pvPortMalloc+0x188>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	687a      	ldr	r2, [r7, #4]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d869      	bhi.n	800bad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba04:	4b43      	ldr	r3, [pc, #268]	; (800bb14 <pvPortMalloc+0x18c>)
 800ba06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba08:	4b42      	ldr	r3, [pc, #264]	; (800bb14 <pvPortMalloc+0x18c>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba0e:	e004      	b.n	800ba1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d903      	bls.n	800ba2c <pvPortMalloc+0xa4>
 800ba24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d1f1      	bne.n	800ba10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba2c:	4b36      	ldr	r3, [pc, #216]	; (800bb08 <pvPortMalloc+0x180>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d050      	beq.n	800bad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba36:	6a3b      	ldr	r3, [r7, #32]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2208      	movs	r2, #8
 800ba3c:	4413      	add	r3, r2
 800ba3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	6a3b      	ldr	r3, [r7, #32]
 800ba46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	685a      	ldr	r2, [r3, #4]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	1ad2      	subs	r2, r2, r3
 800ba50:	2308      	movs	r3, #8
 800ba52:	005b      	lsls	r3, r3, #1
 800ba54:	429a      	cmp	r2, r3
 800ba56:	d91f      	bls.n	800ba98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00a      	beq.n	800ba80 <pvPortMalloc+0xf8>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	613b      	str	r3, [r7, #16]
}
 800ba7c:	bf00      	nop
 800ba7e:	e7fe      	b.n	800ba7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba82:	685a      	ldr	r2, [r3, #4]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba92:	69b8      	ldr	r0, [r7, #24]
 800ba94:	f000 f908 	bl	800bca8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba98:	4b1d      	ldr	r3, [pc, #116]	; (800bb10 <pvPortMalloc+0x188>)
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	4a1b      	ldr	r2, [pc, #108]	; (800bb10 <pvPortMalloc+0x188>)
 800baa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baa6:	4b1a      	ldr	r3, [pc, #104]	; (800bb10 <pvPortMalloc+0x188>)
 800baa8:	681a      	ldr	r2, [r3, #0]
 800baaa:	4b1b      	ldr	r3, [pc, #108]	; (800bb18 <pvPortMalloc+0x190>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d203      	bcs.n	800baba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bab2:	4b17      	ldr	r3, [pc, #92]	; (800bb10 <pvPortMalloc+0x188>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <pvPortMalloc+0x190>)
 800bab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <pvPortMalloc+0x184>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	431a      	orrs	r2, r3
 800bac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	2200      	movs	r2, #0
 800bacc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bace:	4b13      	ldr	r3, [pc, #76]	; (800bb1c <pvPortMalloc+0x194>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	3301      	adds	r3, #1
 800bad4:	4a11      	ldr	r2, [pc, #68]	; (800bb1c <pvPortMalloc+0x194>)
 800bad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bad8:	f7fe fd04 	bl	800a4e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	f003 0307 	and.w	r3, r3, #7
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00a      	beq.n	800bafc <pvPortMalloc+0x174>
	__asm volatile
 800bae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baea:	f383 8811 	msr	BASEPRI, r3
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f3bf 8f4f 	dsb	sy
 800baf6:	60fb      	str	r3, [r7, #12]
}
 800baf8:	bf00      	nop
 800bafa:	e7fe      	b.n	800bafa <pvPortMalloc+0x172>
	return pvReturn;
 800bafc:	69fb      	ldr	r3, [r7, #28]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3728      	adds	r7, #40	; 0x28
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2400512c 	.word	0x2400512c
 800bb0c:	24005140 	.word	0x24005140
 800bb10:	24005130 	.word	0x24005130
 800bb14:	24005124 	.word	0x24005124
 800bb18:	24005134 	.word	0x24005134
 800bb1c:	24005138 	.word	0x24005138

0800bb20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d04d      	beq.n	800bbce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb32:	2308      	movs	r3, #8
 800bb34:	425b      	negs	r3, r3
 800bb36:	697a      	ldr	r2, [r7, #20]
 800bb38:	4413      	add	r3, r2
 800bb3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	685a      	ldr	r2, [r3, #4]
 800bb44:	4b24      	ldr	r3, [pc, #144]	; (800bbd8 <vPortFree+0xb8>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4013      	ands	r3, r2
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d10a      	bne.n	800bb64 <vPortFree+0x44>
	__asm volatile
 800bb4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	60fb      	str	r3, [r7, #12]
}
 800bb60:	bf00      	nop
 800bb62:	e7fe      	b.n	800bb62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <vPortFree+0x62>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	f383 8811 	msr	BASEPRI, r3
 800bb74:	f3bf 8f6f 	isb	sy
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	60bb      	str	r3, [r7, #8]
}
 800bb7e:	bf00      	nop
 800bb80:	e7fe      	b.n	800bb80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	4b14      	ldr	r3, [pc, #80]	; (800bbd8 <vPortFree+0xb8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d01e      	beq.n	800bbce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d11a      	bne.n	800bbce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	4b0e      	ldr	r3, [pc, #56]	; (800bbd8 <vPortFree+0xb8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	43db      	mvns	r3, r3
 800bba2:	401a      	ands	r2, r3
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bba8:	f7fe fc8e 	bl	800a4c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	4b0a      	ldr	r3, [pc, #40]	; (800bbdc <vPortFree+0xbc>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4a09      	ldr	r2, [pc, #36]	; (800bbdc <vPortFree+0xbc>)
 800bbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbba:	6938      	ldr	r0, [r7, #16]
 800bbbc:	f000 f874 	bl	800bca8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbc0:	4b07      	ldr	r3, [pc, #28]	; (800bbe0 <vPortFree+0xc0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	4a06      	ldr	r2, [pc, #24]	; (800bbe0 <vPortFree+0xc0>)
 800bbc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bbca:	f7fe fc8b 	bl	800a4e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbce:	bf00      	nop
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	24005140 	.word	0x24005140
 800bbdc:	24005130 	.word	0x24005130
 800bbe0:	2400513c 	.word	0x2400513c

0800bbe4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bbee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbf0:	4b27      	ldr	r3, [pc, #156]	; (800bc90 <prvHeapInit+0xac>)
 800bbf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0307 	and.w	r3, r3, #7
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00c      	beq.n	800bc18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	3307      	adds	r3, #7
 800bc02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	f023 0307 	bic.w	r3, r3, #7
 800bc0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	4a1f      	ldr	r2, [pc, #124]	; (800bc90 <prvHeapInit+0xac>)
 800bc14:	4413      	add	r3, r2
 800bc16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc1c:	4a1d      	ldr	r2, [pc, #116]	; (800bc94 <prvHeapInit+0xb0>)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc22:	4b1c      	ldr	r3, [pc, #112]	; (800bc94 <prvHeapInit+0xb0>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	4413      	add	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc30:	2208      	movs	r2, #8
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	1a9b      	subs	r3, r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0307 	bic.w	r3, r3, #7
 800bc3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4a15      	ldr	r2, [pc, #84]	; (800bc98 <prvHeapInit+0xb4>)
 800bc44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc46:	4b14      	ldr	r3, [pc, #80]	; (800bc98 <prvHeapInit+0xb4>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc4e:	4b12      	ldr	r3, [pc, #72]	; (800bc98 <prvHeapInit+0xb4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	1ad2      	subs	r2, r2, r3
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc64:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <prvHeapInit+0xb4>)
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <prvHeapInit+0xb8>)
 800bc72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	4a09      	ldr	r2, [pc, #36]	; (800bca0 <prvHeapInit+0xbc>)
 800bc7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc7c:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <prvHeapInit+0xc0>)
 800bc7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc82:	601a      	str	r2, [r3, #0]
}
 800bc84:	bf00      	nop
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	24001524 	.word	0x24001524
 800bc94:	24005124 	.word	0x24005124
 800bc98:	2400512c 	.word	0x2400512c
 800bc9c:	24005134 	.word	0x24005134
 800bca0:	24005130 	.word	0x24005130
 800bca4:	24005140 	.word	0x24005140

0800bca8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcb0:	4b28      	ldr	r3, [pc, #160]	; (800bd54 <prvInsertBlockIntoFreeList+0xac>)
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	e002      	b.n	800bcbc <prvInsertBlockIntoFreeList+0x14>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	60fb      	str	r3, [r7, #12]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	429a      	cmp	r2, r3
 800bcc4:	d8f7      	bhi.n	800bcb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d108      	bne.n	800bcea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	685a      	ldr	r2, [r3, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	441a      	add	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	441a      	add	r2, r3
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	429a      	cmp	r2, r3
 800bcfc:	d118      	bne.n	800bd30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <prvInsertBlockIntoFreeList+0xb0>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d00d      	beq.n	800bd26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	685a      	ldr	r2, [r3, #4]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	441a      	add	r2, r3
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	601a      	str	r2, [r3, #0]
 800bd24:	e008      	b.n	800bd38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd26:	4b0c      	ldr	r3, [pc, #48]	; (800bd58 <prvInsertBlockIntoFreeList+0xb0>)
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	601a      	str	r2, [r3, #0]
 800bd2e:	e003      	b.n	800bd38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d002      	beq.n	800bd46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	687a      	ldr	r2, [r7, #4]
 800bd44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd46:	bf00      	nop
 800bd48:	3714      	adds	r7, #20
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	24005124 	.word	0x24005124
 800bd58:	2400512c 	.word	0x2400512c

0800bd5c <memset>:
 800bd5c:	4402      	add	r2, r0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d100      	bne.n	800bd66 <memset+0xa>
 800bd64:	4770      	bx	lr
 800bd66:	f803 1b01 	strb.w	r1, [r3], #1
 800bd6a:	e7f9      	b.n	800bd60 <memset+0x4>

0800bd6c <__libc_init_array>:
 800bd6c:	b570      	push	{r4, r5, r6, lr}
 800bd6e:	4d0d      	ldr	r5, [pc, #52]	; (800bda4 <__libc_init_array+0x38>)
 800bd70:	4c0d      	ldr	r4, [pc, #52]	; (800bda8 <__libc_init_array+0x3c>)
 800bd72:	1b64      	subs	r4, r4, r5
 800bd74:	10a4      	asrs	r4, r4, #2
 800bd76:	2600      	movs	r6, #0
 800bd78:	42a6      	cmp	r6, r4
 800bd7a:	d109      	bne.n	800bd90 <__libc_init_array+0x24>
 800bd7c:	4d0b      	ldr	r5, [pc, #44]	; (800bdac <__libc_init_array+0x40>)
 800bd7e:	4c0c      	ldr	r4, [pc, #48]	; (800bdb0 <__libc_init_array+0x44>)
 800bd80:	f000 f826 	bl	800bdd0 <_init>
 800bd84:	1b64      	subs	r4, r4, r5
 800bd86:	10a4      	asrs	r4, r4, #2
 800bd88:	2600      	movs	r6, #0
 800bd8a:	42a6      	cmp	r6, r4
 800bd8c:	d105      	bne.n	800bd9a <__libc_init_array+0x2e>
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd94:	4798      	blx	r3
 800bd96:	3601      	adds	r6, #1
 800bd98:	e7ee      	b.n	800bd78 <__libc_init_array+0xc>
 800bd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd9e:	4798      	blx	r3
 800bda0:	3601      	adds	r6, #1
 800bda2:	e7f2      	b.n	800bd8a <__libc_init_array+0x1e>
 800bda4:	0800be70 	.word	0x0800be70
 800bda8:	0800be70 	.word	0x0800be70
 800bdac:	0800be70 	.word	0x0800be70
 800bdb0:	0800be74 	.word	0x0800be74

0800bdb4 <memcpy>:
 800bdb4:	440a      	add	r2, r1
 800bdb6:	4291      	cmp	r1, r2
 800bdb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdbc:	d100      	bne.n	800bdc0 <memcpy+0xc>
 800bdbe:	4770      	bx	lr
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdca:	4291      	cmp	r1, r2
 800bdcc:	d1f9      	bne.n	800bdc2 <memcpy+0xe>
 800bdce:	bd10      	pop	{r4, pc}

0800bdd0 <_init>:
 800bdd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd2:	bf00      	nop
 800bdd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdd6:	bc08      	pop	{r3}
 800bdd8:	469e      	mov	lr, r3
 800bdda:	4770      	bx	lr

0800bddc <_fini>:
 800bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdde:	bf00      	nop
 800bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde2:	bc08      	pop	{r3}
 800bde4:	469e      	mov	lr, r3
 800bde6:	4770      	bx	lr
