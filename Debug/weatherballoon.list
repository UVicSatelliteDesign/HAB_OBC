
weatherballoon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba58  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800bcf8  0800bcf8  0001bcf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800bd88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800bd9c  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800bdfc  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  240000d4  0800be5c  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24005144  0800be5c  00025144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026810  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043ae  00000000  00000000  00046955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ba0  00000000  00000000  0004ad08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001556  00000000  00000000  0004c8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004f3b  00000000  00000000  0004ddfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002106a  00000000  00000000  00052d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0017cdd3  00000000  00000000  00073da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007764  00000000  00000000  001f0b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001f82dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bce0 	.word	0x0800bce0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800bce0 	.word	0x0800bce0

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <getADCValue>:

/**
 * @brief Gets the ADC value from the sensor.
 * @return The ADC value.
 */
uint32_t getADCValue() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
    uint32_t adcValue = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]

    // Start ADC conversion
    HAL_ADC_Start(&hadc1);
 80005e6:	480a      	ldr	r0, [pc, #40]	; (8000610 <getADCValue+0x34>)
 80005e8:	f001 fbe0 	bl	8001dac <HAL_ADC_Start>

    // Wait for the conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ec:	f04f 31ff 	mov.w	r1, #4294967295
 80005f0:	4807      	ldr	r0, [pc, #28]	; (8000610 <getADCValue+0x34>)
 80005f2:	f001 fcd9 	bl	8001fa8 <HAL_ADC_PollForConversion>

    // Read the ADC value
    adcValue = HAL_ADC_GetValue(&hadc1);
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <getADCValue+0x34>)
 80005f8:	f001 fdca 	bl	8002190 <HAL_ADC_GetValue>
 80005fc:	6078      	str	r0, [r7, #4]

    // Stop ADC
    HAL_ADC_Stop(&hadc1);
 80005fe:	4804      	ldr	r0, [pc, #16]	; (8000610 <getADCValue+0x34>)
 8000600:	f001 fc9e 	bl	8001f40 <HAL_ADC_Stop>

    return adcValue;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	24000128 	.word	0x24000128
 8000614:	00000000 	.word	0x00000000

08000618 <getVoltage>:

/**
 * @brief Converts ADC value to voltage.
 * @return The voltage value.
 */
float getVoltage(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

	float adcValue = getADCValue();
 800061e:	f7ff ffdd 	bl	80005dc <getADCValue>
 8000622:	ee07 0a90 	vmov	s15, r0
 8000626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800062a:	edc7 7a01 	vstr	s15, [r7, #4]

    float voltage = (adcValue * VREF) / adcMaxVal;
 800062e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000632:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000636:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000660 <getVoltage+0x48>
 800063a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800063e:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000668 <getVoltage+0x50>
 8000642:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000646:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800064a:	edc7 7a00 	vstr	s15, [r7]

    return voltage;
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	ee07 3a90 	vmov	s15, r3

}
 8000654:	eeb0 0a67 	vmov.f32	s0, s15
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	66666666 	.word	0x66666666
 8000664:	400a6666 	.word	0x400a6666
 8000668:	00000000 	.word	0x00000000
 800066c:	40b00000 	.word	0x40b00000

08000670 <getCurrent>:

/**
 * @brief Converts voltage to current.
 * @return The current value.
 */
float getCurrent(){
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	float voltage = getVoltage();
 8000676:	f7ff ffcf 	bl	8000618 <getVoltage>
 800067a:	ed87 0a01 	vstr	s0, [r7, #4]
	float current = voltage/sensitivity;
 800067e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000682:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000686:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80006a8 <getCurrent+0x38>
 800068a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800068e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000692:	edc7 7a00 	vstr	s15, [r7]
	return current;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	ee07 3a90 	vmov	s15, r3
}
 800069c:	eeb0 0a67 	vmov.f32	s0, s15
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	7ae147ae 	.word	0x7ae147ae
 80006ac:	3fc7ae14 	.word	0x3fc7ae14

080006b0 <cutBalloon>:

/**
 * @brief Sets the GPIO pin to high effectively cutting the balloon.
 */
void cutBalloon(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2101      	movs	r1, #1
 80006b8:	4802      	ldr	r0, [pc, #8]	; (80006c4 <cutBalloon+0x14>)
 80006ba:	f003 fb35 	bl	8003d28 <HAL_GPIO_WritePin>

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	58021800 	.word	0x58021800

080006c8 <lowPowerMode>:

/**
 * @brief Enters low power mode if battery voltage is low.
 */
void lowPowerMode(){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
	float voltage = getVoltage();
 80006ce:	f7ff ffa3 	bl	8000618 <getVoltage>
 80006d2:	ed87 0a03 	vstr	s0, [r7, #12]
	float current = getCurrent();
 80006d6:	f7ff ffcb 	bl	8000670 <getCurrent>
 80006da:	ed87 0a02 	vstr	s0, [r7, #8]
	float time = HAL_GetTick();
 80006de:	f000 ff41 	bl	8001564 <HAL_GetTick>
 80006e2:	ee07 0a90 	vmov	s15, r0
 80006e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80006ea:	edc7 7a01 	vstr	s15, [r7, #4]
	//latitude
	//altitude
	//temp

	//logData(voltage, current, time, longitude, latitude, altitude, temp)
	cutBalloon();
 80006ee:	f7ff ffdf 	bl	80006b0 <cutBalloon>
	while(1){
 80006f2:	e7fe      	b.n	80006f2 <lowPowerMode+0x2a>

080006f4 <checkBattery>:
}

/**
 * @brief Checks battery voltage and enters low power mode if voltage is low (<20%).
 */
void checkBattery(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
	float batteryVoltage = getVoltage();
 80006fa:	f7ff ff8d 	bl	8000618 <getVoltage>
 80006fe:	ed87 0a01 	vstr	s0, [r7, #4]
		if (batteryVoltage <= minVoltage){
 8000702:	edd7 7a01 	vldr	s15, [r7, #4]
 8000706:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000724 <checkBattery+0x30>
 800070a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800070e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000712:	d900      	bls.n	8000716 <checkBattery+0x22>
			lowPowerMode();
		}
}
 8000714:	e001      	b.n	800071a <checkBattery+0x26>
			lowPowerMode();
 8000716:	f7ff ffd7 	bl	80006c8 <lowPowerMode>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	44852000 	.word	0x44852000

08000728 <checkAltitude>:
/**
 * @brief Checks if altitude is within acceptable range and calls cutBalloon if altitude exceeds max altitude.
 * @param altitude The current altitude.
 * @return 1 if altitude exceeds max altitude, 0 otherwise.
 */
int checkAltitude(float altitude){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (altitude < prevAltitude){
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <checkAltitude+0x50>)
 8000734:	edd3 7a00 	vldr	s15, [r3]
 8000738:	ed97 7a01 	vldr	s14, [r7, #4]
 800073c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000744:	d504      	bpl.n	8000750 <checkAltitude+0x28>
		descendFlag+= 1;
 8000746:	4b0d      	ldr	r3, [pc, #52]	; (800077c <checkAltitude+0x54>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	3301      	adds	r3, #1
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <checkAltitude+0x54>)
 800074e:	6013      	str	r3, [r2, #0]
	}
    if (altitude >= maxAltitude){
 8000750:	edd7 7a01 	vldr	s15, [r7, #4]
 8000754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800075c:	db01      	blt.n	8000762 <checkAltitude+0x3a>
        return 1;
 800075e:	2301      	movs	r3, #1
 8000760:	e003      	b.n	800076a <checkAltitude+0x42>
    }
    prevAltitude = altitude;
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <checkAltitude+0x50>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6013      	str	r3, [r2, #0]
    return 0;
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	240007e4 	.word	0x240007e4
 800077c:	240007e0 	.word	0x240007e0

08000780 <checkLocation>:

/**
 * @brief Checks if the current location is within acceptable range and calls cutBalloon if not.
 */
void checkLocation(void){
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
   // float longitude = function.longitude();
   // float latitude = function.latitude();
   // float altitude = function.altitude();

	//placeholders so program can build
    float longitude = 0;
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
    float latitude = 0;
 800078c:	f04f 0300 	mov.w	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
    float altitude = 0;
 8000792:	f04f 0300 	mov.w	r3, #0
 8000796:	607b      	str	r3, [r7, #4]

    //checking if the current location is within the min and max longitude
    if (longitude < maxLongitude && longitude > minLongitude){
 8000798:	edd7 7a03 	vldr	s15, [r7, #12]
 800079c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a4:	d51e      	bpl.n	80007e4 <checkLocation+0x64>
 80007a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80007aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007b2:	dd17      	ble.n	80007e4 <checkLocation+0x64>

    	//checking if the current location is within the min and max latitude
        if(latitude < maxLatitude && latitude > minLatitude){
 80007b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80007b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007c0:	d510      	bpl.n	80007e4 <checkLocation+0x64>
 80007c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80007c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	dd09      	ble.n	80007e4 <checkLocation+0x64>

        	//checking if it is lower than the max altitude
            if(checkAltitude(altitude) == 1){
 80007d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80007d4:	f7ff ffa8 	bl	8000728 <checkAltitude>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d105      	bne.n	80007ea <checkLocation+0x6a>
                lowPowerMode();
 80007de:	f7ff ff73 	bl	80006c8 <lowPowerMode>
                return;
 80007e2:	e003      	b.n	80007ec <checkLocation+0x6c>
            }
            return;
        }
    }

    cutBalloon();
 80007e4:	f7ff ff64 	bl	80006b0 <cutBalloon>
 80007e8:	e000      	b.n	80007ec <checkLocation+0x6c>
            return;
 80007ea:	bf00      	nop
}
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 fe2e 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f81e 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000800:	f000 f9de 	bl	8000bc0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000804:	f000 f912 	bl	8000a2c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000808:	f000 f95c 	bl	8000ac4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080c:	f000 f9a6 	bl	8000b5c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000810:	f000 f894 	bl	800093c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000814:	f008 fd2c 	bl	8009270 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PollingLoop */
  PollingLoopHandle = osThreadNew(startPollingLoop, NULL, &PollingLoop_attributes);
 8000818:	4a05      	ldr	r2, [pc, #20]	; (8000830 <main+0x3c>)
 800081a:	2100      	movs	r1, #0
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <main+0x40>)
 800081e:	f008 fd71 	bl	8009304 <osThreadNew>
 8000822:	4603      	mov	r3, r0
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <main+0x44>)
 8000826:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000828:	f008 fd46 	bl	80092b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	e7fe      	b.n	800082c <main+0x38>
 800082e:	bf00      	nop
 8000830:	0800bd1c 	.word	0x0800bd1c
 8000834:	08000d79 	.word	0x08000d79
 8000838:	240007dc 	.word	0x240007dc

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b09c      	sub	sp, #112	; 0x70
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	224c      	movs	r2, #76	; 0x4c
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f00b fa0e 	bl	800bc6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2220      	movs	r2, #32
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f00b fa08 	bl	800bc6c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800085c:	2002      	movs	r0, #2
 800085e:	f003 fbc5 	bl	8003fec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <SystemClock_Config+0xf8>)
 8000868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086a:	4a32      	ldr	r2, [pc, #200]	; (8000934 <SystemClock_Config+0xf8>)
 800086c:	f023 0301 	bic.w	r3, r3, #1
 8000870:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <SystemClock_Config+0xf8>)
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <SystemClock_Config+0xfc>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000884:	4a2c      	ldr	r2, [pc, #176]	; (8000938 <SystemClock_Config+0xfc>)
 8000886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b2a      	ldr	r3, [pc, #168]	; (8000938 <SystemClock_Config+0xfc>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000898:	bf00      	nop
 800089a:	4b27      	ldr	r3, [pc, #156]	; (8000938 <SystemClock_Config+0xfc>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008a6:	d1f8      	bne.n	800089a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80008a8:	2303      	movs	r3, #3
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008be:	2302      	movs	r3, #2
 80008c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008c6:	2318      	movs	r3, #24
 80008c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ca:	2302      	movs	r3, #2
 80008cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008ce:	2304      	movs	r3, #4
 80008d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d6:	230c      	movs	r3, #12
 80008d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008da:	2300      	movs	r3, #0
 80008dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 fbca 	bl	8004080 <HAL_RCC_OscConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80008f2:	f000 fa71 	bl	8000dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f6:	233f      	movs	r3, #63	; 0x3f
 80008f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2101      	movs	r1, #1
 800091a:	4618      	mov	r0, r3
 800091c:	f004 f80a 	bl	8004934 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000926:	f000 fa57 	bl	8000dd8 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3770      	adds	r7, #112	; 0x70
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	58000400 	.word	0x58000400
 8000938:	58024800 	.word	0x58024800

0800093c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
 800095c:	615a      	str	r2, [r3, #20]
 800095e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000962:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <MX_ADC1_Init+0xe8>)
 8000964:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_ADC1_Init+0xe4>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_ADC1_Init+0xe4>)
 800097a:	2204      	movs	r2, #4
 800097c:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000980:	2200      	movs	r2, #0
 8000982:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC1_Init+0xe4>)
 800098c:	2201      	movs	r2, #1
 800098e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC1_Init+0xe4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009bc:	4818      	ldr	r0, [pc, #96]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009be:	f001 f853 	bl	8001a68 <HAL_ADC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009c8:	f000 fa06 	bl	8000dd8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_ADC1_Init+0xe4>)
 80009d8:	f002 fa10 	bl	8002dfc <HAL_ADCEx_MultiModeConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009e2:	f000 f9f9 	bl	8000dd8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <MX_ADC1_Init+0xec>)
 80009e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009ea:	2306      	movs	r3, #6
 80009ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009f8:	2304      	movs	r3, #4
 80009fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a00:	2300      	movs	r3, #0
 8000a02:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC1_Init+0xe4>)
 8000a0a:	f001 fbcf 	bl	80021ac <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a14:	f000 f9e0 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24000128 	.word	0x24000128
 8000a24:	40022000 	.word	0x40022000
 8000a28:	3ef08000 	.word	0x3ef08000

08000a2c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <MX_ETH_Init+0x80>)
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <MX_ETH_Init+0x84>)
 8000a34:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a44:	22e1      	movs	r2, #225	; 0xe1
 8000a46:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ETH_Init+0x80>)
 8000a5c:	4a15      	ldr	r2, [pc, #84]	; (8000ab4 <MX_ETH_Init+0x88>)
 8000a5e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_ETH_Init+0x80>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_ETH_Init+0x80>)
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <MX_ETH_Init+0x8c>)
 8000a6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_ETH_Init+0x80>)
 8000a6e:	4a13      	ldr	r2, [pc, #76]	; (8000abc <MX_ETH_Init+0x90>)
 8000a70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_ETH_Init+0x80>)
 8000a74:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000a78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a7a:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_ETH_Init+0x80>)
 8000a7c:	f002 fb80 	bl	8003180 <HAL_ETH_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000a86:	f000 f9a7 	bl	8000dd8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a8a:	2238      	movs	r2, #56	; 0x38
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480c      	ldr	r0, [pc, #48]	; (8000ac0 <MX_ETH_Init+0x94>)
 8000a90:	f00b f8ec 	bl	800bc6c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a94:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_ETH_Init+0x94>)
 8000a96:	2221      	movs	r2, #33	; 0x21
 8000a98:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <MX_ETH_Init+0x94>)
 8000a9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000aa0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_ETH_Init+0x94>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2400018c 	.word	0x2400018c
 8000ab0:	40028000 	.word	0x40028000
 8000ab4:	240007e8 	.word	0x240007e8
 8000ab8:	24000074 	.word	0x24000074
 8000abc:	24000014 	.word	0x24000014
 8000ac0:	240000f0 	.word	0x240000f0

08000ac4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_USART3_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b0e:	f006 ff9b 	bl	8007a48 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f95e 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b20:	f007 ff9d 	bl	8008a5e <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f955 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b32:	f007 ffd2 	bl	8008ada <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f94c 	bl	8000dd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_USART3_UART_Init+0x90>)
 8000b42:	f007 ff53 	bl	80089ec <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f944 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2400023c 	.word	0x2400023c
 8000b58:	40004800 	.word	0x40004800

08000b5c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b64:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b68:	2209      	movs	r2, #9
 8000b6a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6e:	2202      	movs	r2, #2
 8000b70:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7a:	2202      	movs	r2, #2
 8000b7c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ba4:	f003 f8d9 	bl	8003d5a <HAL_PCD_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000bae:	f000 f913 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	240002d0 	.word	0x240002d0
 8000bbc:	40080000 	.word	0x40080000

08000bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08c      	sub	sp, #48	; 0x30
 8000bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	4b62      	ldr	r3, [pc, #392]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	4a60      	ldr	r2, [pc, #384]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be6:	4b5e      	ldr	r3, [pc, #376]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bf4:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	4a59      	ldr	r2, [pc, #356]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c04:	4b56      	ldr	r3, [pc, #344]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c0e:	617b      	str	r3, [r7, #20]
 8000c10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	4a51      	ldr	r2, [pc, #324]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c22:	4b4f      	ldr	r3, [pc, #316]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c30:	4b4b      	ldr	r3, [pc, #300]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c36:	4a4a      	ldr	r2, [pc, #296]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c40:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c46:	f003 0302 	and.w	r3, r3, #2
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c54:	4a42      	ldr	r2, [pc, #264]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c56:	f043 0308 	orr.w	r3, r3, #8
 8000c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c5e:	4b40      	ldr	r3, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c64:	f003 0308 	and.w	r3, r3, #8
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c6c:	4b3c      	ldr	r3, [pc, #240]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c72:	4a3b      	ldr	r2, [pc, #236]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7c:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	4b35      	ldr	r3, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c90:	4a33      	ldr	r2, [pc, #204]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c92:	f043 0310 	orr.w	r3, r3, #16
 8000c96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_GPIO_Init+0x1a0>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f244 0101 	movw	r1, #16385	; 0x4001
 8000cae:	482d      	ldr	r0, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x1a4>)
 8000cb0:	f003 f83a 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	482b      	ldr	r0, [pc, #172]	; (8000d68 <MX_GPIO_Init+0x1a8>)
 8000cbc:	f003 f834 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	4829      	ldr	r0, [pc, #164]	; (8000d6c <MX_GPIO_Init+0x1ac>)
 8000cc6:	f003 f82f 	bl	8003d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4824      	ldr	r0, [pc, #144]	; (8000d70 <MX_GPIO_Init+0x1b0>)
 8000ce0:	f002 fe72 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ce4:	f244 0301 	movw	r3, #16385	; 0x4001
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4819      	ldr	r0, [pc, #100]	; (8000d64 <MX_GPIO_Init+0x1a4>)
 8000cfe:	f002 fe63 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4813      	ldr	r0, [pc, #76]	; (8000d68 <MX_GPIO_Init+0x1a8>)
 8000d1c:	f002 fe54 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <MX_GPIO_Init+0x1b4>)
 8000d36:	f002 fe47 	bl	80039c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_GPIO_Init+0x1ac>)
 8000d52:	f002 fe39 	bl	80039c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d56:	bf00      	nop
 8000d58:	3730      	adds	r7, #48	; 0x30
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400
 8000d64:	58020400 	.word	0x58020400
 8000d68:	58020c00 	.word	0x58020c00
 8000d6c:	58021000 	.word	0x58021000
 8000d70:	58020800 	.word	0x58020800
 8000d74:	58021800 	.word	0x58021800

08000d78 <startPollingLoop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startPollingLoop */
void startPollingLoop(void *argument)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int time1Min = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60fb      	str	r3, [r7, #12]
	int time10Min = 0;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]

	for(;;){

		//checking if 1 minute has passed
		if(HAL_GetTick() - time1Min >= 60000){
 8000d88:	f000 fbec 	bl	8001564 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d907      	bls.n	8000daa <startPollingLoop+0x32>
		time1Min = HAL_GetTick();
 8000d9a:	f000 fbe3 	bl	8001564 <HAL_GetTick>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	60fb      	str	r3, [r7, #12]

		//checking battery percentage
		checkBattery();
 8000da2:	f7ff fca7 	bl	80006f4 <checkBattery>

		//checking current location
		checkLocation();
 8000da6:	f7ff fceb 	bl	8000780 <checkLocation>
		//logData(longitude, latitude, altitude);
		}

		//checking if 10 minutes have passed
		if(HAL_GetTick() - time10Min >= 600000){
 8000daa:	f000 fbdb 	bl	8001564 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <startPollingLoop+0x58>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d9e6      	bls.n	8000d88 <startPollingLoop+0x10>
			time10Min = HAL_GetTick();
 8000dba:	f000 fbd3 	bl	8001564 <HAL_GetTick>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	60bb      	str	r3, [r7, #8]

			if(descendFlag >= 10){
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <startPollingLoop+0x5c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b09      	cmp	r3, #9
 8000dc8:	ddde      	ble.n	8000d88 <startPollingLoop+0x10>
				lowPowerMode();
 8000dca:	f7ff fc7d 	bl	80006c8 <lowPowerMode>
		if(HAL_GetTick() - time1Min >= 60000){
 8000dce:	e7db      	b.n	8000d88 <startPollingLoop+0x10>
 8000dd0:	000927bf 	.word	0x000927bf
 8000dd4:	240007e0 	.word	0x240007e0

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x38>)
 8000dec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df0:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <HAL_MspInit+0x38>)
 8000df2:	f043 0302 	orr.w	r3, r3, #2
 8000df6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dfa:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_MspInit+0x38>)
 8000dfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e00:	f003 0302 	and.w	r3, r3, #2
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f06f 0001 	mvn.w	r0, #1
 8000e10:	f002 f98f 	bl	8003132 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	58024400 	.word	0x58024400

08000e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b0bc      	sub	sp, #240	; 0xf0
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	22c0      	movs	r2, #192	; 0xc0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f00a ff13 	bl	800bc6c <memset>
  if(hadc->Instance==ADC1)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	; (8000f34 <HAL_ADC_MspInit+0x114>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d16d      	bne.n	8000f2c <HAL_ADC_MspInit+0x10c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e50:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 32;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 129;
 8000e60:	2381      	movs	r3, #129	; 0x81
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e70:	23c0      	movs	r3, #192	; 0xc0
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e82:	f107 0318 	add.w	r3, r7, #24
 8000e86:	4618      	mov	r0, r3
 8000e88:	f004 f8e0 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 8000e92:	f7ff ffa1 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e96:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000e98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ea6:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000ea8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000eac:	f003 0320 	and.w	r3, r3, #32
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000eda:	f043 0301 	orr.w	r3, r3, #1
 8000ede:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_ADC_MspInit+0x118>)
 8000ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <HAL_ADC_MspInit+0x11c>)
 8000f0a:	f002 fd5d 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f14:	2303      	movs	r3, #3
 8000f16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f24:	4619      	mov	r1, r3
 8000f26:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_ADC_MspInit+0x120>)
 8000f28:	f002 fd4e 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f2c:	bf00      	nop
 8000f2e:	37f0      	adds	r7, #240	; 0xf0
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40022000 	.word	0x40022000
 8000f38:	58024400 	.word	0x58024400
 8000f3c:	58020800 	.word	0x58020800
 8000f40:	58020000 	.word	0x58020000

08000f44 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a59      	ldr	r2, [pc, #356]	; (80010c8 <HAL_ETH_MspInit+0x184>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	f040 80ab 	bne.w	80010be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f74:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f78:	4b54      	ldr	r3, [pc, #336]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f86:	4b51      	ldr	r3, [pc, #324]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8c:	4a4f      	ldr	r2, [pc, #316]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f96:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fa4:	4b49      	ldr	r3, [pc, #292]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000faa:	4a48      	ldr	r2, [pc, #288]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fb4:	4b45      	ldr	r3, [pc, #276]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	61bb      	str	r3, [r7, #24]
 8000fc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a40      	ldr	r2, [pc, #256]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fca:	f043 0304 	orr.w	r3, r3, #4
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b3a      	ldr	r3, [pc, #232]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe6:	4a39      	ldr	r2, [pc, #228]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff0:	4b36      	ldr	r3, [pc, #216]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8000ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	4b33      	ldr	r3, [pc, #204]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8001000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001004:	4a31      	ldr	r2, [pc, #196]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8001006:	f043 0302 	orr.w	r3, r3, #2
 800100a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8001010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_ETH_MspInit+0x188>)
 800101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001022:	4a2a      	ldr	r2, [pc, #168]	; (80010cc <HAL_ETH_MspInit+0x188>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001028:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102c:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_ETH_MspInit+0x188>)
 800102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800103a:	2332      	movs	r3, #50	; 0x32
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800104a:	230b      	movs	r3, #11
 800104c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	4619      	mov	r1, r3
 8001054:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_ETH_MspInit+0x18c>)
 8001056:	f002 fcb7 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800105a:	2386      	movs	r3, #134	; 0x86
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800106a:	230b      	movs	r3, #11
 800106c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001072:	4619      	mov	r1, r3
 8001074:	4817      	ldr	r0, [pc, #92]	; (80010d4 <HAL_ETH_MspInit+0x190>)
 8001076:	f002 fca7 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800108c:	230b      	movs	r3, #11
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001090:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001094:	4619      	mov	r1, r3
 8001096:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_ETH_MspInit+0x194>)
 8001098:	f002 fc96 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800109c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ae:	230b      	movs	r3, #11
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <HAL_ETH_MspInit+0x198>)
 80010ba:	f002 fc85 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3738      	adds	r7, #56	; 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40028000 	.word	0x40028000
 80010cc:	58024400 	.word	0x58024400
 80010d0:	58020800 	.word	0x58020800
 80010d4:	58020000 	.word	0x58020000
 80010d8:	58020400 	.word	0x58020400
 80010dc:	58021800 	.word	0x58021800

080010e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b0ba      	sub	sp, #232	; 0xe8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	22c0      	movs	r2, #192	; 0xc0
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00a fdb3 	bl	800bc6c <memset>
  if(huart->Instance==USART3)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a27      	ldr	r2, [pc, #156]	; (80011a8 <HAL_UART_MspInit+0xc8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d146      	bne.n	800119e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001110:	f04f 0202 	mov.w	r2, #2
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800111c:	2300      	movs	r3, #0
 800111e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4618      	mov	r0, r3
 8001128:	f003 ff90 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001132:	f7ff fe51 	bl	8000dd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_UART_MspInit+0xcc>)
 800113e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001142:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001148:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800114c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_UART_MspInit+0xcc>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_UART_MspInit+0xcc>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001172:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001176:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001192:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <HAL_UART_MspInit+0xd0>)
 800119a:	f002 fc15 	bl	80039c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	37e8      	adds	r7, #232	; 0xe8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40004800 	.word	0x40004800
 80011ac:	58024400 	.word	0x58024400
 80011b0:	58020c00 	.word	0x58020c00

080011b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0ba      	sub	sp, #232	; 0xe8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	22c0      	movs	r2, #192	; 0xc0
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f00a fd49 	bl	800bc6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a30      	ldr	r2, [pc, #192]	; (80012a0 <HAL_PCD_MspInit+0xec>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d159      	bne.n	8001298 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f003 ff25 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001208:	f7ff fde6 	bl	8000dd8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800120c:	f002 ff28 	bl	8004060 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800122e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001248:	230a      	movs	r3, #10
 800124a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001252:	4619      	mov	r1, r3
 8001254:	4814      	ldr	r0, [pc, #80]	; (80012a8 <HAL_PCD_MspInit+0xf4>)
 8001256:	f002 fbb7 	bl	80039c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800125a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800125e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	2300      	movs	r3, #0
 800126a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_PCD_MspInit+0xf4>)
 8001276:	f002 fba7 	bl	80039c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 800127c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 8001282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001286:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_PCD_MspInit+0xf0>)
 800128c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001298:	bf00      	nop
 800129a:	37e8      	adds	r7, #232	; 0xe8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40080000 	.word	0x40080000
 80012a4:	58024400 	.word	0x58024400
 80012a8:	58020000 	.word	0x58020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <NMI_Handler+0x4>

080012b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <HardFault_Handler+0x4>

080012b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <MemManage_Handler+0x4>

080012be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <BusFault_Handler+0x4>

080012c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <UsageFault_Handler+0x4>

080012ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012dc:	f000 f92e 	bl	800153c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e0:	f009 fc60 	bl	800aba4 <xTaskGetSchedulerState>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d001      	beq.n	80012ee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ea:	f00a fa45 	bl	800b778 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012f8:	4b37      	ldr	r3, [pc, #220]	; (80013d8 <SystemInit+0xe4>)
 80012fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fe:	4a36      	ldr	r2, [pc, #216]	; (80013d8 <SystemInit+0xe4>)
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001308:	4b34      	ldr	r3, [pc, #208]	; (80013dc <SystemInit+0xe8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	2b06      	cmp	r3, #6
 8001312:	d807      	bhi.n	8001324 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001314:	4b31      	ldr	r3, [pc, #196]	; (80013dc <SystemInit+0xe8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 030f 	bic.w	r3, r3, #15
 800131c:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <SystemInit+0xe8>)
 800131e:	f043 0307 	orr.w	r3, r3, #7
 8001322:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001324:	4b2e      	ldr	r3, [pc, #184]	; (80013e0 <SystemInit+0xec>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <SystemInit+0xec>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <SystemInit+0xec>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001336:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <SystemInit+0xec>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	4929      	ldr	r1, [pc, #164]	; (80013e0 <SystemInit+0xec>)
 800133c:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <SystemInit+0xf0>)
 800133e:	4013      	ands	r3, r2
 8001340:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001342:	4b26      	ldr	r3, [pc, #152]	; (80013dc <SystemInit+0xe8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d007      	beq.n	800135e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <SystemInit+0xe8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	4a21      	ldr	r2, [pc, #132]	; (80013dc <SystemInit+0xe8>)
 8001358:	f043 0307 	orr.w	r3, r3, #7
 800135c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <SystemInit+0xec>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <SystemInit+0xec>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <SystemInit+0xec>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <SystemInit+0xec>)
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <SystemInit+0xf4>)
 8001374:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <SystemInit+0xec>)
 8001378:	4a1c      	ldr	r2, [pc, #112]	; (80013ec <SystemInit+0xf8>)
 800137a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <SystemInit+0xec>)
 800137e:	4a1c      	ldr	r2, [pc, #112]	; (80013f0 <SystemInit+0xfc>)
 8001380:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001382:	4b17      	ldr	r3, [pc, #92]	; (80013e0 <SystemInit+0xec>)
 8001384:	2200      	movs	r2, #0
 8001386:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001388:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <SystemInit+0xec>)
 800138a:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <SystemInit+0xfc>)
 800138c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800138e:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <SystemInit+0xec>)
 8001390:	2200      	movs	r2, #0
 8001392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <SystemInit+0xec>)
 8001396:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <SystemInit+0xfc>)
 8001398:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <SystemInit+0xec>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <SystemInit+0xec>)
 80013a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <SystemInit+0xec>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <SystemInit+0x100>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <SystemInit+0x104>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013be:	d202      	bcs.n	80013c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013c0:	4b0e      	ldr	r3, [pc, #56]	; (80013fc <SystemInit+0x108>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <SystemInit+0x10c>)
 80013c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80013cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80013ce:	bf00      	nop
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	52002000 	.word	0x52002000
 80013e0:	58024400 	.word	0x58024400
 80013e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80013e8:	02020200 	.word	0x02020200
 80013ec:	01ff0000 	.word	0x01ff0000
 80013f0:	01010280 	.word	0x01010280
 80013f4:	5c001000 	.word	0x5c001000
 80013f8:	ffff0000 	.word	0xffff0000
 80013fc:	51008108 	.word	0x51008108
 8001400:	52004000 	.word	0x52004000

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001408:	f7ff ff74 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f00a fc23 	bl	800bc7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff f9dd 	bl	80007f4 <main>
  bx  lr
 800143a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800143c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001440:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001444:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001448:	0800bd88 	.word	0x0800bd88
  ldr r2, =_sbss
 800144c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001450:	24005144 	.word	0x24005144

08001454 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC3_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145e:	2003      	movs	r0, #3
 8001460:	f001 fe5c 	bl	800311c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001464:	f003 fc1c 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8001468:	4602      	mov	r2, r0
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_Init+0x68>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	0a1b      	lsrs	r3, r3, #8
 8001470:	f003 030f 	and.w	r3, r3, #15
 8001474:	4913      	ldr	r1, [pc, #76]	; (80014c4 <HAL_Init+0x6c>)
 8001476:	5ccb      	ldrb	r3, [r1, r3]
 8001478:	f003 031f 	and.w	r3, r3, #31
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
 8001480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_Init+0x68>)
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_Init+0x6c>)
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_Init+0x70>)
 800149a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800149c:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_Init+0x74>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a2:	200f      	movs	r0, #15
 80014a4:	f000 f814 	bl	80014d0 <HAL_InitTick>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e002      	b.n	80014b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014b2:	f7ff fc97 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	58024400 	.word	0x58024400
 80014c4:	0800bd40 	.word	0x0800bd40
 80014c8:	24000004 	.word	0x24000004
 80014cc:	24000000 	.word	0x24000000

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80014d8:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_InitTick+0x60>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e021      	b.n	8001528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_InitTick+0x64>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_InitTick+0x60>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 fe33 	bl	8003166 <HAL_SYSTICK_Config>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e00e      	b.n	8001528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b0f      	cmp	r3, #15
 800150e:	d80a      	bhi.n	8001526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001510:	2200      	movs	r2, #0
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f001 fe0b 	bl	8003132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4a06      	ldr	r2, [pc, #24]	; (8001538 <HAL_InitTick+0x68>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2400000c 	.word	0x2400000c
 8001534:	24000000 	.word	0x24000000
 8001538:	24000008 	.word	0x24000008

0800153c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_IncTick+0x20>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x24>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
 800154c:	4a04      	ldr	r2, [pc, #16]	; (8001560 <HAL_IncTick+0x24>)
 800154e:	6013      	str	r3, [r2, #0]
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2400000c 	.word	0x2400000c
 8001560:	240007f0 	.word	0x240007f0

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	240007f0 	.word	0x240007f0

0800157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001584:	f7ff ffee 	bl	8001564 <HAL_GetTick>
 8001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d005      	beq.n	80015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001596:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_Delay+0x44>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015a2:	bf00      	nop
 80015a4:	f7ff ffde 	bl	8001564 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d8f7      	bhi.n	80015a4 <HAL_Delay+0x28>
  {
  }
}
 80015b4:	bf00      	nop
 80015b6:	bf00      	nop
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	2400000c 	.word	0x2400000c

080015c4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_GetREVID+0x14>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1b      	lsrs	r3, r3, #16
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	5c001000 	.word	0x5c001000

080015dc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80015ec:	4904      	ldr	r1, [pc, #16]	; (8001600 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	58000400 	.word	0x58000400

08001604 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	609a      	str	r2, [r3, #8]
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800166c:	b480      	push	{r7}
 800166e:	b087      	sub	sp, #28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3360      	adds	r3, #96	; 0x60
 800167e:	461a      	mov	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	430b      	orrs	r3, r1
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80016a0:	bf00      	nop
 80016a2:	371c      	adds	r7, #28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f003 031f 	and.w	r3, r3, #31
 80016c6:	6879      	ldr	r1, [r7, #4]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80016de:	b480      	push	{r7}
 80016e0:	b087      	sub	sp, #28
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3360      	adds	r3, #96	; 0x60
 80016ee:	461a      	mov	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	431a      	orrs	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	601a      	str	r2, [r3, #0]
  }
}
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800173a:	b480      	push	{r7}
 800173c:	b087      	sub	sp, #28
 800173e:	af00      	add	r7, sp, #0
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3330      	adds	r3, #48	; 0x30
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	0a1b      	lsrs	r3, r3, #8
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	f003 031f 	and.w	r3, r3, #31
 8001764:	211f      	movs	r1, #31
 8001766:	fa01 f303 	lsl.w	r3, r1, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	401a      	ands	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0e9b      	lsrs	r3, r3, #26
 8001772:	f003 011f 	and.w	r1, r3, #31
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	fa01 f303 	lsl.w	r3, r1, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001786:	bf00      	nop
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001792:	b480      	push	{r7}
 8001794:	b087      	sub	sp, #28
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3314      	adds	r3, #20
 80017a2:	461a      	mov	r2, r3
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	0e5b      	lsrs	r3, r3, #25
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	f003 0304 	and.w	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	0d1b      	lsrs	r3, r3, #20
 80017ba:	f003 031f 	and.w	r3, r3, #31
 80017be:	2107      	movs	r1, #7
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0d1b      	lsrs	r3, r3, #20
 80017cc:	f003 031f 	and.w	r3, r3, #31
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	fa01 f303 	lsl.w	r3, r1, r3
 80017d6:	431a      	orrs	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80017dc:	bf00      	nop
 80017de:	371c      	adds	r7, #28
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0318 	and.w	r3, r3, #24
 800180a:	4908      	ldr	r1, [pc, #32]	; (800182c <LL_ADC_SetChannelSingleDiff+0x44>)
 800180c:	40d9      	lsrs	r1, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	400b      	ands	r3, r1
 8001812:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	000fffff 	.word	0x000fffff

08001830 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4b04      	ldr	r3, [pc, #16]	; (8001888 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001876:	4013      	ands	r3, r2
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6093      	str	r3, [r2, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	5fffffc0 	.word	0x5fffffc0

0800188c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800189c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	6fffffc0 	.word	0x6fffffc0

080018dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018f0:	d101      	bne.n	80018f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_ADC_Enable+0x24>)
 8001912:	4013      	ands	r3, r2
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	7fffffc0 	.word	0x7fffffc0

0800192c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <LL_ADC_Disable+0x24>)
 800193a:	4013      	ands	r3, r2
 800193c:	f043 0202 	orr.w	r2, r3, #2
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001944:	bf00      	nop
 8001946:	370c      	adds	r7, #12
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	7fffffc0 	.word	0x7fffffc0

08001954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <LL_ADC_IsEnabled+0x18>
 8001968:	2301      	movs	r3, #1
 800196a:	e000      	b.n	800196e <LL_ADC_IsEnabled+0x1a>
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b02      	cmp	r3, #2
 800198c:	d101      	bne.n	8001992 <LL_ADC_IsDisableOngoing+0x18>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <LL_ADC_IsDisableOngoing+0x1a>
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <LL_ADC_REG_StartConversion+0x24>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	f043 0204 	orr.w	r2, r3, #4
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	7fffffc0 	.word	0x7fffffc0

080019c8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <LL_ADC_REG_StopConversion+0x24>)
 80019d6:	4013      	ands	r3, r2
 80019d8:	f043 0210 	orr.w	r2, r3, #16
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	7fffffc0 	.word	0x7fffffc0

080019f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d101      	bne.n	8001a08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a04:	2301      	movs	r3, #1
 8001a06:	e000      	b.n	8001a0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <LL_ADC_INJ_StopConversion+0x24>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f043 0220 	orr.w	r2, r3, #32
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	7fffffc0 	.word	0x7fffffc0

08001a40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b08      	cmp	r3, #8
 8001a52:	d101      	bne.n	8001a58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e18f      	b.n	8001da2 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff f9c5 	bl	8000e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff feef 	bl	800188c <LL_ADC_IsDeepPowerDownEnabled>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fed5 	bl	8001868 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff ff0a 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d114      	bne.n	8001af8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff feee 	bl	80018b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ad8:	4b87      	ldr	r3, [pc, #540]	; (8001cf8 <HAL_ADC_Init+0x290>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	099b      	lsrs	r3, r3, #6
 8001ade:	4a87      	ldr	r2, [pc, #540]	; (8001cfc <HAL_ADC_Init+0x294>)
 8001ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aea:	e002      	b.n	8001af2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff feed 	bl	80018dc <LL_ADC_IsInternalRegulatorEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10d      	bne.n	8001b24 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f043 0210 	orr.w	r2, r3, #16
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff61 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001b2e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b34:	f003 0310 	and.w	r3, r3, #16
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 8129 	bne.w	8001d90 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f040 8125 	bne.w	8001d90 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b4e:	f043 0202 	orr.w	r2, r3, #2
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fefa 	bl	8001954 <LL_ADC_IsEnabled>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d136      	bne.n	8001bd4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a65      	ldr	r2, [pc, #404]	; (8001d00 <HAL_ADC_Init+0x298>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d004      	beq.n	8001b7a <HAL_ADC_Init+0x112>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a63      	ldr	r2, [pc, #396]	; (8001d04 <HAL_ADC_Init+0x29c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d10e      	bne.n	8001b98 <HAL_ADC_Init+0x130>
 8001b7a:	4861      	ldr	r0, [pc, #388]	; (8001d00 <HAL_ADC_Init+0x298>)
 8001b7c:	f7ff feea 	bl	8001954 <LL_ADC_IsEnabled>
 8001b80:	4604      	mov	r4, r0
 8001b82:	4860      	ldr	r0, [pc, #384]	; (8001d04 <HAL_ADC_Init+0x29c>)
 8001b84:	f7ff fee6 	bl	8001954 <LL_ADC_IsEnabled>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4323      	orrs	r3, r4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	e008      	b.n	8001baa <HAL_ADC_Init+0x142>
 8001b98:	485b      	ldr	r0, [pc, #364]	; (8001d08 <HAL_ADC_Init+0x2a0>)
 8001b9a:	f7ff fedb 	bl	8001954 <LL_ADC_IsEnabled>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d012      	beq.n	8001bd4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a53      	ldr	r2, [pc, #332]	; (8001d00 <HAL_ADC_Init+0x298>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d004      	beq.n	8001bc2 <HAL_ADC_Init+0x15a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a51      	ldr	r2, [pc, #324]	; (8001d04 <HAL_ADC_Init+0x29c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_ADC_Init+0x15e>
 8001bc2:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_ADC_Init+0x2a4>)
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_Init+0x160>
 8001bc6:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_ADC_Init+0x2a8>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f7ff fd18 	bl	8001604 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001bd4:	f7ff fcf6 	bl	80015c4 <HAL_GetREVID>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d914      	bls.n	8001c0c <HAL_ADC_Init+0x1a4>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b10      	cmp	r3, #16
 8001be8:	d110      	bne.n	8001c0c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7d5b      	ldrb	r3, [r3, #21]
 8001bee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001bf4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001bfa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	7f1b      	ldrb	r3, [r3, #28]
 8001c00:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001c02:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c04:	f043 030c 	orr.w	r3, r3, #12
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	e00d      	b.n	8001c28 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	7d5b      	ldrb	r3, [r3, #21]
 8001c10:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c16:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001c1c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7f1b      	ldrb	r3, [r3, #28]
 8001c22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	7f1b      	ldrb	r3, [r3, #28]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	045b      	lsls	r3, r3, #17
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d009      	beq.n	8001c5a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_ADC_Init+0x2ac>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff febc 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001c78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fede 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8001c84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d15f      	bne.n	8001d4c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d15c      	bne.n	8001d4c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	7d1b      	ldrb	r3, [r3, #20]
 8001c96:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_ADC_Init+0x2b0>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6812      	ldr	r2, [r2, #0]
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d130      	bne.n	8001d20 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_ADC_Init+0x2b4>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	0411      	lsls	r1, r2, #16
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	e01c      	b.n	8001d30 <HAL_ADC_Init+0x2c8>
 8001cf6:	bf00      	nop
 8001cf8:	24000000 	.word	0x24000000
 8001cfc:	053e2d63 	.word	0x053e2d63
 8001d00:	40022000 	.word	0x40022000
 8001d04:	40022100 	.word	0x40022100
 8001d08:	58026000 	.word	0x58026000
 8001d0c:	40022300 	.word	0x40022300
 8001d10:	58026300 	.word	0x58026300
 8001d14:	fff0c003 	.word	0xfff0c003
 8001d18:	ffffbffc 	.word	0xffffbffc
 8001d1c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 ff26 	bl	8002b98 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10c      	bne.n	8001d6e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5a:	f023 010f 	bic.w	r1, r3, #15
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d6c:	e007      	b.n	8001d7e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 020f 	bic.w	r2, r2, #15
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
 8001d8e:	e007      	b.n	8001da0 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd90      	pop	{r4, r7, pc}
 8001daa:	bf00      	nop

08001dac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <HAL_ADC_Start+0x180>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_ADC_Start+0x1c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_ADC_Start+0x184>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_Start+0x20>
 8001dc8:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_ADC_Start+0x188>)
 8001dca:	e000      	b.n	8001dce <HAL_ADC_Start+0x22>
 8001dcc:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_ADC_Start+0x18c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd2e 	bl	8001830 <LL_ADC_GetMultimode>
 8001dd4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fe08 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 809a 	bne.w	8001f1c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_ADC_Start+0x4a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e095      	b.n	8001f22 <HAL_ADC_Start+0x176>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 fde0 	bl	80029c4 <ADC_Enable>
 8001e04:	4603      	mov	r3, r0
 8001e06:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	f040 8081 	bne.w	8001f12 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_ADC_Start+0x190>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <HAL_ADC_Start+0x184>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d002      	beq.n	8001e30 <HAL_ADC_Start+0x84>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <HAL_ADC_Start+0x86>
 8001e30:	4b3e      	ldr	r3, [pc, #248]	; (8001f2c <HAL_ADC_Start+0x180>)
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d002      	beq.n	8001e40 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	f023 0206 	bic.w	r2, r3, #6
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
 8001e66:	e002      	b.n	8001e6e <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	221c      	movs	r2, #28
 8001e74:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <HAL_ADC_Start+0x184>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d002      	beq.n	8001e8e <HAL_ADC_Start+0xe2>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e000      	b.n	8001e90 <HAL_ADC_Start+0xe4>
 8001e8e:	4b27      	ldr	r3, [pc, #156]	; (8001f2c <HAL_ADC_Start+0x180>)
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d008      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b05      	cmp	r3, #5
 8001ea2:	d002      	beq.n	8001eaa <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	2b09      	cmp	r3, #9
 8001ea8:	d114      	bne.n	8001ed4 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ebc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ec0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fd67 	bl	80019a0 <LL_ADC_REG_StartConversion>
 8001ed2:	e025      	b.n	8001f20 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <HAL_ADC_Start+0x184>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d002      	beq.n	8001ef0 <HAL_ADC_Start+0x144>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e000      	b.n	8001ef2 <HAL_ADC_Start+0x146>
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_ADC_Start+0x180>)
 8001ef2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00f      	beq.n	8001f20 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
 8001f10:	e006      	b.n	8001f20 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f1a:	e001      	b.n	8001f20 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40022000 	.word	0x40022000
 8001f30:	40022100 	.word	0x40022100
 8001f34:	40022300 	.word	0x40022300
 8001f38:	58026300 	.word	0x58026300
 8001f3c:	fffff0fe 	.word	0xfffff0fe

08001f40 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d101      	bne.n	8001f56 <HAL_ADC_Stop+0x16>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e021      	b.n	8001f9a <HAL_ADC_Stop+0x5a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001f5e:	2103      	movs	r1, #3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 fc73 	bl	800284c <ADC_ConversionStop>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10f      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 fdb1 	bl	8002ad8 <ADC_Disable>
 8001f76:	4603      	mov	r3, r0
 8001f78:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <HAL_ADC_Stop+0x64>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	ffffeefe 	.word	0xffffeefe

08001fa8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d004      	beq.n	8001fc6 <HAL_ADC_PollForConversion+0x1e>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a70      	ldr	r2, [pc, #448]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_PollForConversion+0x22>
 8001fc6:	4b70      	ldr	r3, [pc, #448]	; (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 8001fc8:	e000      	b.n	8001fcc <HAL_ADC_PollForConversion+0x24>
 8001fca:	4b70      	ldr	r3, [pc, #448]	; (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fc2f 	bl	8001830 <LL_ADC_GetMultimode>
 8001fd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d102      	bne.n	8001fe2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	61fb      	str	r3, [r7, #28]
 8001fe0:	e037      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d002      	beq.n	8001ff4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b09      	cmp	r3, #9
 8001ff2:	d111      	bne.n	8002018 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d007      	beq.n	8002012 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0220 	orr.w	r2, r3, #32
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0b1      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002012:	2304      	movs	r3, #4
 8002014:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002016:	e01c      	b.n	8002052 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_ADC_PollForConversion+0x84>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_ADC_PollForConversion+0x88>
 800202c:	4b56      	ldr	r3, [pc, #344]	; (8002188 <HAL_ADC_PollForConversion+0x1e0>)
 800202e:	e000      	b.n	8002032 <HAL_ADC_PollForConversion+0x8a>
 8002030:	4b56      	ldr	r3, [pc, #344]	; (800218c <HAL_ADC_PollForConversion+0x1e4>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fc0a 	bl	800184c <LL_ADC_GetMultiDMATransfer>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002042:	f043 0220 	orr.w	r2, r3, #32
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e093      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800204e:	2304      	movs	r3, #4
 8002050:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002052:	f7ff fa87 	bl	8001564 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002058:	e021      	b.n	800209e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d01d      	beq.n	800209e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002062:	f7ff fa7f 	bl	8001564 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <HAL_ADC_PollForConversion+0xd0>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d112      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208a:	f043 0204 	orr.w	r2, r3, #4
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e06b      	b.n	8002176 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0d6      	beq.n	800205a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fb29 	bl	8001714 <LL_ADC_REG_IsTriggerSourceSWStart>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d01c      	beq.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7d5b      	ldrb	r3, [r3, #21]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d118      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d111      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1f      	ldr	r2, [pc, #124]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d002      	beq.n	8002112 <HAL_ADC_PollForConversion+0x16a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e000      	b.n	8002114 <HAL_ADC_PollForConversion+0x16c>
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4293      	cmp	r3, r2
 800211a:	d008      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d005      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d002      	beq.n	800212e <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b09      	cmp	r3, #9
 800212c:	d104      	bne.n	8002138 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e00c      	b.n	8002152 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a11      	ldr	r2, [pc, #68]	; (8002184 <HAL_ADC_PollForConversion+0x1dc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d002      	beq.n	8002148 <HAL_ADC_PollForConversion+0x1a0>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e000      	b.n	800214a <HAL_ADC_PollForConversion+0x1a2>
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <HAL_ADC_PollForConversion+0x1d8>)
 800214a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2208      	movs	r2, #8
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e008      	b.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d103      	bne.n	8002174 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	220c      	movs	r2, #12
 8002172:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40022000 	.word	0x40022000
 8002184:	40022100 	.word	0x40022100
 8002188:	40022300 	.word	0x40022300
 800218c:	58026300 	.word	0x58026300

08002190 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b0a1      	sub	sp, #132	; 0x84
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	4a9d      	ldr	r2, [pc, #628]	; (800243c <HAL_ADC_ConfigChannel+0x290>)
 80021c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_ADC_ConfigChannel+0x2a>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e321      	b.n	800281a <HAL_ADC_ConfigChannel+0x66e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc04 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f040 8306 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <HAL_ADC_ConfigChannel+0x62>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0e9b      	lsrs	r3, r3, #26
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	2201      	movs	r2, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	e016      	b.n	800223c <HAL_ADC_ConfigChannel+0x90>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800221c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800221e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002226:	2320      	movs	r3, #32
 8002228:	e003      	b.n	8002232 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800222a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	69d1      	ldr	r1, [r2, #28]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	430b      	orrs	r3, r1
 8002248:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	f7ff fa6f 	bl	800173a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fbc5 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8002266:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fbe7 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8002272:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002276:	2b00      	cmp	r3, #0
 8002278:	f040 80b3 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800227c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 80af 	bne.w	80023e2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6818      	ldr	r0, [r3, #0]
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	6819      	ldr	r1, [r3, #0]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	461a      	mov	r2, r3
 8002292:	f7ff fa7e 	bl	8001792 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002296:	4b6a      	ldr	r3, [pc, #424]	; (8002440 <HAL_ADC_ConfigChannel+0x294>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800229e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022a2:	d10b      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x110>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695a      	ldr	r2, [r3, #20]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	e01d      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x14c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	f003 0310 	and.w	r3, r3, #16
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10b      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x136>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	e00a      	b.n	80022f8 <HAL_ADC_ConfigChannel+0x14c>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	089b      	lsrs	r3, r3, #2
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d027      	beq.n	8002352 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6818      	ldr	r0, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	6919      	ldr	r1, [r3, #16]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002310:	f7ff f9ac 	bl	800166c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6919      	ldr	r1, [r3, #16]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	7e5b      	ldrb	r3, [r3, #25]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d102      	bne.n	800232a <HAL_ADC_ConfigChannel+0x17e>
 8002324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002328:	e000      	b.n	800232c <HAL_ADC_ConfigChannel+0x180>
 800232a:	2300      	movs	r3, #0
 800232c:	461a      	mov	r2, r3
 800232e:	f7ff f9d6 	bl	80016de <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6818      	ldr	r0, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	7e1b      	ldrb	r3, [r3, #24]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d102      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x19c>
 8002342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002346:	e000      	b.n	800234a <HAL_ADC_ConfigChannel+0x19e>
 8002348:	2300      	movs	r3, #0
 800234a:	461a      	mov	r2, r3
 800234c:	f7ff f9ae 	bl	80016ac <LL_ADC_SetDataRightShift>
 8002350:	e047      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002358:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	069b      	lsls	r3, r3, #26
 8002362:	429a      	cmp	r2, r3
 8002364:	d107      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002374:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800237c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	429a      	cmp	r2, r3
 8002388:	d107      	bne.n	800239a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002398:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	069b      	lsls	r3, r3, #26
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d107      	bne.n	80023be <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023bc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	069b      	lsls	r3, r3, #26
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d107      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023e0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fab4 	bl	8001954 <LL_ADC_IsEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 820d 	bne.w	800280e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6819      	ldr	r1, [r3, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	461a      	mov	r2, r3
 8002402:	f7ff f9f1 	bl	80017e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a0c      	ldr	r2, [pc, #48]	; (800243c <HAL_ADC_ConfigChannel+0x290>)
 800240c:	4293      	cmp	r3, r2
 800240e:	f040 8133 	bne.w	8002678 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800241e:	2b00      	cmp	r3, #0
 8002420:	d110      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x298>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e9b      	lsrs	r3, r3, #26
 8002428:	3301      	adds	r3, #1
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2b09      	cmp	r3, #9
 8002430:	bf94      	ite	ls
 8002432:	2301      	movls	r3, #1
 8002434:	2300      	movhi	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	e01e      	b.n	8002478 <HAL_ADC_ConfigChannel+0x2cc>
 800243a:	bf00      	nop
 800243c:	47ff0000 	.word	0x47ff0000
 8002440:	5c001000 	.word	0x5c001000
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002454:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002460:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2b09      	cmp	r3, #9
 8002470:	bf94      	ite	ls
 8002472:	2301      	movls	r3, #1
 8002474:	2300      	movhi	r3, #0
 8002476:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002478:	2b00      	cmp	r3, #0
 800247a:	d079      	beq.n	8002570 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x2ec>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e9b      	lsrs	r3, r3, #26
 800248e:	3301      	adds	r3, #1
 8002490:	069b      	lsls	r3, r3, #26
 8002492:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002496:	e015      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x318>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80024b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	069b      	lsls	r3, r3, #26
 80024c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d109      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x338>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	0e9b      	lsrs	r3, r3, #26
 80024d6:	3301      	adds	r3, #1
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	2101      	movs	r1, #1
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	e017      	b.n	8002514 <HAL_ADC_ConfigChannel+0x368>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ec:	fa93 f3a3 	rbit	r3, r3
 80024f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e003      	b.n	8002508 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	3301      	adds	r3, #1
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	2101      	movs	r1, #1
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	ea42 0103 	orr.w	r1, r2, r3
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10a      	bne.n	800253a <HAL_ADC_ConfigChannel+0x38e>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	051b      	lsls	r3, r3, #20
 8002538:	e018      	b.n	800256c <HAL_ADC_ConfigChannel+0x3c0>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f003 021f 	and.w	r2, r3, #31
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256c:	430b      	orrs	r3, r1
 800256e:	e07e      	b.n	800266e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_ADC_ConfigChannel+0x3e0>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	3301      	adds	r3, #1
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258a:	e015      	b.n	80025b8 <HAL_ADC_ConfigChannel+0x40c>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d101      	bne.n	80025a8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80025a4:	2320      	movs	r3, #32
 80025a6:	e003      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	fab3 f383 	clz	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	3301      	adds	r3, #1
 80025b2:	069b      	lsls	r3, r3, #26
 80025b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x42c>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0e9b      	lsrs	r3, r3, #26
 80025ca:	3301      	adds	r3, #1
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2101      	movs	r1, #1
 80025d2:	fa01 f303 	lsl.w	r3, r1, r3
 80025d6:	e017      	b.n	8002608 <HAL_ADC_ConfigChannel+0x45c>
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	61bb      	str	r3, [r7, #24]
  return result;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80025f0:	2320      	movs	r3, #32
 80025f2:	e003      	b.n	80025fc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	fab3 f383 	clz	r3, r3
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	3301      	adds	r3, #1
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2101      	movs	r1, #1
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	ea42 0103 	orr.w	r1, r2, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_ADC_ConfigChannel+0x488>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4613      	mov	r3, r2
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	4413      	add	r3, r2
 800262a:	3b1e      	subs	r3, #30
 800262c:	051b      	lsls	r3, r3, #20
 800262e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002632:	e01b      	b.n	800266c <HAL_ADC_ConfigChannel+0x4c0>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	60fb      	str	r3, [r7, #12]
  return result;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800264c:	2320      	movs	r3, #32
 800264e:	e003      	b.n	8002658 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	3301      	adds	r3, #1
 800265a:	f003 021f 	and.w	r2, r3, #31
 800265e:	4613      	mov	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	4413      	add	r3, r2
 8002664:	3b1e      	subs	r3, #30
 8002666:	051b      	lsls	r3, r3, #20
 8002668:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266c:	430b      	orrs	r3, r1
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	6892      	ldr	r2, [r2, #8]
 8002672:	4619      	mov	r1, r3
 8002674:	f7ff f88d 	bl	8001792 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f280 80c6 	bge.w	800280e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a67      	ldr	r2, [pc, #412]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_ADC_ConfigChannel+0x4ea>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a65      	ldr	r2, [pc, #404]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_ADC_ConfigChannel+0x4ee>
 8002696:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_ADC_ConfigChannel+0x680>)
 8002698:	e000      	b.n	800269c <HAL_ADC_ConfigChannel+0x4f0>
 800269a:	4b65      	ldr	r3, [pc, #404]	; (8002830 <HAL_ADC_ConfigChannel+0x684>)
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe ffd7 	bl	8001650 <LL_ADC_GetCommonPathInternalCh>
 80026a2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a5e      	ldr	r2, [pc, #376]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d004      	beq.n	80026b8 <HAL_ADC_ConfigChannel+0x50c>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a5d      	ldr	r2, [pc, #372]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d10e      	bne.n	80026d6 <HAL_ADC_ConfigChannel+0x52a>
 80026b8:	485a      	ldr	r0, [pc, #360]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 80026ba:	f7ff f94b 	bl	8001954 <LL_ADC_IsEnabled>
 80026be:	4604      	mov	r4, r0
 80026c0:	4859      	ldr	r0, [pc, #356]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 80026c2:	f7ff f947 	bl	8001954 <LL_ADC_IsEnabled>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4323      	orrs	r3, r4
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	e008      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x53c>
 80026d6:	4857      	ldr	r0, [pc, #348]	; (8002834 <HAL_ADC_ConfigChannel+0x688>)
 80026d8:	f7ff f93c 	bl	8001954 <LL_ADC_IsEnabled>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	bf0c      	ite	eq
 80026e2:	2301      	moveq	r3, #1
 80026e4:	2300      	movne	r3, #0
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d07d      	beq.n	80027e8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a51      	ldr	r2, [pc, #324]	; (8002838 <HAL_ADC_ConfigChannel+0x68c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d130      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x5ac>
 80026f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d12b      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a4b      	ldr	r2, [pc, #300]	; (8002834 <HAL_ADC_ConfigChannel+0x688>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 8081 	bne.w	800280e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a44      	ldr	r2, [pc, #272]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d004      	beq.n	8002720 <HAL_ADC_ConfigChannel+0x574>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a43      	ldr	r2, [pc, #268]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x578>
 8002720:	4a42      	ldr	r2, [pc, #264]	; (800282c <HAL_ADC_ConfigChannel+0x680>)
 8002722:	e000      	b.n	8002726 <HAL_ADC_ConfigChannel+0x57a>
 8002724:	4a42      	ldr	r2, [pc, #264]	; (8002830 <HAL_ADC_ConfigChannel+0x684>)
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f7fe ff7b 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002734:	4b41      	ldr	r3, [pc, #260]	; (800283c <HAL_ADC_ConfigChannel+0x690>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	4a41      	ldr	r2, [pc, #260]	; (8002840 <HAL_ADC_ConfigChannel+0x694>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	099b      	lsrs	r3, r3, #6
 8002742:	3301      	adds	r3, #1
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002748:	e002      	b.n	8002750 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	3b01      	subs	r3, #1
 800274e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f9      	bne.n	800274a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002756:	e05a      	b.n	800280e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a39      	ldr	r2, [pc, #228]	; (8002844 <HAL_ADC_ConfigChannel+0x698>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d11e      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5f4>
 8002762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002764:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d119      	bne.n	80027a0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_ADC_ConfigChannel+0x688>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d14b      	bne.n	800280e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2a      	ldr	r2, [pc, #168]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d004      	beq.n	800278a <HAL_ADC_ConfigChannel+0x5de>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a28      	ldr	r2, [pc, #160]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_ADC_ConfigChannel+0x5e2>
 800278a:	4a28      	ldr	r2, [pc, #160]	; (800282c <HAL_ADC_ConfigChannel+0x680>)
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x5e4>
 800278e:	4a28      	ldr	r2, [pc, #160]	; (8002830 <HAL_ADC_ConfigChannel+0x684>)
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002796:	4619      	mov	r1, r3
 8002798:	4610      	mov	r0, r2
 800279a:	f7fe ff46 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800279e:	e036      	b.n	800280e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a28      	ldr	r2, [pc, #160]	; (8002848 <HAL_ADC_ConfigChannel+0x69c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d131      	bne.n	800280e <HAL_ADC_ConfigChannel+0x662>
 80027aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12c      	bne.n	800280e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1e      	ldr	r2, [pc, #120]	; (8002834 <HAL_ADC_ConfigChannel+0x688>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d127      	bne.n	800280e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a18      	ldr	r2, [pc, #96]	; (8002824 <HAL_ADC_ConfigChannel+0x678>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d004      	beq.n	80027d2 <HAL_ADC_ConfigChannel+0x626>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_ADC_ConfigChannel+0x67c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x62a>
 80027d2:	4a16      	ldr	r2, [pc, #88]	; (800282c <HAL_ADC_ConfigChannel+0x680>)
 80027d4:	e000      	b.n	80027d8 <HAL_ADC_ConfigChannel+0x62c>
 80027d6:	4a16      	ldr	r2, [pc, #88]	; (8002830 <HAL_ADC_ConfigChannel+0x684>)
 80027d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80027de:	4619      	mov	r1, r3
 80027e0:	4610      	mov	r0, r2
 80027e2:	f7fe ff22 	bl	800162a <LL_ADC_SetCommonPathInternalCh>
 80027e6:	e012      	b.n	800280e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80027fa:	e008      	b.n	800280e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002800:	f043 0220 	orr.w	r2, r3, #32
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002816:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800281a:	4618      	mov	r0, r3
 800281c:	3784      	adds	r7, #132	; 0x84
 800281e:	46bd      	mov	sp, r7
 8002820:	bd90      	pop	{r4, r7, pc}
 8002822:	bf00      	nop
 8002824:	40022000 	.word	0x40022000
 8002828:	40022100 	.word	0x40022100
 800282c:	40022300 	.word	0x40022300
 8002830:	58026300 	.word	0x58026300
 8002834:	58026000 	.word	0x58026000
 8002838:	cb840000 	.word	0xcb840000
 800283c:	24000000 	.word	0x24000000
 8002840:	053e2d63 	.word	0x053e2d63
 8002844:	c7520000 	.word	0xc7520000
 8002848:	cfb80000 	.word	0xcfb80000

0800284c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f8c4 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 8002868:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff f8e6 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8002874:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8098 	beq.w	80029b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d02a      	beq.n	80028e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	7d5b      	ldrb	r3, [r3, #21]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d126      	bne.n	80028e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	7d1b      	ldrb	r3, [r3, #20]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d122      	bne.n	80028e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028a6:	e014      	b.n	80028d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4a45      	ldr	r2, [pc, #276]	; (80029c0 <ADC_ConversionStop+0x174>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d90d      	bls.n	80028cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b4:	f043 0210 	orr.w	r2, r3, #16
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e074      	b.n	80029b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	3301      	adds	r3, #1
 80028d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028dc:	2b40      	cmp	r3, #64	; 0x40
 80028de:	d1e3      	bne.n	80028a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d014      	beq.n	8002918 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff f87c 	bl	80019f0 <LL_ADC_REG_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7ff f839 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff f858 	bl	80019c8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d014      	beq.n	8002948 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f88c 	bl	8001a40 <LL_ADC_INJ_IsConversionOngoing>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00c      	beq.n	8002948 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f821 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d104      	bne.n	8002948 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f868 	bl	8001a18 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d005      	beq.n	800295a <ADC_ConversionStop+0x10e>
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d105      	bne.n	8002960 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002954:	230c      	movs	r3, #12
 8002956:	617b      	str	r3, [r7, #20]
        break;
 8002958:	e005      	b.n	8002966 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800295a:	2308      	movs	r3, #8
 800295c:	617b      	str	r3, [r7, #20]
        break;
 800295e:	e002      	b.n	8002966 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002960:	2304      	movs	r3, #4
 8002962:	617b      	str	r3, [r7, #20]
        break;
 8002964:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002966:	f7fe fdfd 	bl	8001564 <HAL_GetTick>
 800296a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800296c:	e01b      	b.n	80029a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800296e:	f7fe fdf9 	bl	8001564 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b05      	cmp	r3, #5
 800297a:	d914      	bls.n	80029a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e007      	b.n	80029b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	4013      	ands	r3, r2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1dc      	bne.n	800296e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3720      	adds	r7, #32
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	000cdbff 	.word	0x000cdbff

080029c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fe ffbf 	bl	8001954 <LL_ADC_IsEnabled>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d16e      	bne.n	8002aba <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <ADC_Enable+0x100>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0210 	orr.w	r2, r3, #16
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	f043 0201 	orr.w	r2, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e05a      	b.n	8002abc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe ff7a 	bl	8001904 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a10:	f7fe fda8 	bl	8001564 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <ADC_Enable+0x104>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d004      	beq.n	8002a2a <ADC_Enable+0x66>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a29      	ldr	r2, [pc, #164]	; (8002acc <ADC_Enable+0x108>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d101      	bne.n	8002a2e <ADC_Enable+0x6a>
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <ADC_Enable+0x10c>)
 8002a2c:	e000      	b.n	8002a30 <ADC_Enable+0x6c>
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <ADC_Enable+0x110>)
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7fe fefd 	bl	8001830 <LL_ADC_GetMultimode>
 8002a36:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	; (8002acc <ADC_Enable+0x108>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d002      	beq.n	8002a48 <ADC_Enable+0x84>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	e000      	b.n	8002a4a <ADC_Enable+0x86>
 8002a48:	4b1f      	ldr	r3, [pc, #124]	; (8002ac8 <ADC_Enable+0x104>)
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02c      	beq.n	8002aac <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d130      	bne.n	8002aba <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a58:	e028      	b.n	8002aac <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe ff78 	bl	8001954 <LL_ADC_IsEnabled>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d104      	bne.n	8002a74 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe ff48 	bl	8001904 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a74:	f7fe fd76 	bl	8001564 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d914      	bls.n	8002aac <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d00d      	beq.n	8002aac <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e007      	b.n	8002abc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d1cf      	bne.n	8002a5a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	8000003f 	.word	0x8000003f
 8002ac8:	40022000 	.word	0x40022000
 8002acc:	40022100 	.word	0x40022100
 8002ad0:	40022300 	.word	0x40022300
 8002ad4:	58026300 	.word	0x58026300

08002ad8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe ff48 	bl	800197a <LL_ADC_IsDisableOngoing>
 8002aea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ff2f 	bl	8001954 <LL_ADC_IsEnabled>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d047      	beq.n	8002b8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d144      	bne.n	8002b8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030d 	and.w	r3, r3, #13
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10c      	bne.n	8002b2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ff09 	bl	800192c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2203      	movs	r2, #3
 8002b20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fd1f 	bl	8001564 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b28:	e029      	b.n	8002b7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0210 	orr.w	r2, r3, #16
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f043 0201 	orr.w	r2, r3, #1
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e023      	b.n	8002b8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b46:	f7fe fd0d 	bl	8001564 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d914      	bls.n	8002b7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b66:	f043 0210 	orr.w	r2, r3, #16
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	f043 0201 	orr.w	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1dc      	bne.n	8002b46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
	...

08002b98 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7a      	ldr	r2, [pc, #488]	; (8002d90 <ADC_ConfigureBoostMode+0x1f8>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d004      	beq.n	8002bb4 <ADC_ConfigureBoostMode+0x1c>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a79      	ldr	r2, [pc, #484]	; (8002d94 <ADC_ConfigureBoostMode+0x1fc>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d109      	bne.n	8002bc8 <ADC_ConfigureBoostMode+0x30>
 8002bb4:	4b78      	ldr	r3, [pc, #480]	; (8002d98 <ADC_ConfigureBoostMode+0x200>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <ADC_ConfigureBoostMode+0x42>
 8002bc8:	4b74      	ldr	r3, [pc, #464]	; (8002d9c <ADC_ConfigureBoostMode+0x204>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01c      	beq.n	8002c18 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002bde:	f002 f9d9 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8002be2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bec:	d010      	beq.n	8002c10 <ADC_ConfigureBoostMode+0x78>
 8002bee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bf2:	d873      	bhi.n	8002cdc <ADC_ConfigureBoostMode+0x144>
 8002bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf8:	d002      	beq.n	8002c00 <ADC_ConfigureBoostMode+0x68>
 8002bfa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bfe:	d16d      	bne.n	8002cdc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0c:	60fb      	str	r3, [r7, #12]
        break;
 8002c0e:	e068      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	60fb      	str	r3, [r7, #12]
        break;
 8002c16:	e064      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c18:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	f003 fc1e 	bl	8006460 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c24:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c2e:	d051      	beq.n	8002cd4 <ADC_ConfigureBoostMode+0x13c>
 8002c30:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c34:	d854      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c36:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c3a:	d047      	beq.n	8002ccc <ADC_ConfigureBoostMode+0x134>
 8002c3c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c40:	d84e      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c42:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c46:	d03d      	beq.n	8002cc4 <ADC_ConfigureBoostMode+0x12c>
 8002c48:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c4c:	d848      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c52:	d033      	beq.n	8002cbc <ADC_ConfigureBoostMode+0x124>
 8002c54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c58:	d842      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c5a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c5e:	d029      	beq.n	8002cb4 <ADC_ConfigureBoostMode+0x11c>
 8002c60:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c64:	d83c      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c66:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c6a:	d01a      	beq.n	8002ca2 <ADC_ConfigureBoostMode+0x10a>
 8002c6c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c70:	d836      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c72:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c76:	d014      	beq.n	8002ca2 <ADC_ConfigureBoostMode+0x10a>
 8002c78:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c7c:	d830      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c82:	d00e      	beq.n	8002ca2 <ADC_ConfigureBoostMode+0x10a>
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c88:	d82a      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c8a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c8e:	d008      	beq.n	8002ca2 <ADC_ConfigureBoostMode+0x10a>
 8002c90:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c94:	d824      	bhi.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
 8002c96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c9a:	d002      	beq.n	8002ca2 <ADC_ConfigureBoostMode+0x10a>
 8002c9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ca0:	d11e      	bne.n	8002ce0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	0c9b      	lsrs	r3, r3, #18
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	60fb      	str	r3, [r7, #12]
        break;
 8002cb2:	e016      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	091b      	lsrs	r3, r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
        break;
 8002cba:	e012      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	60fb      	str	r3, [r7, #12]
        break;
 8002cc2:	e00e      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	099b      	lsrs	r3, r3, #6
 8002cc8:	60fb      	str	r3, [r7, #12]
        break;
 8002cca:	e00a      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	09db      	lsrs	r3, r3, #7
 8002cd0:	60fb      	str	r3, [r7, #12]
        break;
 8002cd2:	e006      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	0a1b      	lsrs	r3, r3, #8
 8002cd8:	60fb      	str	r3, [r7, #12]
        break;
 8002cda:	e002      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8002ce0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002ce2:	f7fe fc6f 	bl	80015c4 <HAL_GetREVID>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d815      	bhi.n	8002d1c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <ADC_ConfigureBoostMode+0x208>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d908      	bls.n	8002d0a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d06:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d08:	e03e      	b.n	8002d88 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	e035      	b.n	8002d88 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <ADC_ConfigureBoostMode+0x20c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d808      	bhi.n	8002d3c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	e025      	b.n	8002d88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <ADC_ConfigureBoostMode+0x210>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d80a      	bhi.n	8002d5a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	e016      	b.n	8002d88 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <ADC_ConfigureBoostMode+0x214>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d80a      	bhi.n	8002d78 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d74:	609a      	str	r2, [r3, #8]
}
 8002d76:	e007      	b.n	8002d88 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	40022000 	.word	0x40022000
 8002d94:	40022100 	.word	0x40022100
 8002d98:	40022300 	.word	0x40022300
 8002d9c:	58026300 	.word	0x58026300
 8002da0:	01312d00 	.word	0x01312d00
 8002da4:	005f5e10 	.word	0x005f5e10
 8002da8:	00bebc20 	.word	0x00bebc20
 8002dac:	017d7840 	.word	0x017d7840

08002db0 <LL_ADC_IsEnabled>:
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <LL_ADC_IsEnabled+0x18>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e000      	b.n	8002dca <LL_ADC_IsEnabled+0x1a>
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d101      	bne.n	8002dee <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002dfc:	b590      	push	{r4, r7, lr}
 8002dfe:	b09f      	sub	sp, #124	; 0x7c
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e0be      	b.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e22:	2300      	movs	r3, #0
 8002e24:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e26:	2300      	movs	r3, #0
 8002e28:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d102      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e34:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	e001      	b.n	8002e3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e09d      	b.n	8002f98 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff ffb9 	bl	8002dd6 <LL_ADC_REG_IsConversionOngoing>
 8002e64:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff ffb3 	bl	8002dd6 <LL_ADC_REG_IsConversionOngoing>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d17f      	bne.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d17c      	bne.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a47      	ldr	r2, [pc, #284]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d004      	beq.n	8002e90 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a46      	ldr	r2, [pc, #280]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002e92:	e000      	b.n	8002e96 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002e96:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d039      	beq.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d004      	beq.n	8002ec6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a38      	ldr	r2, [pc, #224]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10e      	bne.n	8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ec6:	4836      	ldr	r0, [pc, #216]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ec8:	f7ff ff72 	bl	8002db0 <LL_ADC_IsEnabled>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4835      	ldr	r0, [pc, #212]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ed0:	f7ff ff6e 	bl	8002db0 <LL_ADC_IsEnabled>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4323      	orrs	r3, r4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	e008      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002ee4:	4832      	ldr	r0, [pc, #200]	; (8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002ee6:	f7ff ff63 	bl	8002db0 <LL_ADC_IsEnabled>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	bf0c      	ite	eq
 8002ef0:	2301      	moveq	r3, #1
 8002ef2:	2300      	movne	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d047      	beq.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	6811      	ldr	r1, [r2, #0]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6892      	ldr	r2, [r2, #8]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f10:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f12:	e03a      	b.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10e      	bne.n	8002f52 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f34:	481a      	ldr	r0, [pc, #104]	; (8002fa0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f36:	f7ff ff3b 	bl	8002db0 <LL_ADC_IsEnabled>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4819      	ldr	r0, [pc, #100]	; (8002fa4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f3e:	f7ff ff37 	bl	8002db0 <LL_ADC_IsEnabled>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4323      	orrs	r3, r4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	bf0c      	ite	eq
 8002f4a:	2301      	moveq	r3, #1
 8002f4c:	2300      	movne	r3, #0
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	e008      	b.n	8002f64 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f52:	4817      	ldr	r0, [pc, #92]	; (8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f54:	f7ff ff2c 	bl	8002db0 <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f72:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f74:	e009      	b.n	8002f8a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	f043 0220 	orr.w	r2, r3, #32
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002f88:	e000      	b.n	8002f8c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f8a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	377c      	adds	r7, #124	; 0x7c
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40022100 	.word	0x40022100
 8002fa8:	40022300 	.word	0x40022300
 8002fac:	58026300 	.word	0x58026300
 8002fb0:	58026000 	.word	0x58026000
 8002fb4:	fffff0e0 	.word	0xfffff0e0

08002fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe6:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <__NVIC_SetPriorityGrouping+0x40>)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	60d3      	str	r3, [r2, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000ed00 	.word	0xe000ed00
 8002ffc:	05fa0000 	.word	0x05fa0000

08003000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <__NVIC_GetPriorityGrouping+0x18>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 0307 	and.w	r3, r3, #7
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	6039      	str	r1, [r7, #0]
 8003026:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800302c:	2b00      	cmp	r3, #0
 800302e:	db0a      	blt.n	8003046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	490c      	ldr	r1, [pc, #48]	; (8003068 <__NVIC_SetPriority+0x4c>)
 8003036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800303a:	0112      	lsls	r2, r2, #4
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	440b      	add	r3, r1
 8003040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003044:	e00a      	b.n	800305c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <__NVIC_SetPriority+0x50>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	f003 030f 	and.w	r3, r3, #15
 8003052:	3b04      	subs	r3, #4
 8003054:	0112      	lsls	r2, r2, #4
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	440b      	add	r3, r1
 800305a:	761a      	strb	r2, [r3, #24]
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	e000e100 	.word	0xe000e100
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003070:	b480      	push	{r7}
 8003072:	b089      	sub	sp, #36	; 0x24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	f1c3 0307 	rsb	r3, r3, #7
 800308a:	2b04      	cmp	r3, #4
 800308c:	bf28      	it	cs
 800308e:	2304      	movcs	r3, #4
 8003090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3304      	adds	r3, #4
 8003096:	2b06      	cmp	r3, #6
 8003098:	d902      	bls.n	80030a0 <NVIC_EncodePriority+0x30>
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3b03      	subs	r3, #3
 800309e:	e000      	b.n	80030a2 <NVIC_EncodePriority+0x32>
 80030a0:	2300      	movs	r3, #0
 80030a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a4:	f04f 32ff 	mov.w	r2, #4294967295
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43da      	mvns	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b8:	f04f 31ff 	mov.w	r1, #4294967295
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa01 f303 	lsl.w	r3, r1, r3
 80030c2:	43d9      	mvns	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	4313      	orrs	r3, r2
         );
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e8:	d301      	bcc.n	80030ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030ea:	2301      	movs	r3, #1
 80030ec:	e00f      	b.n	800310e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <SysTick_Config+0x40>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f6:	210f      	movs	r1, #15
 80030f8:	f04f 30ff 	mov.w	r0, #4294967295
 80030fc:	f7ff ff8e 	bl	800301c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003100:	4b05      	ldr	r3, [pc, #20]	; (8003118 <SysTick_Config+0x40>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003106:	4b04      	ldr	r3, [pc, #16]	; (8003118 <SysTick_Config+0x40>)
 8003108:	2207      	movs	r2, #7
 800310a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	e000e010 	.word	0xe000e010

0800311c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff47 	bl	8002fb8 <__NVIC_SetPriorityGrouping>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	4603      	mov	r3, r0
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
 800313e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff5e 	bl	8003000 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff90 	bl	8003070 <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5f 	bl	800301c <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ffb2 	bl	80030d8 <SysTick_Config>
 8003174:	4603      	mov	r3, r0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e0cf      	b.n	8003332 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	2b00      	cmp	r3, #0
 800319a:	d106      	bne.n	80031aa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2223      	movs	r2, #35	; 0x23
 80031a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f7fd fecd 	bl	8000f44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031aa:	4b64      	ldr	r3, [pc, #400]	; (800333c <HAL_ETH_Init+0x1bc>)
 80031ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031b0:	4a62      	ldr	r2, [pc, #392]	; (800333c <HAL_ETH_Init+0x1bc>)
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80031ba:	4b60      	ldr	r3, [pc, #384]	; (800333c <HAL_ETH_Init+0x1bc>)
 80031bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7a1b      	ldrb	r3, [r3, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d103      	bne.n	80031d8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80031d0:	2000      	movs	r0, #0
 80031d2:	f7fe fa03 	bl	80015dc <HAL_SYSCFG_ETHInterfaceSelect>
 80031d6:	e003      	b.n	80031e0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80031d8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80031dc:	f7fe f9fe 	bl	80015dc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80031e0:	4b57      	ldr	r3, [pc, #348]	; (8003340 <HAL_ETH_Init+0x1c0>)
 80031e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6812      	ldr	r2, [r2, #0]
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fc:	f7fe f9b2 	bl	8001564 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003202:	e011      	b.n	8003228 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003204:	f7fe f9ae 	bl	8001564 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003212:	d909      	bls.n	8003228 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2204      	movs	r2, #4
 8003218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	22e0      	movs	r2, #224	; 0xe0
 8003220:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e084      	b.n	8003332 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1e4      	bne.n	8003204 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f886 	bl	800334c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003240:	f001 fea8 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8003244:	4603      	mov	r3, r0
 8003246:	4a3f      	ldr	r2, [pc, #252]	; (8003344 <HAL_ETH_Init+0x1c4>)
 8003248:	fba2 2303 	umull	r2, r3, r2, r3
 800324c:	0c9a      	lsrs	r2, r3, #18
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	3a01      	subs	r2, #1
 8003254:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fa71 	bl	8003740 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003266:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800326a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003276:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800327a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d009      	beq.n	800329e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	22e0      	movs	r2, #224	; 0xe0
 8003296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e049      	b.n	8003332 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032a6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80032aa:	4b27      	ldr	r3, [pc, #156]	; (8003348 <HAL_ETH_Init+0x1c8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6952      	ldr	r2, [r2, #20]
 80032b2:	0051      	lsls	r1, r2, #1
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	430b      	orrs	r3, r1
 80032ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032be:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fad9 	bl	800387a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fb1f 	bl	800390c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	3305      	adds	r3, #5
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	3304      	adds	r3, #4
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4619      	mov	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	3303      	adds	r3, #3
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	061a      	lsls	r2, r3, #24
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	3302      	adds	r3, #2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800330c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800331a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800331c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2210      	movs	r2, #16
 800332c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	58024400 	.word	0x58024400
 8003340:	58000400 	.word	0x58000400
 8003344:	431bde83 	.word	0x431bde83
 8003348:	ffff8001 	.word	0xffff8001

0800334c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800335c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003364:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003366:	f001 fe15 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 800336a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d908      	bls.n	8003386 <HAL_ETH_SetMDIOClockRange+0x3a>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d804      	bhi.n	8003386 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e027      	b.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_ETH_SetMDIOClockRange+0xa0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d908      	bls.n	80033a0 <HAL_ETH_SetMDIOClockRange+0x54>
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d204      	bcs.n	80033a0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	e01a      	b.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4a13      	ldr	r2, [pc, #76]	; (80033f0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d303      	bcc.n	80033b0 <HAL_ETH_SetMDIOClockRange+0x64>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a12      	ldr	r2, [pc, #72]	; (80033f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d911      	bls.n	80033d4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d908      	bls.n	80033ca <HAL_ETH_SetMDIOClockRange+0x7e>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	; (80033f8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d804      	bhi.n	80033ca <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e005      	b.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	e000      	b.n	80033d6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80033d4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	01312cff 	.word	0x01312cff
 80033ec:	02160ebf 	.word	0x02160ebf
 80033f0:	03938700 	.word	0x03938700
 80033f4:	05f5e0ff 	.word	0x05f5e0ff
 80033f8:	08f0d17f 	.word	0x08f0d17f

080033fc <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800340e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003416:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7b1b      	ldrb	r3, [r3, #12]
 800341c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800341e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	7b5b      	ldrb	r3, [r3, #13]
 8003424:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003426:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	7b9b      	ldrb	r3, [r3, #14]
 800342c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800342e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	7bdb      	ldrb	r3, [r3, #15]
 8003434:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003436:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	7c12      	ldrb	r2, [r2, #16]
 800343c:	2a00      	cmp	r2, #0
 800343e:	d102      	bne.n	8003446 <ETH_SetMACConfig+0x4a>
 8003440:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003444:	e000      	b.n	8003448 <ETH_SetMACConfig+0x4c>
 8003446:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003448:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	7c52      	ldrb	r2, [r2, #17]
 800344e:	2a00      	cmp	r2, #0
 8003450:	d102      	bne.n	8003458 <ETH_SetMACConfig+0x5c>
 8003452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003456:	e000      	b.n	800345a <ETH_SetMACConfig+0x5e>
 8003458:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800345a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	7c9b      	ldrb	r3, [r3, #18]
 8003460:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003462:	431a      	orrs	r2, r3
               macconf->Speed |
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003468:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800346e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7f1b      	ldrb	r3, [r3, #28]
 8003474:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003476:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	7f5b      	ldrb	r3, [r3, #29]
 800347c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800347e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	7f92      	ldrb	r2, [r2, #30]
 8003484:	2a00      	cmp	r2, #0
 8003486:	d102      	bne.n	800348e <ETH_SetMACConfig+0x92>
 8003488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348c:	e000      	b.n	8003490 <ETH_SetMACConfig+0x94>
 800348e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003490:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	7fdb      	ldrb	r3, [r3, #31]
 8003496:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003498:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	d102      	bne.n	80034aa <ETH_SetMACConfig+0xae>
 80034a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a8:	e000      	b.n	80034ac <ETH_SetMACConfig+0xb0>
 80034aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80034ac:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80034b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034ba:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80034bc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <ETH_SetMACConfig+0x22c>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	68f9      	ldr	r1, [r7, #12]
 80034d6:	430b      	orrs	r3, r1
 80034d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80034e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80034f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034fa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80034fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003504:	2a00      	cmp	r2, #0
 8003506:	d102      	bne.n	800350e <ETH_SetMACConfig+0x112>
 8003508:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800350c:	e000      	b.n	8003510 <ETH_SetMACConfig+0x114>
 800350e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003510:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	4b42      	ldr	r3, [pc, #264]	; (800362c <ETH_SetMACConfig+0x230>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	68f9      	ldr	r1, [r7, #12]
 800352a:	430b      	orrs	r3, r1
 800352c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003534:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	4b3a      	ldr	r3, [pc, #232]	; (8003630 <ETH_SetMACConfig+0x234>)
 8003546:	4013      	ands	r3, r2
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	6812      	ldr	r2, [r2, #0]
 800354c:	68f9      	ldr	r1, [r7, #12]
 800354e:	430b      	orrs	r3, r1
 8003550:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003558:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800355e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003566:	2a00      	cmp	r2, #0
 8003568:	d101      	bne.n	800356e <ETH_SetMACConfig+0x172>
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	e000      	b.n	8003570 <ETH_SetMACConfig+0x174>
 800356e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003570:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003576:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003582:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003586:	4013      	ands	r3, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	68f9      	ldr	r1, [r7, #12]
 800358e:	430b      	orrs	r3, r1
 8003590:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003598:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80035a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f023 0103 	bic.w	r1, r3, #3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80035c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d101      	bne.n	80035ea <ETH_SetMACConfig+0x1ee>
 80035e6:	2240      	movs	r2, #64	; 0x40
 80035e8:	e000      	b.n	80035ec <ETH_SetMACConfig+0x1f0>
 80035ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80035ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80035f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80035fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800360c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	430a      	orrs	r2, r1
 8003618:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800361c:	bf00      	nop
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	00048083 	.word	0x00048083
 800362c:	c0f88000 	.word	0xc0f88000
 8003630:	fffffef0 	.word	0xfffffef0

08003634 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	4b38      	ldr	r3, [pc, #224]	; (800372c <ETH_SetDMAConfig+0xf8>)
 800364a:	4013      	ands	r3, r2
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	6811      	ldr	r1, [r2, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800365a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	791b      	ldrb	r3, [r3, #4]
 8003660:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003666:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	7b1b      	ldrb	r3, [r3, #12]
 800366c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800366e:	4313      	orrs	r3, r2
 8003670:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	4b2c      	ldr	r3, [pc, #176]	; (8003730 <ETH_SetDMAConfig+0xfc>)
 800367e:	4013      	ands	r3, r2
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	430b      	orrs	r3, r1
 8003688:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800368c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	7b5b      	ldrb	r3, [r3, #13]
 8003692:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036a4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80036a8:	4b22      	ldr	r3, [pc, #136]	; (8003734 <ETH_SetDMAConfig+0x100>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	430b      	orrs	r3, r1
 80036b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036b8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	7d1b      	ldrb	r3, [r3, #20]
 80036c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80036c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	7f5b      	ldrb	r3, [r3, #29]
 80036cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80036da:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <ETH_SetDMAConfig+0x104>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80036ee:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	7f1b      	ldrb	r3, [r3, #28]
 80036f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003708:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <ETH_SetDMAConfig+0x108>)
 800370e:	4013      	ands	r3, r2
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	430b      	orrs	r3, r1
 8003718:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800371c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8003720:	bf00      	nop
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	ffff87fd 	.word	0xffff87fd
 8003730:	ffff2ffe 	.word	0xffff2ffe
 8003734:	fffec000 	.word	0xfffec000
 8003738:	ffc0efef 	.word	0xffc0efef
 800373c:	7fc0ffff 	.word	0x7fc0ffff

08003740 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0a4      	sub	sp, #144	; 0x90
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003748:	2301      	movs	r3, #1
 800374a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800374e:	2300      	movs	r3, #0
 8003750:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800376a:	2301      	movs	r3, #1
 800376c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003776:	2301      	movs	r3, #1
 8003778:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800377c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003780:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003788:	2300      	movs	r3, #0
 800378a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800378c:	2300      	movs	r3, #0
 800378e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003798:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800379c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800379e:	2300      	movs	r3, #0
 80037a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80037a4:	2300      	movs	r3, #0
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80037ba:	2300      	movs	r3, #0
 80037bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80037be:	2300      	movs	r3, #0
 80037c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80037c2:	2300      	movs	r3, #0
 80037c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80037d8:	2320      	movs	r3, #32
 80037da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80037ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80037fc:	2302      	movs	r3, #2
 80037fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003802:	2300      	movs	r3, #0
 8003804:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800381a:	2300      	movs	r3, #0
 800381c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fde6 	bl	80033fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003830:	2301      	movs	r3, #1
 8003832:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003834:	2301      	movs	r3, #1
 8003836:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003838:	2300      	movs	r3, #0
 800383a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003846:	2300      	movs	r3, #0
 8003848:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800384a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800384e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003850:	2300      	movs	r3, #0
 8003852:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003854:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003858:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003860:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f7ff fee1 	bl	8003634 <ETH_SetDMAConfig>
}
 8003872:	bf00      	nop
 8003874:	3790      	adds	r7, #144	; 0x90
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	e01d      	b.n	80038c4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68d9      	ldr	r1, [r3, #12]
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2200      	movs	r2, #0
 80038a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2200      	movs	r2, #0
 80038aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2200      	movs	r2, #0
 80038b0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80038b2:	68b9      	ldr	r1, [r7, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	3206      	adds	r2, #6
 80038ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	3301      	adds	r3, #1
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d9de      	bls.n	8003888 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d8:	461a      	mov	r2, r3
 80038da:	2303      	movs	r3, #3
 80038dc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038fc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	e023      	b.n	8003962 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6919      	ldr	r1, [r3, #16]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	440b      	add	r3, r1
 800392a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2200      	movs	r2, #0
 8003936:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	3212      	adds	r2, #18
 8003958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3301      	adds	r3, #1
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b03      	cmp	r3, #3
 8003966:	d9d8      	bls.n	800391a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398e:	461a      	mov	r2, r3
 8003990:	2303      	movs	r3, #3
 8003992:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691a      	ldr	r2, [r3, #16]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80039b6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
	...

080039c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	; 0x24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80039d6:	4b89      	ldr	r3, [pc, #548]	; (8003bfc <HAL_GPIO_Init+0x234>)
 80039d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80039da:	e194      	b.n	8003d06 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2101      	movs	r1, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	4013      	ands	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8186 	beq.w	8003d00 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d005      	beq.n	8003a0c <HAL_GPIO_Init+0x44>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d130      	bne.n	8003a6e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	2203      	movs	r2, #3
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	69ba      	ldr	r2, [r7, #24]
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a42:	2201      	movs	r2, #1
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	f003 0201 	and.w	r2, r3, #1
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d017      	beq.n	8003aaa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	2203      	movs	r2, #3
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d123      	bne.n	8003afe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	220f      	movs	r2, #15
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	43db      	mvns	r3, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	08da      	lsrs	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3208      	adds	r2, #8
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	69ba      	ldr	r2, [r7, #24]
 8003b12:	4013      	ands	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0203 	and.w	r2, r3, #3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80e0 	beq.w	8003d00 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b40:	4b2f      	ldr	r3, [pc, #188]	; (8003c00 <HAL_GPIO_Init+0x238>)
 8003b42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b46:	4a2e      	ldr	r2, [pc, #184]	; (8003c00 <HAL_GPIO_Init+0x238>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003b50:	4b2b      	ldr	r3, [pc, #172]	; (8003c00 <HAL_GPIO_Init+0x238>)
 8003b52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_GPIO_Init+0x23c>)
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	089b      	lsrs	r3, r3, #2
 8003b64:	3302      	adds	r3, #2
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	220f      	movs	r2, #15
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a20      	ldr	r2, [pc, #128]	; (8003c08 <HAL_GPIO_Init+0x240>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d052      	beq.n	8003c30 <HAL_GPIO_Init+0x268>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a1f      	ldr	r2, [pc, #124]	; (8003c0c <HAL_GPIO_Init+0x244>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d031      	beq.n	8003bf6 <HAL_GPIO_Init+0x22e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_GPIO_Init+0x248>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <HAL_GPIO_Init+0x22a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a1d      	ldr	r2, [pc, #116]	; (8003c14 <HAL_GPIO_Init+0x24c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d025      	beq.n	8003bee <HAL_GPIO_Init+0x226>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <HAL_GPIO_Init+0x250>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d01f      	beq.n	8003bea <HAL_GPIO_Init+0x222>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a1b      	ldr	r2, [pc, #108]	; (8003c1c <HAL_GPIO_Init+0x254>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d019      	beq.n	8003be6 <HAL_GPIO_Init+0x21e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1a      	ldr	r2, [pc, #104]	; (8003c20 <HAL_GPIO_Init+0x258>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_GPIO_Init+0x21a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_GPIO_Init+0x25c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00d      	beq.n	8003bde <HAL_GPIO_Init+0x216>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_GPIO_Init+0x260>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d007      	beq.n	8003bda <HAL_GPIO_Init+0x212>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <HAL_GPIO_Init+0x264>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d101      	bne.n	8003bd6 <HAL_GPIO_Init+0x20e>
 8003bd2:	2309      	movs	r3, #9
 8003bd4:	e02d      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bd6:	230a      	movs	r3, #10
 8003bd8:	e02b      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bda:	2308      	movs	r3, #8
 8003bdc:	e029      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bde:	2307      	movs	r3, #7
 8003be0:	e027      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003be2:	2306      	movs	r3, #6
 8003be4:	e025      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003be6:	2305      	movs	r3, #5
 8003be8:	e023      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e021      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e01f      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e01d      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01b      	b.n	8003c32 <HAL_GPIO_Init+0x26a>
 8003bfa:	bf00      	nop
 8003bfc:	58000080 	.word	0x58000080
 8003c00:	58024400 	.word	0x58024400
 8003c04:	58000400 	.word	0x58000400
 8003c08:	58020000 	.word	0x58020000
 8003c0c:	58020400 	.word	0x58020400
 8003c10:	58020800 	.word	0x58020800
 8003c14:	58020c00 	.word	0x58020c00
 8003c18:	58021000 	.word	0x58021000
 8003c1c:	58021400 	.word	0x58021400
 8003c20:	58021800 	.word	0x58021800
 8003c24:	58021c00 	.word	0x58021c00
 8003c28:	58022000 	.word	0x58022000
 8003c2c:	58022400 	.word	0x58022400
 8003c30:	2300      	movs	r3, #0
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	f002 0203 	and.w	r2, r2, #3
 8003c38:	0092      	lsls	r2, r2, #2
 8003c3a:	4093      	lsls	r3, r2
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c42:	4938      	ldr	r1, [pc, #224]	; (8003d24 <HAL_GPIO_Init+0x35c>)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	3302      	adds	r3, #2
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ca4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d003      	beq.n	8003cd0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f47f ae63 	bne.w	80039dc <HAL_GPIO_Init+0x14>
  }
}
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
 8003d1a:	3724      	adds	r7, #36	; 0x24
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	58000400 	.word	0x58000400

08003d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	807b      	strh	r3, [r7, #2]
 8003d34:	4613      	mov	r3, r2
 8003d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d38:	787b      	ldrb	r3, [r7, #1]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d3e:	887a      	ldrh	r2, [r7, #2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003d44:	e003      	b.n	8003d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d46:	887b      	ldrh	r3, [r7, #2]
 8003d48:	041a      	lsls	r2, r3, #16
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	619a      	str	r2, [r3, #24]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d5c:	b08f      	sub	sp, #60	; 0x3c
 8003d5e:	af0a      	add	r7, sp, #40	; 0x28
 8003d60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e116      	b.n	8003f9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d106      	bne.n	8003d8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fa14 	bl	80011b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d102      	bne.n	8003da6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f004 ff90 	bl	8008cd0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	687e      	ldr	r6, [r7, #4]
 8003db8:	466d      	mov	r5, sp
 8003dba:	f106 0410 	add.w	r4, r6, #16
 8003dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dca:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dce:	1d33      	adds	r3, r6, #4
 8003dd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dd2:	6838      	ldr	r0, [r7, #0]
 8003dd4:	f004 ff0e 	bl	8008bf4 <USB_CoreInit>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0d7      	b.n	8003f9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2100      	movs	r1, #0
 8003df0:	4618      	mov	r0, r3
 8003df2:	f004 ff7e 	bl	8008cf2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df6:	2300      	movs	r3, #0
 8003df8:	73fb      	strb	r3, [r7, #15]
 8003dfa:	e04a      	b.n	8003e92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4413      	add	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	333d      	adds	r3, #61	; 0x3d
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	333c      	adds	r3, #60	; 0x3c
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	b298      	uxth	r0, r3
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3356      	adds	r3, #86	; 0x56
 8003e38:	4602      	mov	r2, r0
 8003e3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	3340      	adds	r3, #64	; 0x40
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e50:	7bfa      	ldrb	r2, [r7, #15]
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	4613      	mov	r3, r2
 8003e56:	00db      	lsls	r3, r3, #3
 8003e58:	4413      	add	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	3344      	adds	r3, #68	; 0x44
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3348      	adds	r3, #72	; 0x48
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	334c      	adds	r3, #76	; 0x4c
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3af      	bcc.n	8003dfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	73fb      	strb	r3, [r7, #15]
 8003ea0:	e044      	b.n	8003f2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ea2:	7bfa      	ldrb	r2, [r7, #15]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eb8:	7bfa      	ldrb	r2, [r7, #15]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003eca:	7bfa      	ldrb	r2, [r7, #15]
 8003ecc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ece:	7bfa      	ldrb	r2, [r7, #15]
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003efa:	7bfa      	ldrb	r2, [r7, #15]
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	00db      	lsls	r3, r3, #3
 8003f02:	4413      	add	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f10:	7bfa      	ldrb	r2, [r7, #15]
 8003f12:	6879      	ldr	r1, [r7, #4]
 8003f14:	4613      	mov	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003f22:	2200      	movs	r2, #0
 8003f24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
 8003f2c:	7bfa      	ldrb	r2, [r7, #15]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d3b5      	bcc.n	8003ea2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	687e      	ldr	r6, [r7, #4]
 8003f3e:	466d      	mov	r5, sp
 8003f40:	f106 0410 	add.w	r4, r6, #16
 8003f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f50:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f54:	1d33      	adds	r3, r6, #4
 8003f56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f58:	6838      	ldr	r0, [r7, #0]
 8003f5a:	f004 ff17 	bl	8008d8c <USB_DevInit>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e014      	b.n	8003f9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f80b 	bl	8003fa4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f005 f8d5 	bl	8009142 <USB_DevDisconnect>

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003fa4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	10000003 	.word	0x10000003

08003fec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <HAL_PWREx_ConfigSupply+0x70>)
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00a      	beq.n	8004016 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <HAL_PWREx_ConfigSupply+0x70>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e01f      	b.n	8004052 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e01d      	b.n	8004052 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004016:	4b11      	ldr	r3, [pc, #68]	; (800405c <HAL_PWREx_ConfigSupply+0x70>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f023 0207 	bic.w	r2, r3, #7
 800401e:	490f      	ldr	r1, [pc, #60]	; (800405c <HAL_PWREx_ConfigSupply+0x70>)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4313      	orrs	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004026:	f7fd fa9d 	bl	8001564 <HAL_GetTick>
 800402a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800402c:	e009      	b.n	8004042 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800402e:	f7fd fa99 	bl	8001564 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800403c:	d901      	bls.n	8004042 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e007      	b.n	8004052 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004042:	4b06      	ldr	r3, [pc, #24]	; (800405c <HAL_PWREx_ConfigSupply+0x70>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	d1ee      	bne.n	800402e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	58024800 	.word	0x58024800

08004060 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004060:	b480      	push	{r7}
 8004062:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004064:	4b05      	ldr	r3, [pc, #20]	; (800407c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406e:	60d3      	str	r3, [r2, #12]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	58024800 	.word	0x58024800

08004080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f000 bc48 	b.w	8004924 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 8088 	beq.w	80041b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040a2:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80040b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d007      	beq.n	80040c8 <HAL_RCC_OscConfig+0x48>
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ba:	2b18      	cmp	r3, #24
 80040bc:	d111      	bne.n	80040e2 <HAL_RCC_OscConfig+0x62>
 80040be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d10c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c8:	4b8f      	ldr	r3, [pc, #572]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d06d      	beq.n	80041b0 <HAL_RCC_OscConfig+0x130>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d169      	bne.n	80041b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	f000 bc21 	b.w	8004924 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ea:	d106      	bne.n	80040fa <HAL_RCC_OscConfig+0x7a>
 80040ec:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a85      	ldr	r2, [pc, #532]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80040f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e02e      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10c      	bne.n	800411c <HAL_RCC_OscConfig+0x9c>
 8004102:	4b81      	ldr	r3, [pc, #516]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a80      	ldr	r2, [pc, #512]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a7d      	ldr	r2, [pc, #500]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004114:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e01d      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004124:	d10c      	bne.n	8004140 <HAL_RCC_OscConfig+0xc0>
 8004126:	4b78      	ldr	r3, [pc, #480]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a77      	ldr	r2, [pc, #476]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800412c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b75      	ldr	r3, [pc, #468]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a74      	ldr	r2, [pc, #464]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413c:	6013      	str	r3, [r2, #0]
 800413e:	e00b      	b.n	8004158 <HAL_RCC_OscConfig+0xd8>
 8004140:	4b71      	ldr	r3, [pc, #452]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a70      	ldr	r2, [pc, #448]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	4b6e      	ldr	r3, [pc, #440]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a6d      	ldr	r2, [pc, #436]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d013      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fd fa00 	bl	8001564 <HAL_GetTick>
 8004164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd f9fc 	bl	8001564 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e3d4      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d0f0      	beq.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e014      	b.n	80041b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd f9ec 	bl	8001564 <HAL_GetTick>
 800418c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004190:	f7fd f9e8 	bl	8001564 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e3c0      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041a2:	4b59      	ldr	r3, [pc, #356]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x110>
 80041ae:	e000      	b.n	80041b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80ca 	beq.w	8004354 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041c0:	4b51      	ldr	r3, [pc, #324]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <HAL_RCC_OscConfig+0x166>
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2b18      	cmp	r3, #24
 80041da:	d156      	bne.n	800428a <HAL_RCC_OscConfig+0x20a>
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d151      	bne.n	800428a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041e6:	4b48      	ldr	r3, [pc, #288]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0304 	and.w	r3, r3, #4
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e392      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0219 	bic.w	r2, r3, #25
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	493f      	ldr	r1, [pc, #252]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800420c:	4313      	orrs	r3, r2
 800420e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd f9a8 	bl	8001564 <HAL_GetTick>
 8004214:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004218:	f7fd f9a4 	bl	8001564 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e37c      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004236:	f7fd f9c5 	bl	80015c4 <HAL_GetREVID>
 800423a:	4603      	mov	r3, r0
 800423c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004240:	4293      	cmp	r3, r2
 8004242:	d817      	bhi.n	8004274 <HAL_RCC_OscConfig+0x1f4>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d108      	bne.n	800425e <HAL_RCC_OscConfig+0x1de>
 800424c:	4b2e      	ldr	r3, [pc, #184]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004254:	4a2c      	ldr	r2, [pc, #176]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800425a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800425c:	e07a      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425e:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	031b      	lsls	r3, r3, #12
 800426c:	4926      	ldr	r1, [pc, #152]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004272:	e06f      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b24      	ldr	r3, [pc, #144]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	4921      	ldr	r1, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004288:	e064      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d047      	beq.n	8004322 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004292:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0219 	bic.w	r2, r3, #25
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	491a      	ldr	r1, [pc, #104]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd f95e 	bl	8001564 <HAL_GetTick>
 80042a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ac:	f7fd f95a 	bl	8001564 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e332      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042be:	4b12      	ldr	r3, [pc, #72]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ca:	f7fd f97b 	bl	80015c4 <HAL_GetREVID>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d819      	bhi.n	800430c <HAL_RCC_OscConfig+0x28c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d108      	bne.n	80042f2 <HAL_RCC_OscConfig+0x272>
 80042e0:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042e8:	4a07      	ldr	r2, [pc, #28]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ee:	6053      	str	r3, [r2, #4]
 80042f0:	e030      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
 80042f2:	4b05      	ldr	r3, [pc, #20]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	031b      	lsls	r3, r3, #12
 8004300:	4901      	ldr	r1, [pc, #4]	; (8004308 <HAL_RCC_OscConfig+0x288>)
 8004302:	4313      	orrs	r3, r2
 8004304:	604b      	str	r3, [r1, #4]
 8004306:	e025      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
 8004308:	58024400 	.word	0x58024400
 800430c:	4b9a      	ldr	r3, [pc, #616]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4997      	ldr	r1, [pc, #604]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
 8004320:	e018      	b.n	8004354 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004322:	4b95      	ldr	r3, [pc, #596]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a94      	ldr	r2, [pc, #592]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd f919 	bl	8001564 <HAL_GetTick>
 8004332:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004336:	f7fd f915 	bl	8001564 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e2ed      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004348:	4b8b      	ldr	r3, [pc, #556]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1f0      	bne.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0310 	and.w	r3, r3, #16
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 80a9 	beq.w	80044b4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004362:	4b85      	ldr	r3, [pc, #532]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800436a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800436c:	4b82      	ldr	r3, [pc, #520]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800436e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004370:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d007      	beq.n	8004388 <HAL_RCC_OscConfig+0x308>
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b18      	cmp	r3, #24
 800437c:	d13a      	bne.n	80043f4 <HAL_RCC_OscConfig+0x374>
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d135      	bne.n	80043f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004388:	4b7b      	ldr	r3, [pc, #492]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_OscConfig+0x320>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d001      	beq.n	80043a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e2c1      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a0:	f7fd f910 	bl	80015c4 <HAL_GetREVID>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d817      	bhi.n	80043de <HAL_RCC_OscConfig+0x35e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d108      	bne.n	80043c8 <HAL_RCC_OscConfig+0x348>
 80043b6:	4b70      	ldr	r3, [pc, #448]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80043be:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043c6:	e075      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043c8:	4b6b      	ldr	r3, [pc, #428]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	4968      	ldr	r1, [pc, #416]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043dc:	e06a      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043de:	4b66      	ldr	r3, [pc, #408]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	061b      	lsls	r3, r3, #24
 80043ec:	4962      	ldr	r1, [pc, #392]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f2:	e05f      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d042      	beq.n	8004482 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043fc:	4b5e      	ldr	r3, [pc, #376]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a5d      	ldr	r2, [pc, #372]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004408:	f7fd f8ac 	bl	8001564 <HAL_GetTick>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004410:	f7fd f8a8 	bl	8001564 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e280      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004422:	4b55      	ldr	r3, [pc, #340]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0f0      	beq.n	8004410 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800442e:	f7fd f8c9 	bl	80015c4 <HAL_GetREVID>
 8004432:	4603      	mov	r3, r0
 8004434:	f241 0203 	movw	r2, #4099	; 0x1003
 8004438:	4293      	cmp	r3, r2
 800443a:	d817      	bhi.n	800446c <HAL_RCC_OscConfig+0x3ec>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a1b      	ldr	r3, [r3, #32]
 8004440:	2b20      	cmp	r3, #32
 8004442:	d108      	bne.n	8004456 <HAL_RCC_OscConfig+0x3d6>
 8004444:	4b4c      	ldr	r3, [pc, #304]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800444c:	4a4a      	ldr	r2, [pc, #296]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800444e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004452:	6053      	str	r3, [r2, #4]
 8004454:	e02e      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	069b      	lsls	r3, r3, #26
 8004464:	4944      	ldr	r1, [pc, #272]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
 800446a:	e023      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
 800446c:	4b42      	ldr	r3, [pc, #264]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	493f      	ldr	r1, [pc, #252]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800447c:	4313      	orrs	r3, r2
 800447e:	60cb      	str	r3, [r1, #12]
 8004480:	e018      	b.n	80044b4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004482:	4b3d      	ldr	r3, [pc, #244]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a3c      	ldr	r2, [pc, #240]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd f869 	bl	8001564 <HAL_GetTick>
 8004492:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004496:	f7fd f865 	bl	8001564 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e23d      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1f0      	bne.n	8004496 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d036      	beq.n	800452e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d019      	beq.n	80044fc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fd f846 	bl	8001564 <HAL_GetTick>
 80044d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fd f842 	bl	8001564 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e21a      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044ee:	4b22      	ldr	r3, [pc, #136]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0x45c>
 80044fa:	e018      	b.n	800452e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044fc:	4b1e      	ldr	r3, [pc, #120]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fd f82c 	bl	8001564 <HAL_GetTick>
 800450c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004510:	f7fd f828 	bl	8001564 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e200      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1f0      	bne.n	8004510 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d039      	beq.n	80045ae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d01c      	beq.n	800457c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a0c      	ldr	r2, [pc, #48]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 8004548:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800454c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800454e:	f7fd f809 	bl	8001564 <HAL_GetTick>
 8004552:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004556:	f7fd f805 	bl	8001564 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e1dd      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_RCC_OscConfig+0x4f8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x4d6>
 8004574:	e01b      	b.n	80045ae <HAL_RCC_OscConfig+0x52e>
 8004576:	bf00      	nop
 8004578:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800457c:	4b9b      	ldr	r3, [pc, #620]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a9a      	ldr	r2, [pc, #616]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004586:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004588:	f7fc ffec 	bl	8001564 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004590:	f7fc ffe8 	bl	8001564 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1c0      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045a2:	4b92      	ldr	r3, [pc, #584]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 8081 	beq.w	80046be <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045bc:	4b8c      	ldr	r3, [pc, #560]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a8b      	ldr	r2, [pc, #556]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045c8:	f7fc ffcc 	bl	8001564 <HAL_GetTick>
 80045cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d0:	f7fc ffc8 	bl	8001564 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b64      	cmp	r3, #100	; 0x64
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e1a0      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045e2:	4b83      	ldr	r3, [pc, #524]	; (80047f0 <HAL_RCC_OscConfig+0x770>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d0f0      	beq.n	80045d0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x584>
 80045f6:	4b7d      	ldr	r3, [pc, #500]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045fa:	4a7c      	ldr	r2, [pc, #496]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	6713      	str	r3, [r2, #112]	; 0x70
 8004602:	e02d      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10c      	bne.n	8004626 <HAL_RCC_OscConfig+0x5a6>
 800460c:	4b77      	ldr	r3, [pc, #476]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004610:	4a76      	ldr	r2, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	; 0x70
 8004618:	4b74      	ldr	r3, [pc, #464]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461c:	4a73      	ldr	r2, [pc, #460]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	; 0x70
 8004624:	e01c      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	2b05      	cmp	r3, #5
 800462c:	d10c      	bne.n	8004648 <HAL_RCC_OscConfig+0x5c8>
 800462e:	4b6f      	ldr	r3, [pc, #444]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a6e      	ldr	r2, [pc, #440]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	4b6c      	ldr	r3, [pc, #432]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a6b      	ldr	r2, [pc, #428]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004640:	f043 0301 	orr.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	e00b      	b.n	8004660 <HAL_RCC_OscConfig+0x5e0>
 8004648:	4b68      	ldr	r3, [pc, #416]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800464a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464c:	4a67      	ldr	r2, [pc, #412]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	6713      	str	r3, [r2, #112]	; 0x70
 8004654:	4b65      	ldr	r3, [pc, #404]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004658:	4a64      	ldr	r2, [pc, #400]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800465a:	f023 0304 	bic.w	r3, r3, #4
 800465e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7fc ff7c 	bl	8001564 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fc ff78 	bl	8001564 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e14e      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004686:	4b59      	ldr	r3, [pc, #356]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0ee      	beq.n	8004670 <HAL_RCC_OscConfig+0x5f0>
 8004692:	e014      	b.n	80046be <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004694:	f7fc ff66 	bl	8001564 <HAL_GetTick>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800469a:	e00a      	b.n	80046b2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469c:	f7fc ff62 	bl	8001564 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e138      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046b2:	4b4e      	ldr	r3, [pc, #312]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1ee      	bne.n	800469c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 812d 	beq.w	8004922 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80046c8:	4b48      	ldr	r3, [pc, #288]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046d0:	2b18      	cmp	r3, #24
 80046d2:	f000 80bd 	beq.w	8004850 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b02      	cmp	r3, #2
 80046dc:	f040 809e 	bne.w	800481c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e0:	4b42      	ldr	r3, [pc, #264]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a41      	ldr	r2, [pc, #260]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80046e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fc ff3a 	bl	8001564 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fc ff36 	bl	8001564 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e10e      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004712:	4b36      	ldr	r3, [pc, #216]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <HAL_RCC_OscConfig+0x774>)
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004722:	0112      	lsls	r2, r2, #4
 8004724:	430a      	orrs	r2, r1
 8004726:	4931      	ldr	r1, [pc, #196]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	628b      	str	r3, [r1, #40]	; 0x28
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	3b01      	subs	r3, #1
 8004732:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473a:	3b01      	subs	r3, #1
 800473c:	025b      	lsls	r3, r3, #9
 800473e:	b29b      	uxth	r3, r3
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004746:	3b01      	subs	r3, #1
 8004748:	041b      	lsls	r3, r3, #16
 800474a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004754:	3b01      	subs	r3, #1
 8004756:	061b      	lsls	r3, r3, #24
 8004758:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800475c:	4923      	ldr	r1, [pc, #140]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800475e:	4313      	orrs	r3, r2
 8004760:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	4a21      	ldr	r2, [pc, #132]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004768:	f023 0301 	bic.w	r3, r3, #1
 800476c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800476e:	4b1f      	ldr	r3, [pc, #124]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004770:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004772:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCC_OscConfig+0x778>)
 8004774:	4013      	ands	r3, r2
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800477a:	00d2      	lsls	r2, r2, #3
 800477c:	491b      	ldr	r1, [pc, #108]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 800477e:	4313      	orrs	r3, r2
 8004780:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004782:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004786:	f023 020c 	bic.w	r2, r3, #12
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	4917      	ldr	r1, [pc, #92]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004790:	4313      	orrs	r3, r2
 8004792:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004794:	4b15      	ldr	r3, [pc, #84]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 8004796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004798:	f023 0202 	bic.w	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	4912      	ldr	r1, [pc, #72]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80047be:	4b0b      	ldr	r3, [pc, #44]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c2:	4a0a      	ldr	r2, [pc, #40]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80047ca:	4b08      	ldr	r3, [pc, #32]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a04      	ldr	r2, [pc, #16]	; (80047ec <HAL_RCC_OscConfig+0x76c>)
 80047dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7fc febf 	bl	8001564 <HAL_GetTick>
 80047e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047e8:	e011      	b.n	800480e <HAL_RCC_OscConfig+0x78e>
 80047ea:	bf00      	nop
 80047ec:	58024400 	.word	0x58024400
 80047f0:	58024800 	.word	0x58024800
 80047f4:	fffffc0c 	.word	0xfffffc0c
 80047f8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047fc:	f7fc feb2 	bl	8001564 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e08a      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480e:	4b47      	ldr	r3, [pc, #284]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d0f0      	beq.n	80047fc <HAL_RCC_OscConfig+0x77c>
 800481a:	e082      	b.n	8004922 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481c:	4b43      	ldr	r3, [pc, #268]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a42      	ldr	r2, [pc, #264]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004822:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004828:	f7fc fe9c 	bl	8001564 <HAL_GetTick>
 800482c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800482e:	e008      	b.n	8004842 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004830:	f7fc fe98 	bl	8001564 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b02      	cmp	r3, #2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e070      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004842:	4b3a      	ldr	r3, [pc, #232]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1f0      	bne.n	8004830 <HAL_RCC_OscConfig+0x7b0>
 800484e:	e068      	b.n	8004922 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004850:	4b36      	ldr	r3, [pc, #216]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004854:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004856:	4b35      	ldr	r3, [pc, #212]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b01      	cmp	r3, #1
 8004862:	d031      	beq.n	80048c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f003 0203 	and.w	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486e:	429a      	cmp	r2, r3
 8004870:	d12a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	091b      	lsrs	r3, r3, #4
 8004876:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800487e:	429a      	cmp	r2, r3
 8004880:	d122      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d11a      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	0a5b      	lsrs	r3, r3, #9
 8004896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d111      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	0c1b      	lsrs	r3, r3, #16
 80048a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d108      	bne.n	80048c8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	0e1b      	lsrs	r3, r3, #24
 80048ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e02b      	b.n	8004924 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80048cc:	4b17      	ldr	r3, [pc, #92]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 80048ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d0:	08db      	lsrs	r3, r3, #3
 80048d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d01f      	beq.n	8004922 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048e2:	4b12      	ldr	r3, [pc, #72]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	4a11      	ldr	r2, [pc, #68]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 80048e8:	f023 0301 	bic.w	r3, r3, #1
 80048ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048ee:	f7fc fe39 	bl	8001564 <HAL_GetTick>
 80048f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048f4:	bf00      	nop
 80048f6:	f7fc fe35 	bl	8001564 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	4293      	cmp	r3, r2
 8004900:	d0f9      	beq.n	80048f6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004902:	4b0a      	ldr	r3, [pc, #40]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004906:	4b0a      	ldr	r3, [pc, #40]	; (8004930 <HAL_RCC_OscConfig+0x8b0>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800490e:	00d2      	lsls	r2, r2, #3
 8004910:	4906      	ldr	r1, [pc, #24]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004912:	4313      	orrs	r3, r2
 8004914:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	4a04      	ldr	r2, [pc, #16]	; (800492c <HAL_RCC_OscConfig+0x8ac>)
 800491c:	f043 0301 	orr.w	r3, r3, #1
 8004920:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	; 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	58024400 	.word	0x58024400
 8004930:	ffff0007 	.word	0xffff0007

08004934 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e19c      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004948:	4b8a      	ldr	r3, [pc, #552]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	683a      	ldr	r2, [r7, #0]
 8004952:	429a      	cmp	r2, r3
 8004954:	d910      	bls.n	8004978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004956:	4b87      	ldr	r3, [pc, #540]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 020f 	bic.w	r2, r3, #15
 800495e:	4985      	ldr	r1, [pc, #532]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	4313      	orrs	r3, r2
 8004964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e184      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	4b7b      	ldr	r3, [pc, #492]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004990:	429a      	cmp	r2, r3
 8004992:	d908      	bls.n	80049a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004994:	4b78      	ldr	r3, [pc, #480]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	4975      	ldr	r1, [pc, #468]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	4b70      	ldr	r3, [pc, #448]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049be:	429a      	cmp	r2, r3
 80049c0:	d908      	bls.n	80049d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049c2:	4b6d      	ldr	r3, [pc, #436]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	496a      	ldr	r1, [pc, #424]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	4b64      	ldr	r3, [pc, #400]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d908      	bls.n	8004a02 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049f0:	4b61      	ldr	r3, [pc, #388]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	495e      	ldr	r1, [pc, #376]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	4b59      	ldr	r3, [pc, #356]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d908      	bls.n	8004a30 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004a1e:	4b56      	ldr	r3, [pc, #344]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4953      	ldr	r1, [pc, #332]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d010      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	4b4d      	ldr	r3, [pc, #308]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d908      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a4c:	4b4a      	ldr	r3, [pc, #296]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	f023 020f 	bic.w	r2, r3, #15
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4947      	ldr	r1, [pc, #284]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d055      	beq.n	8004b16 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a6a:	4b43      	ldr	r3, [pc, #268]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4940      	ldr	r1, [pc, #256]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d107      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a84:	4b3c      	ldr	r3, [pc, #240]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d121      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0f6      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a9c:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d115      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0ea      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0de      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ac4:	4b2c      	ldr	r3, [pc, #176]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0d6      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ad4:	4b28      	ldr	r3, [pc, #160]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f023 0207 	bic.w	r2, r3, #7
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	4925      	ldr	r1, [pc, #148]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae6:	f7fc fd3d 	bl	8001564 <HAL_GetTick>
 8004aea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aee:	f7fc fd39 	bl	8001564 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0be      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b04:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d1eb      	bne.n	8004aee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68da      	ldr	r2, [r3, #12]
 8004b26:	4b14      	ldr	r3, [pc, #80]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d208      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f023 020f 	bic.w	r2, r3, #15
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	490e      	ldr	r1, [pc, #56]	; (8004b78 <HAL_RCC_ClockConfig+0x244>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 030f 	and.w	r3, r3, #15
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d214      	bcs.n	8004b7c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b52:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 020f 	bic.w	r2, r3, #15
 8004b5a:	4906      	ldr	r1, [pc, #24]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b62:	4b04      	ldr	r3, [pc, #16]	; (8004b74 <HAL_RCC_ClockConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d005      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e086      	b.n	8004c82 <HAL_RCC_ClockConfig+0x34e>
 8004b74:	52002000 	.word	0x52002000
 8004b78:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b98:	4b3c      	ldr	r3, [pc, #240]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	4939      	ldr	r1, [pc, #228]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d010      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	4b34      	ldr	r3, [pc, #208]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d208      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bc6:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	492e      	ldr	r1, [pc, #184]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0310 	and.w	r3, r3, #16
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	4b28      	ldr	r3, [pc, #160]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d208      	bcs.n	8004c06 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bf4:	4b25      	ldr	r3, [pc, #148]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	4922      	ldr	r1, [pc, #136]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69da      	ldr	r2, [r3, #28]
 8004c16:	4b1d      	ldr	r3, [pc, #116]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d208      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	4917      	ldr	r1, [pc, #92]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c34:	f000 f834 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	0a1b      	lsrs	r3, r3, #8
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	4912      	ldr	r1, [pc, #72]	; (8004c90 <HAL_RCC_ClockConfig+0x35c>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c52:	4b0e      	ldr	r3, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x358>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	4a0d      	ldr	r2, [pc, #52]	; (8004c90 <HAL_RCC_ClockConfig+0x35c>)
 8004c5c:	5cd3      	ldrb	r3, [r2, r3]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <HAL_RCC_ClockConfig+0x360>)
 8004c6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c6c:	4a0a      	ldr	r2, [pc, #40]	; (8004c98 <HAL_RCC_ClockConfig+0x364>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_RCC_ClockConfig+0x368>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fc fc2a 	bl	80014d0 <HAL_InitTick>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	58024400 	.word	0x58024400
 8004c90:	0800bd40 	.word	0x0800bd40
 8004c94:	24000004 	.word	0x24000004
 8004c98:	24000000 	.word	0x24000000
 8004c9c:	24000008 	.word	0x24000008

08004ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b089      	sub	sp, #36	; 0x24
 8004ca4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ca6:	4bb3      	ldr	r3, [pc, #716]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cae:	2b18      	cmp	r3, #24
 8004cb0:	f200 8155 	bhi.w	8004f5e <HAL_RCC_GetSysClockFreq+0x2be>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004f5f 	.word	0x08004f5f
 8004cc4:	08004f5f 	.word	0x08004f5f
 8004cc8:	08004f5f 	.word	0x08004f5f
 8004ccc:	08004f5f 	.word	0x08004f5f
 8004cd0:	08004f5f 	.word	0x08004f5f
 8004cd4:	08004f5f 	.word	0x08004f5f
 8004cd8:	08004f5f 	.word	0x08004f5f
 8004cdc:	08004d47 	.word	0x08004d47
 8004ce0:	08004f5f 	.word	0x08004f5f
 8004ce4:	08004f5f 	.word	0x08004f5f
 8004ce8:	08004f5f 	.word	0x08004f5f
 8004cec:	08004f5f 	.word	0x08004f5f
 8004cf0:	08004f5f 	.word	0x08004f5f
 8004cf4:	08004f5f 	.word	0x08004f5f
 8004cf8:	08004f5f 	.word	0x08004f5f
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004f5f 	.word	0x08004f5f
 8004d04:	08004f5f 	.word	0x08004f5f
 8004d08:	08004f5f 	.word	0x08004f5f
 8004d0c:	08004f5f 	.word	0x08004f5f
 8004d10:	08004f5f 	.word	0x08004f5f
 8004d14:	08004f5f 	.word	0x08004f5f
 8004d18:	08004f5f 	.word	0x08004f5f
 8004d1c:	08004d53 	.word	0x08004d53
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d20:	4b94      	ldr	r3, [pc, #592]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d2c:	4b91      	ldr	r3, [pc, #580]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	08db      	lsrs	r3, r3, #3
 8004d32:	f003 0303 	and.w	r3, r3, #3
 8004d36:	4a90      	ldr	r2, [pc, #576]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d3e:	e111      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d40:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d42:	61bb      	str	r3, [r7, #24]
      break;
 8004d44:	e10e      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d46:	4b8d      	ldr	r3, [pc, #564]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d48:	61bb      	str	r3, [r7, #24]
      break;
 8004d4a:	e10b      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d4c:	4b8c      	ldr	r3, [pc, #560]	; (8004f80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d4e:	61bb      	str	r3, [r7, #24]
      break;
 8004d50:	e108      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d52:	4b88      	ldr	r3, [pc, #544]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d5c:	4b85      	ldr	r3, [pc, #532]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d66:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d68:	4b82      	ldr	r3, [pc, #520]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d72:	4b80      	ldr	r3, [pc, #512]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80e1 	beq.w	8004f58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCC_GetSysClockFreq+0x204>
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	f200 80a1 	bhi.w	8004ee8 <HAL_RCC_GetSysClockFreq+0x248>
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x114>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d056      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004db2:	e099      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db4:	4b6f      	ldr	r3, [pc, #444]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0320 	and.w	r3, r3, #32
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d02d      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dc0:	4b6c      	ldr	r3, [pc, #432]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	08db      	lsrs	r3, r3, #3
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	4a6b      	ldr	r2, [pc, #428]	; (8004f78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	ee07 3a90 	vmov	s15, r3
 8004dd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dea:	4b62      	ldr	r3, [pc, #392]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df2:	ee07 3a90 	vmov	s15, r3
 8004df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dfe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e16:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004e1a:	e087      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004f88 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b51      	ldr	r3, [pc, #324]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e42:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e5e:	e065      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004f8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b40      	ldr	r3, [pc, #256]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e86:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ea2:	e043      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004f90 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004ee6:	e021      	b.n	8004f2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	ee07 3a90 	vmov	s15, r3
 8004eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ef2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004f8c <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004efa:	4b1e      	ldr	r3, [pc, #120]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004f2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f30:	0a5b      	lsrs	r3, r3, #9
 8004f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f36:	3301      	adds	r3, #1
 8004f38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	ee07 3a90 	vmov	s15, r3
 8004f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f44:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f50:	ee17 3a90 	vmov	r3, s15
 8004f54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f56:	e005      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	61bb      	str	r3, [r7, #24]
      break;
 8004f5c:	e002      	b.n	8004f64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f60:	61bb      	str	r3, [r7, #24]
      break;
 8004f62:	bf00      	nop
  }

  return sysclockfreq;
 8004f64:	69bb      	ldr	r3, [r7, #24]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3724      	adds	r7, #36	; 0x24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	58024400 	.word	0x58024400
 8004f78:	03d09000 	.word	0x03d09000
 8004f7c:	003d0900 	.word	0x003d0900
 8004f80:	007a1200 	.word	0x007a1200
 8004f84:	46000000 	.word	0x46000000
 8004f88:	4c742400 	.word	0x4c742400
 8004f8c:	4a742400 	.word	0x4a742400
 8004f90:	4af42400 	.word	0x4af42400

08004f94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f9a:	f7ff fe81 	bl	8004ca0 <HAL_RCC_GetSysClockFreq>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	490f      	ldr	r1, [pc, #60]	; (8004fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fac:	5ccb      	ldrb	r3, [r1, r3]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fc2:	5cd3      	ldrb	r3, [r2, r3]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	4a07      	ldr	r2, [pc, #28]	; (8004fec <HAL_RCC_GetHCLKFreq+0x58>)
 8004fd0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fd2:	4a07      	ldr	r2, [pc, #28]	; (8004ff0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004fd8:	4b04      	ldr	r3, [pc, #16]	; (8004fec <HAL_RCC_GetHCLKFreq+0x58>)
 8004fda:	681b      	ldr	r3, [r3, #0]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	0800bd40 	.word	0x0800bd40
 8004fec:	24000004 	.word	0x24000004
 8004ff0:	24000000 	.word	0x24000000

08004ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004ff8:	f7ff ffcc 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <HAL_RCC_GetPCLK1Freq+0x28>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	58024400 	.word	0x58024400
 800501c:	0800bd40 	.word	0x0800bd40

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005024:	f7ff ffb6 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4904      	ldr	r1, [pc, #16]	; (8005048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	58024400 	.word	0x58024400
 8005048:	0800bd40 	.word	0x0800bd40

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b0ca      	sub	sp, #296	; 0x128
 8005052:	af00      	add	r7, sp, #0
 8005054:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005058:	2300      	movs	r3, #0
 800505a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800505e:	2300      	movs	r3, #0
 8005060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005070:	2500      	movs	r5, #0
 8005072:	ea54 0305 	orrs.w	r3, r4, r5
 8005076:	d049      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800507c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800507e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005082:	d02f      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005084:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005088:	d828      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800508a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800508e:	d01a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005090:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005094:	d822      	bhi.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800509e:	d007      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80050a0:	e01c      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050a2:	4bb8      	ldr	r3, [pc, #736]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	4ab7      	ldr	r2, [pc, #732]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050ae:	e01a      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050b4:	3308      	adds	r3, #8
 80050b6:	2102      	movs	r1, #2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 fb61 	bl	8007780 <RCCEx_PLL2_Config>
 80050be:	4603      	mov	r3, r0
 80050c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050c4:	e00f      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050ca:	3328      	adds	r3, #40	; 0x28
 80050cc:	2102      	movs	r1, #2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fc08 	bl	80078e4 <RCCEx_PLL3_Config>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80050da:	e004      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80050e2:	e000      	b.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050ee:	4ba5      	ldr	r3, [pc, #660]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80050f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050fc:	4aa1      	ldr	r2, [pc, #644]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050fe:	430b      	orrs	r3, r1
 8005100:	6513      	str	r3, [r2, #80]	; 0x50
 8005102:	e003      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800510c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005114:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005118:	f04f 0900 	mov.w	r9, #0
 800511c:	ea58 0309 	orrs.w	r3, r8, r9
 8005120:	d047      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	2b04      	cmp	r3, #4
 800512a:	d82a      	bhi.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800512c:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005149 	.word	0x08005149
 8005138:	08005157 	.word	0x08005157
 800513c:	0800516d 	.word	0x0800516d
 8005140:	0800518b 	.word	0x0800518b
 8005144:	0800518b 	.word	0x0800518b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005148:	4b8e      	ldr	r3, [pc, #568]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	4a8d      	ldr	r2, [pc, #564]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800514e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005154:	e01a      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515a:	3308      	adds	r3, #8
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f002 fb0e 	bl	8007780 <RCCEx_PLL2_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800516a:	e00f      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800516c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005170:	3328      	adds	r3, #40	; 0x28
 8005172:	2100      	movs	r1, #0
 8005174:	4618      	mov	r0, r3
 8005176:	f002 fbb5 	bl	80078e4 <RCCEx_PLL3_Config>
 800517a:	4603      	mov	r3, r0
 800517c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005180:	e004      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005188:	e000      	b.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800518a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800518c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005194:	4b7b      	ldr	r3, [pc, #492]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005198:	f023 0107 	bic.w	r1, r3, #7
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	4a78      	ldr	r2, [pc, #480]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051a4:	430b      	orrs	r3, r1
 80051a6:	6513      	str	r3, [r2, #80]	; 0x50
 80051a8:	e003      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80051b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80051be:	f04f 0b00 	mov.w	fp, #0
 80051c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80051c6:	d04c      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80051c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d030      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80051d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d8:	d829      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051da:	2bc0      	cmp	r3, #192	; 0xc0
 80051dc:	d02d      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051de:	2bc0      	cmp	r3, #192	; 0xc0
 80051e0:	d825      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051e2:	2b80      	cmp	r3, #128	; 0x80
 80051e4:	d018      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051e6:	2b80      	cmp	r3, #128	; 0x80
 80051e8:	d821      	bhi.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051ee:	2b40      	cmp	r3, #64	; 0x40
 80051f0:	d007      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051f2:	e01c      	b.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051f4:	4b63      	ldr	r3, [pc, #396]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	4a62      	ldr	r2, [pc, #392]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005200:	e01c      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005206:	3308      	adds	r3, #8
 8005208:	2100      	movs	r1, #0
 800520a:	4618      	mov	r0, r3
 800520c:	f002 fab8 	bl	8007780 <RCCEx_PLL2_Config>
 8005210:	4603      	mov	r3, r0
 8005212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005216:	e011      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800521c:	3328      	adds	r3, #40	; 0x28
 800521e:	2100      	movs	r1, #0
 8005220:	4618      	mov	r0, r3
 8005222:	f002 fb5f 	bl	80078e4 <RCCEx_PLL3_Config>
 8005226:	4603      	mov	r3, r0
 8005228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800522c:	e006      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005234:	e002      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005236:	bf00      	nop
 8005238:	e000      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800523a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800524c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	4a4c      	ldr	r2, [pc, #304]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005254:	430b      	orrs	r3, r1
 8005256:	6513      	str	r3, [r2, #80]	; 0x50
 8005258:	e003      	b.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800525e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800526e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005272:	2300      	movs	r3, #0
 8005274:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005278:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800527c:	460b      	mov	r3, r1
 800527e:	4313      	orrs	r3, r2
 8005280:	d053      	beq.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005286:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800528a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800528e:	d035      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005294:	d82e      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005296:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800529a:	d031      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800529c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80052a0:	d828      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052a6:	d01a      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80052a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052ac:	d822      	bhi.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80052b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052b6:	d007      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80052b8:	e01c      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ba:	4b32      	ldr	r3, [pc, #200]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a31      	ldr	r2, [pc, #196]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052c6:	e01c      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80052c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052cc:	3308      	adds	r3, #8
 80052ce:	2100      	movs	r1, #0
 80052d0:	4618      	mov	r0, r3
 80052d2:	f002 fa55 	bl	8007780 <RCCEx_PLL2_Config>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052dc:	e011      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80052e2:	3328      	adds	r3, #40	; 0x28
 80052e4:	2100      	movs	r1, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 fafc 	bl	80078e4 <RCCEx_PLL3_Config>
 80052ec:	4603      	mov	r3, r0
 80052ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052f2:	e006      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80052fa:	e002      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052fc:	bf00      	nop
 80052fe:	e000      	b.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10b      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800530c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800531a:	4a1a      	ldr	r2, [pc, #104]	; (8005384 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800531c:	430b      	orrs	r3, r1
 800531e:	6593      	str	r3, [r2, #88]	; 0x58
 8005320:	e003      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005322:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005326:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800532a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005336:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800533a:	2300      	movs	r3, #0
 800533c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005340:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8005344:	460b      	mov	r3, r1
 8005346:	4313      	orrs	r3, r2
 8005348:	d056      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800534e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005352:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005356:	d038      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535c:	d831      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800535e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005362:	d034      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005368:	d82b      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800536a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800536e:	d01d      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005374:	d825      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005376:	2b00      	cmp	r3, #0
 8005378:	d006      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800537a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005380:	e01f      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005382:	bf00      	nop
 8005384:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4ba2      	ldr	r3, [pc, #648]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4aa1      	ldr	r2, [pc, #644]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005394:	e01c      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800539a:	3308      	adds	r3, #8
 800539c:	2100      	movs	r1, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	f002 f9ee 	bl	8007780 <RCCEx_PLL2_Config>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80053aa:	e011      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053b0:	3328      	adds	r3, #40	; 0x28
 80053b2:	2100      	movs	r1, #0
 80053b4:	4618      	mov	r0, r3
 80053b6:	f002 fa95 	bl	80078e4 <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053c0:	e006      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80053c8:	e002      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053ca:	bf00      	nop
 80053cc:	e000      	b.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80053ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80053d8:	4b8e      	ldr	r3, [pc, #568]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80053e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80053e8:	4a8a      	ldr	r2, [pc, #552]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ea:	430b      	orrs	r3, r1
 80053ec:	6593      	str	r3, [r2, #88]	; 0x58
 80053ee:	e003      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80053f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005404:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800540e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d03a      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005418:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	d01f      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005422:	2b30      	cmp	r3, #48	; 0x30
 8005424:	d819      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005426:	2b20      	cmp	r3, #32
 8005428:	d00c      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800542a:	2b20      	cmp	r3, #32
 800542c:	d815      	bhi.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800542e:	2b00      	cmp	r3, #0
 8005430:	d019      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005432:	2b10      	cmp	r3, #16
 8005434:	d111      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005436:	4b77      	ldr	r3, [pc, #476]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543a:	4a76      	ldr	r2, [pc, #472]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800543c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005440:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005442:	e011      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005444:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005448:	3308      	adds	r3, #8
 800544a:	2102      	movs	r1, #2
 800544c:	4618      	mov	r0, r3
 800544e:	f002 f997 	bl	8007780 <RCCEx_PLL2_Config>
 8005452:	4603      	mov	r3, r0
 8005454:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005458:	e006      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005460:	e002      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005462:	bf00      	nop
 8005464:	e000      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005466:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10a      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005470:	4b68      	ldr	r3, [pc, #416]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005474:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800547c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800547e:	4a65      	ldr	r2, [pc, #404]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005480:	430b      	orrs	r3, r1
 8005482:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005486:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800548a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800548e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005496:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800549a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800549e:	2300      	movs	r3, #0
 80054a0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80054a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4313      	orrs	r3, r2
 80054ac:	d051      	beq.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80054ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054b8:	d035      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80054ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054be:	d82e      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054c4:	d031      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80054c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054ca:	d828      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d0:	d01a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80054d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d6:	d822      	bhi.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e0:	d007      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054e2:	e01c      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054e4:	4b4b      	ldr	r3, [pc, #300]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	4a4a      	ldr	r2, [pc, #296]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054f0:	e01c      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80054f6:	3308      	adds	r3, #8
 80054f8:	2100      	movs	r1, #0
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 f940 	bl	8007780 <RCCEx_PLL2_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005506:	e011      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005508:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800550c:	3328      	adds	r3, #40	; 0x28
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f002 f9e7 	bl	80078e4 <RCCEx_PLL3_Config>
 8005516:	4603      	mov	r3, r0
 8005518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800551c:	e006      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005524:	e002      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005526:	bf00      	nop
 8005528:	e000      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800552a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800552c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005534:	4b37      	ldr	r3, [pc, #220]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005538:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800553c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005542:	4a34      	ldr	r2, [pc, #208]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005544:	430b      	orrs	r3, r1
 8005546:	6513      	str	r3, [r2, #80]	; 0x50
 8005548:	e003      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800554e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800555e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005562:	2300      	movs	r3, #0
 8005564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005568:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d056      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800557c:	d033      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800557e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005582:	d82c      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005584:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005588:	d02f      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800558a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800558e:	d826      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005590:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005594:	d02b      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005596:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800559a:	d820      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800559c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a0:	d012      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a6:	d81a      	bhi.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d022      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d115      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055b6:	3308      	adds	r3, #8
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 f8e0 	bl	8007780 <RCCEx_PLL2_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055c6:	e015      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055cc:	3328      	adds	r3, #40	; 0x28
 80055ce:	2101      	movs	r1, #1
 80055d0:	4618      	mov	r0, r3
 80055d2:	f002 f987 	bl	80078e4 <RCCEx_PLL3_Config>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055dc:	e00a      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80055e4:	e006      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055e6:	bf00      	nop
 80055e8:	e004      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ea:	bf00      	nop
 80055ec:	e002      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ee:	bf00      	nop
 80055f0:	e000      	b.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10d      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005600:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800560a:	4a02      	ldr	r2, [pc, #8]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800560c:	430b      	orrs	r3, r1
 800560e:	6513      	str	r3, [r2, #80]	; 0x50
 8005610:	e006      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005612:	bf00      	nop
 8005614:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005618:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800561c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800562c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005630:	2300      	movs	r3, #0
 8005632:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005636:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800563a:	460b      	mov	r3, r1
 800563c:	4313      	orrs	r3, r2
 800563e:	d055      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005640:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005644:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005648:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800564c:	d033      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800564e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005652:	d82c      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d02f      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d826      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005660:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005664:	d02b      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005666:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800566a:	d820      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 800566c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005670:	d012      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005672:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005676:	d81a      	bhi.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005678:	2b00      	cmp	r3, #0
 800567a:	d022      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800567c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005680:	d115      	bne.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005686:	3308      	adds	r3, #8
 8005688:	2101      	movs	r1, #1
 800568a:	4618      	mov	r0, r3
 800568c:	f002 f878 	bl	8007780 <RCCEx_PLL2_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005696:	e015      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800569c:	3328      	adds	r3, #40	; 0x28
 800569e:	2101      	movs	r1, #1
 80056a0:	4618      	mov	r0, r3
 80056a2:	f002 f91f 	bl	80078e4 <RCCEx_PLL3_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80056ac:	e00a      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80056b4:	e006      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056b6:	bf00      	nop
 80056b8:	e004      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056ba:	bf00      	nop
 80056bc:	e002      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056be:	bf00      	nop
 80056c0:	e000      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80056c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80056cc:	4ba3      	ldr	r3, [pc, #652]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056dc:	4a9f      	ldr	r2, [pc, #636]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	6593      	str	r3, [r2, #88]	; 0x58
 80056e2:	e003      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80056e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80056f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80056f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056fc:	2300      	movs	r3, #0
 80056fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005702:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005706:	460b      	mov	r3, r1
 8005708:	4313      	orrs	r3, r2
 800570a:	d037      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800570c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005716:	d00e      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800571c:	d816      	bhi.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d018      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005722:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005726:	d111      	bne.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005728:	4b8c      	ldr	r3, [pc, #560]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4a8b      	ldr	r2, [pc, #556]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800572e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005732:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005734:	e00f      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800573a:	3308      	adds	r3, #8
 800573c:	2101      	movs	r1, #1
 800573e:	4618      	mov	r0, r3
 8005740:	f002 f81e 	bl	8007780 <RCCEx_PLL2_Config>
 8005744:	4603      	mov	r3, r0
 8005746:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800574a:	e004      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005752:	e000      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005754:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005756:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800575e:	4b7f      	ldr	r3, [pc, #508]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005762:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800576a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576c:	4a7b      	ldr	r2, [pc, #492]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800576e:	430b      	orrs	r3, r1
 8005770:	6513      	str	r3, [r2, #80]	; 0x50
 8005772:	e003      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005778:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800577c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005788:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800578c:	2300      	movs	r3, #0
 800578e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005792:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005796:	460b      	mov	r3, r1
 8005798:	4313      	orrs	r3, r2
 800579a:	d039      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800579c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057a2:	2b03      	cmp	r3, #3
 80057a4:	d81c      	bhi.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057bd 	.word	0x080057bd
 80057b4:	080057cb 	.word	0x080057cb
 80057b8:	080057e9 	.word	0x080057e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057bc:	4b67      	ldr	r3, [pc, #412]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c0:	4a66      	ldr	r2, [pc, #408]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057c8:	e00f      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057ce:	3308      	adds	r3, #8
 80057d0:	2102      	movs	r1, #2
 80057d2:	4618      	mov	r0, r3
 80057d4:	f001 ffd4 	bl	8007780 <RCCEx_PLL2_Config>
 80057d8:	4603      	mov	r3, r0
 80057da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057de:	e004      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80057e6:	e000      	b.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80057e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10a      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057f2:	4b5a      	ldr	r3, [pc, #360]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f6:	f023 0103 	bic.w	r1, r3, #3
 80057fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80057fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005800:	4a56      	ldr	r2, [pc, #344]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005802:	430b      	orrs	r3, r1
 8005804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005806:	e003      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005808:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800580c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005810:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005818:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800581c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005820:	2300      	movs	r3, #0
 8005822:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005826:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800582a:	460b      	mov	r3, r1
 800582c:	4313      	orrs	r3, r2
 800582e:	f000 809f 	beq.w	8005970 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005832:	4b4b      	ldr	r3, [pc, #300]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a4a      	ldr	r2, [pc, #296]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800583e:	f7fb fe91 	bl	8001564 <HAL_GetTick>
 8005842:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005846:	e00b      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005848:	f7fb fe8c 	bl	8001564 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b64      	cmp	r3, #100	; 0x64
 8005856:	d903      	bls.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800585e:	e005      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005860:	4b3f      	ldr	r3, [pc, #252]	; (8005960 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d0ed      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800586c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005870:	2b00      	cmp	r3, #0
 8005872:	d179      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005874:	4b39      	ldr	r3, [pc, #228]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005876:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800587c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005880:	4053      	eors	r3, r2
 8005882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800588a:	4b34      	ldr	r3, [pc, #208]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005892:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005896:	4b31      	ldr	r3, [pc, #196]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589a:	4a30      	ldr	r2, [pc, #192]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058a2:	4b2e      	ldr	r3, [pc, #184]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a6:	4a2d      	ldr	r2, [pc, #180]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80058ae:	4a2b      	ldr	r2, [pc, #172]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80058ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80058be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c2:	d118      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fb fe4e 	bl	8001564 <HAL_GetTick>
 80058c8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058cc:	e00d      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ce:	f7fb fe49 	bl	8001564 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80058d8:	1ad2      	subs	r2, r2, r3
 80058da:	f241 3388 	movw	r3, #5000	; 0x1388
 80058de:	429a      	cmp	r2, r3
 80058e0:	d903      	bls.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80058e8:	e005      	b.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ea:	4b1c      	ldr	r3, [pc, #112]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0eb      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80058f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d129      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005906:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800590e:	d10e      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005910:	4b12      	ldr	r3, [pc, #72]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800591c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005920:	091a      	lsrs	r2, r3, #4
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005924:	4013      	ands	r3, r2
 8005926:	4a0d      	ldr	r2, [pc, #52]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005928:	430b      	orrs	r3, r1
 800592a:	6113      	str	r3, [r2, #16]
 800592c:	e005      	b.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800592e:	4b0b      	ldr	r3, [pc, #44]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	4a0a      	ldr	r2, [pc, #40]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005934:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005938:	6113      	str	r3, [r2, #16]
 800593a:	4b08      	ldr	r3, [pc, #32]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800593c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005942:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594a:	4a04      	ldr	r2, [pc, #16]	; (800595c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6713      	str	r3, [r2, #112]	; 0x70
 8005950:	e00e      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005956:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800595a:	e009      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800595c:	58024400 	.word	0x58024400
 8005960:	58024800 	.word	0x58024800
 8005964:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800596c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 0301 	and.w	r3, r2, #1
 800597c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005986:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	f000 8089 	beq.w	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005998:	2b28      	cmp	r3, #40	; 0x28
 800599a:	d86b      	bhi.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800599c:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800599e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a2:	bf00      	nop
 80059a4:	08005a7d 	.word	0x08005a7d
 80059a8:	08005a75 	.word	0x08005a75
 80059ac:	08005a75 	.word	0x08005a75
 80059b0:	08005a75 	.word	0x08005a75
 80059b4:	08005a75 	.word	0x08005a75
 80059b8:	08005a75 	.word	0x08005a75
 80059bc:	08005a75 	.word	0x08005a75
 80059c0:	08005a75 	.word	0x08005a75
 80059c4:	08005a49 	.word	0x08005a49
 80059c8:	08005a75 	.word	0x08005a75
 80059cc:	08005a75 	.word	0x08005a75
 80059d0:	08005a75 	.word	0x08005a75
 80059d4:	08005a75 	.word	0x08005a75
 80059d8:	08005a75 	.word	0x08005a75
 80059dc:	08005a75 	.word	0x08005a75
 80059e0:	08005a75 	.word	0x08005a75
 80059e4:	08005a5f 	.word	0x08005a5f
 80059e8:	08005a75 	.word	0x08005a75
 80059ec:	08005a75 	.word	0x08005a75
 80059f0:	08005a75 	.word	0x08005a75
 80059f4:	08005a75 	.word	0x08005a75
 80059f8:	08005a75 	.word	0x08005a75
 80059fc:	08005a75 	.word	0x08005a75
 8005a00:	08005a75 	.word	0x08005a75
 8005a04:	08005a7d 	.word	0x08005a7d
 8005a08:	08005a75 	.word	0x08005a75
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005a75 	.word	0x08005a75
 8005a14:	08005a75 	.word	0x08005a75
 8005a18:	08005a75 	.word	0x08005a75
 8005a1c:	08005a75 	.word	0x08005a75
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a75 	.word	0x08005a75
 8005a2c:	08005a75 	.word	0x08005a75
 8005a30:	08005a75 	.word	0x08005a75
 8005a34:	08005a75 	.word	0x08005a75
 8005a38:	08005a75 	.word	0x08005a75
 8005a3c:	08005a75 	.word	0x08005a75
 8005a40:	08005a75 	.word	0x08005a75
 8005a44:	08005a7d 	.word	0x08005a7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a4c:	3308      	adds	r3, #8
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 fe95 	bl	8007780 <RCCEx_PLL2_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a5c:	e00f      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a62:	3328      	adds	r3, #40	; 0x28
 8005a64:	2101      	movs	r1, #1
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 ff3c 	bl	80078e4 <RCCEx_PLL3_Config>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a72:	e004      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005a7a:	e000      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a86:	4bbf      	ldr	r3, [pc, #764]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a94:	4abb      	ldr	r2, [pc, #748]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a96:	430b      	orrs	r3, r1
 8005a98:	6553      	str	r3, [r2, #84]	; 0x54
 8005a9a:	e003      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f002 0302 	and.w	r3, r2, #2
 8005ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005aba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	d041      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ac8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d824      	bhi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ace:	a201      	add	r2, pc, #4	; (adr r2, 8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad4:	08005b21 	.word	0x08005b21
 8005ad8:	08005aed 	.word	0x08005aed
 8005adc:	08005b03 	.word	0x08005b03
 8005ae0:	08005b21 	.word	0x08005b21
 8005ae4:	08005b21 	.word	0x08005b21
 8005ae8:	08005b21 	.word	0x08005b21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005af0:	3308      	adds	r3, #8
 8005af2:	2101      	movs	r1, #1
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fe43 	bl	8007780 <RCCEx_PLL2_Config>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b00:	e00f      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b06:	3328      	adds	r3, #40	; 0x28
 8005b08:	2101      	movs	r1, #1
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f001 feea 	bl	80078e4 <RCCEx_PLL3_Config>
 8005b10:	4603      	mov	r3, r0
 8005b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005b16:	e004      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005b1e:	e000      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005b2a:	4b96      	ldr	r3, [pc, #600]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	f023 0107 	bic.w	r1, r3, #7
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b38:	4a92      	ldr	r2, [pc, #584]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b3a:	430b      	orrs	r3, r1
 8005b3c:	6553      	str	r3, [r2, #84]	; 0x54
 8005b3e:	e003      	b.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005b44:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b50:	f002 0304 	and.w	r3, r2, #4
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4313      	orrs	r3, r2
 8005b66:	d044      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	d825      	bhi.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005b74:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7a:	bf00      	nop
 8005b7c:	08005bc9 	.word	0x08005bc9
 8005b80:	08005b95 	.word	0x08005b95
 8005b84:	08005bab 	.word	0x08005bab
 8005b88:	08005bc9 	.word	0x08005bc9
 8005b8c:	08005bc9 	.word	0x08005bc9
 8005b90:	08005bc9 	.word	0x08005bc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b98:	3308      	adds	r3, #8
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f001 fdef 	bl	8007780 <RCCEx_PLL2_Config>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ba8:	e00f      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bae:	3328      	adds	r3, #40	; 0x28
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fe96 	bl	80078e4 <RCCEx_PLL3_Config>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005bbe:	e004      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005bc6:	e000      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10b      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bd2:	4b6c      	ldr	r3, [pc, #432]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	f023 0107 	bic.w	r1, r3, #7
 8005bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005be2:	4a68      	ldr	r2, [pc, #416]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6593      	str	r3, [r2, #88]	; 0x58
 8005be8:	e003      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005bee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f002 0320 	and.w	r3, r2, #32
 8005bfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c02:	2300      	movs	r3, #0
 8005c04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	d055      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c1e:	d033      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005c24:	d82c      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2a:	d02f      	beq.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d826      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c36:	d02b      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005c38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005c3c:	d820      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c42:	d012      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c48:	d81a      	bhi.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d022      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005c4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c52:	d115      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c58:	3308      	adds	r3, #8
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 fd8f 	bl	8007780 <RCCEx_PLL2_Config>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c68:	e015      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c6e:	3328      	adds	r3, #40	; 0x28
 8005c70:	2102      	movs	r1, #2
 8005c72:	4618      	mov	r0, r3
 8005c74:	f001 fe36 	bl	80078e4 <RCCEx_PLL3_Config>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005c86:	e006      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c88:	bf00      	nop
 8005c8a:	e004      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c8c:	bf00      	nop
 8005c8e:	e002      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c90:	bf00      	nop
 8005c92:	e000      	b.n	8005c96 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10b      	bne.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c9e:	4b39      	ldr	r3, [pc, #228]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cae:	4a35      	ldr	r2, [pc, #212]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6553      	str	r3, [r2, #84]	; 0x54
 8005cb4:	e003      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005cba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005cd4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	d058      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ce6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cea:	d033      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005cec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005cf0:	d82c      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf6:	d02f      	beq.n	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfc:	d826      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d02:	d02b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d08:	d820      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d0e:	d012      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d14:	d81a      	bhi.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d022      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d115      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d24:	3308      	adds	r3, #8
 8005d26:	2100      	movs	r1, #0
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 fd29 	bl	8007780 <RCCEx_PLL2_Config>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d34:	e015      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d3a:	3328      	adds	r3, #40	; 0x28
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 fdd0 	bl	80078e4 <RCCEx_PLL3_Config>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005d52:	e006      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d54:	bf00      	nop
 8005d56:	e004      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d58:	bf00      	nop
 8005d5a:	e002      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e000      	b.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10e      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d6a:	4b06      	ldr	r3, [pc, #24]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d6e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8005d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d7a:	4a02      	ldr	r2, [pc, #8]	; (8005d84 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8005d80:	e006      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005d82:	bf00      	nop
 8005d84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005d8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005da0:	2300      	movs	r3, #0
 8005da2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005da6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	d055      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005db4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005db8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dbc:	d033      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005dbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005dc2:	d82c      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc8:	d02f      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dce:	d826      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dd0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dd4:	d02b      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005dd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005dda:	d820      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de0:	d012      	beq.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005de2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005de6:	d81a      	bhi.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d022      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df0:	d115      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005df6:	3308      	adds	r3, #8
 8005df8:	2100      	movs	r1, #0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 fcc0 	bl	8007780 <RCCEx_PLL2_Config>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e06:	e015      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e0c:	3328      	adds	r3, #40	; 0x28
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 fd67 	bl	80078e4 <RCCEx_PLL3_Config>
 8005e16:	4603      	mov	r3, r0
 8005e18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005e1c:	e00a      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e26:	bf00      	nop
 8005e28:	e004      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e2a:	bf00      	nop
 8005e2c:	e002      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e2e:	bf00      	nop
 8005e30:	e000      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005e32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10b      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e3c:	4ba1      	ldr	r3, [pc, #644]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e40:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e4c:	4a9d      	ldr	r2, [pc, #628]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e4e:	430b      	orrs	r3, r1
 8005e50:	6593      	str	r3, [r2, #88]	; 0x58
 8005e52:	e003      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f002 0308 	and.w	r3, r2, #8
 8005e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e72:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005e76:	460b      	mov	r3, r1
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	d01e      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e88:	d10c      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e8e:	3328      	adds	r3, #40	; 0x28
 8005e90:	2102      	movs	r1, #2
 8005e92:	4618      	mov	r0, r3
 8005e94:	f001 fd26 	bl	80078e4 <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ea4:	4b87      	ldr	r3, [pc, #540]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb4:	4a83      	ldr	r2, [pc, #524]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005eb6:	430b      	orrs	r3, r1
 8005eb8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f002 0310 	and.w	r3, r2, #16
 8005ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005ed0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	d01e      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005eec:	3328      	adds	r3, #40	; 0x28
 8005eee:	2102      	movs	r1, #2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f001 fcf7 	bl	80078e4 <RCCEx_PLL3_Config>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d002      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f02:	4b70      	ldr	r3, [pc, #448]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f12:	4a6c      	ldr	r2, [pc, #432]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f20:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005f24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f2e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005f32:	460b      	mov	r3, r1
 8005f34:	4313      	orrs	r3, r2
 8005f36:	d03e      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f44:	d022      	beq.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f4a:	d81b      	bhi.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d00b      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005f56:	e015      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f5c:	3308      	adds	r3, #8
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fc0d 	bl	8007780 <RCCEx_PLL2_Config>
 8005f66:	4603      	mov	r3, r0
 8005f68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f6c:	e00f      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f72:	3328      	adds	r3, #40	; 0x28
 8005f74:	2102      	movs	r1, #2
 8005f76:	4618      	mov	r0, r3
 8005f78:	f001 fcb4 	bl	80078e4 <RCCEx_PLL3_Config>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f82:	e004      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f8a:	e000      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f96:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f9a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fa2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fa6:	4a47      	ldr	r2, [pc, #284]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fa8:	430b      	orrs	r3, r1
 8005faa:	6593      	str	r3, [r2, #88]	; 0x58
 8005fac:	e003      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005fb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005fc2:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005fc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	d03b      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fde:	d01f      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fe4:	d818      	bhi.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fea:	d003      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ff0:	d007      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005ff2:	e011      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ff4:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	4a32      	ldr	r2, [pc, #200]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006000:	e00f      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006006:	3328      	adds	r3, #40	; 0x28
 8006008:	2101      	movs	r1, #1
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fc6a 	bl	80078e4 <RCCEx_PLL3_Config>
 8006010:	4603      	mov	r3, r0
 8006012:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006016:	e004      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800601e:	e000      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006022:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10b      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800602a:	4b26      	ldr	r3, [pc, #152]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800602c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603a:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800603c:	430b      	orrs	r3, r1
 800603e:	6553      	str	r3, [r2, #84]	; 0x54
 8006040:	e003      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800604e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006052:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006056:	673b      	str	r3, [r7, #112]	; 0x70
 8006058:	2300      	movs	r3, #0
 800605a:	677b      	str	r3, [r7, #116]	; 0x74
 800605c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006060:	460b      	mov	r3, r1
 8006062:	4313      	orrs	r3, r2
 8006064:	d034      	beq.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800606a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006074:	d007      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006076:	e011      	b.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006078:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	4a11      	ldr	r2, [pc, #68]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800607e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006084:	e00e      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800608a:	3308      	adds	r3, #8
 800608c:	2102      	movs	r1, #2
 800608e:	4618      	mov	r0, r3
 8006090:	f001 fb76 	bl	8007780 <RCCEx_PLL2_Config>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800609a:	e003      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10d      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	4a02      	ldr	r2, [pc, #8]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060c0:	e006      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80060c2:	bf00      	nop
 80060c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80060dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80060de:	2300      	movs	r3, #0
 80060e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80060e6:	460b      	mov	r3, r1
 80060e8:	4313      	orrs	r3, r2
 80060ea:	d00c      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f0:	3328      	adds	r3, #40	; 0x28
 80060f2:	2102      	movs	r1, #2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 fbf5 	bl	80078e4 <RCCEx_PLL3_Config>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006106:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006112:	663b      	str	r3, [r7, #96]	; 0x60
 8006114:	2300      	movs	r3, #0
 8006116:	667b      	str	r3, [r7, #100]	; 0x64
 8006118:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800611c:	460b      	mov	r3, r1
 800611e:	4313      	orrs	r3, r2
 8006120:	d038      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800612a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800612e:	d018      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006130:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006134:	d811      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800613a:	d014      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800613c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006140:	d80b      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d011      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800614a:	d106      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800614c:	4bc3      	ldr	r3, [pc, #780]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006150:	4ac2      	ldr	r2, [pc, #776]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006158:	e008      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006160:	e004      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006162:	bf00      	nop
 8006164:	e002      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006166:	bf00      	nop
 8006168:	e000      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800616a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006170:	2b00      	cmp	r3, #0
 8006172:	d10b      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006174:	4bb9      	ldr	r3, [pc, #740]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006180:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006184:	4ab5      	ldr	r2, [pc, #724]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006186:	430b      	orrs	r3, r1
 8006188:	6553      	str	r3, [r2, #84]	; 0x54
 800618a:	e003      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006190:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80061a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80061a2:	2300      	movs	r3, #0
 80061a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80061aa:	460b      	mov	r3, r1
 80061ac:	4313      	orrs	r3, r2
 80061ae:	d009      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80061b0:	4baa      	ldr	r3, [pc, #680]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061be:	4aa7      	ldr	r2, [pc, #668]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061c0:	430b      	orrs	r3, r1
 80061c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80061c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80061d0:	653b      	str	r3, [r7, #80]	; 0x50
 80061d2:	2300      	movs	r3, #0
 80061d4:	657b      	str	r3, [r7, #84]	; 0x54
 80061d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80061da:	460b      	mov	r3, r1
 80061dc:	4313      	orrs	r3, r2
 80061de:	d00a      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061e0:	4b9e      	ldr	r3, [pc, #632]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80061f0:	4a9a      	ldr	r2, [pc, #616]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006202:	64bb      	str	r3, [r7, #72]	; 0x48
 8006204:	2300      	movs	r3, #0
 8006206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006208:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800620c:	460b      	mov	r3, r1
 800620e:	4313      	orrs	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006212:	4b92      	ldr	r3, [pc, #584]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006216:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800621a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006220:	4a8e      	ldr	r2, [pc, #568]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006222:	430b      	orrs	r3, r1
 8006224:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8006232:	643b      	str	r3, [r7, #64]	; 0x40
 8006234:	2300      	movs	r3, #0
 8006236:	647b      	str	r3, [r7, #68]	; 0x44
 8006238:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800623c:	460b      	mov	r3, r1
 800623e:	4313      	orrs	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006242:	4b86      	ldr	r3, [pc, #536]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	4a85      	ldr	r2, [pc, #532]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006248:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800624c:	6113      	str	r3, [r2, #16]
 800624e:	4b83      	ldr	r3, [pc, #524]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006250:	6919      	ldr	r1, [r3, #16]
 8006252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006256:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800625a:	4a80      	ldr	r2, [pc, #512]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800625c:	430b      	orrs	r3, r1
 800625e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800626c:	63bb      	str	r3, [r7, #56]	; 0x38
 800626e:	2300      	movs	r3, #0
 8006270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006272:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800627c:	4b77      	ldr	r3, [pc, #476]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800627e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006280:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	4a74      	ldr	r2, [pc, #464]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800628c:	430b      	orrs	r3, r1
 800628e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006290:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
 800629e:	2300      	movs	r3, #0
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
 80062a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80062a6:	460b      	mov	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	d00a      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80062ac:	4b6b      	ldr	r3, [pc, #428]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	4a67      	ldr	r2, [pc, #412]	; (800645c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	2100      	movs	r1, #0
 80062cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80062d8:	460b      	mov	r3, r1
 80062da:	4313      	orrs	r3, r2
 80062dc:	d011      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e2:	3308      	adds	r3, #8
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 fa4a 	bl	8007780 <RCCEx_PLL2_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	2100      	movs	r1, #0
 800630c:	6239      	str	r1, [r7, #32]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	627b      	str	r3, [r7, #36]	; 0x24
 8006314:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d011      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800631e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006322:	3308      	adds	r3, #8
 8006324:	2101      	movs	r1, #1
 8006326:	4618      	mov	r0, r3
 8006328:	f001 fa2a 	bl	8007780 <RCCEx_PLL2_Config>
 800632c:	4603      	mov	r3, r0
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800633e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	2100      	movs	r1, #0
 800634c:	61b9      	str	r1, [r7, #24]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006358:	460b      	mov	r3, r1
 800635a:	4313      	orrs	r3, r2
 800635c:	d011      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006362:	3308      	adds	r3, #8
 8006364:	2102      	movs	r1, #2
 8006366:	4618      	mov	r0, r3
 8006368:	f001 fa0a 	bl	8007780 <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800637e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638a:	2100      	movs	r1, #0
 800638c:	6139      	str	r1, [r7, #16]
 800638e:	f003 0308 	and.w	r3, r3, #8
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006398:	460b      	mov	r3, r1
 800639a:	4313      	orrs	r3, r2
 800639c:	d011      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800639e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063a2:	3328      	adds	r3, #40	; 0x28
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 fa9c 	bl	80078e4 <RCCEx_PLL3_Config>
 80063ac:	4603      	mov	r3, r0
 80063ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80063b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	2100      	movs	r1, #0
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	60fb      	str	r3, [r7, #12]
 80063d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	d011      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	3328      	adds	r3, #40	; 0x28
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 fa7c 	bl	80078e4 <RCCEx_PLL3_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80063f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640a:	2100      	movs	r1, #0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	607b      	str	r3, [r7, #4]
 8006414:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006418:	460b      	mov	r3, r1
 800641a:	4313      	orrs	r3, r2
 800641c:	d011      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006422:	3328      	adds	r3, #40	; 0x28
 8006424:	2102      	movs	r1, #2
 8006426:	4618      	mov	r0, r3
 8006428:	f001 fa5c 	bl	80078e4 <RCCEx_PLL3_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8006432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800643a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800643e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8006442:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	e000      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
}
 8006450:	4618      	mov	r0, r3
 8006452:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8006456:	46bd      	mov	sp, r7
 8006458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800645c:	58024400 	.word	0x58024400

08006460 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b090      	sub	sp, #64	; 0x40
 8006464:	af00      	add	r7, sp, #0
 8006466:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800646a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800646e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006472:	430b      	orrs	r3, r1
 8006474:	f040 8094 	bne.w	80065a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006478:	4b9e      	ldr	r3, [pc, #632]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	f003 0307 	and.w	r3, r3, #7
 8006480:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006484:	2b04      	cmp	r3, #4
 8006486:	f200 8087 	bhi.w	8006598 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800648a:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800648c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006490:	080064a5 	.word	0x080064a5
 8006494:	080064cd 	.word	0x080064cd
 8006498:	080064f5 	.word	0x080064f5
 800649c:	08006591 	.word	0x08006591
 80064a0:	0800651d 	.word	0x0800651d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064a4:	4b93      	ldr	r3, [pc, #588]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064b0:	d108      	bne.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f001 f810 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064c0:	f000 bd45 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064c8:	f000 bd41 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064cc:	4b89      	ldr	r3, [pc, #548]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064d8:	d108      	bne.n	80064ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064da:	f107 0318 	add.w	r3, r7, #24
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fd54 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80064e8:	f000 bd31 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80064f0:	f000 bd2d 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064f4:	4b7f      	ldr	r3, [pc, #508]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006500:	d108      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006502:	f107 030c 	add.w	r3, r7, #12
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fe94 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006510:	f000 bd1d 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006518:	f000 bd19 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800651c:	4b75      	ldr	r3, [pc, #468]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800651e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006520:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006524:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006526:	4b73      	ldr	r3, [pc, #460]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b04      	cmp	r3, #4
 8006530:	d10c      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	2b00      	cmp	r3, #0
 8006536:	d109      	bne.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006538:	4b6e      	ldr	r3, [pc, #440]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	08db      	lsrs	r3, r3, #3
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	4a6d      	ldr	r2, [pc, #436]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
 8006548:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654a:	e01f      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800654c:	4b69      	ldr	r3, [pc, #420]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006558:	d106      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006560:	d102      	bne.n	8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006562:	4b66      	ldr	r3, [pc, #408]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006566:	e011      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006568:	4b62      	ldr	r3, [pc, #392]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006574:	d106      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657c:	d102      	bne.n	8006584 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800657e:	4b60      	ldr	r3, [pc, #384]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006580:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006582:	e003      	b.n	800658c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006584:	2300      	movs	r3, #0
 8006586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006588:	f000 bce1 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800658c:	f000 bcdf 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006590:	4b5c      	ldr	r3, [pc, #368]	; (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006594:	f000 bcdb 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006598:	2300      	movs	r3, #0
 800659a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800659c:	f000 bcd7 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80065a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80065a8:	430b      	orrs	r3, r1
 80065aa:	f040 80ad 	bne.w	8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80065ae:	4b51      	ldr	r3, [pc, #324]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80065b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065be:	d056      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c6:	f200 8090 	bhi.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065cc:	2bc0      	cmp	r3, #192	; 0xc0
 80065ce:	f000 8088 	beq.w	80066e2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	2bc0      	cmp	r3, #192	; 0xc0
 80065d6:	f200 8088 	bhi.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065dc:	2b80      	cmp	r3, #128	; 0x80
 80065de:	d032      	beq.n	8006646 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80065e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	f200 8081 	bhi.w	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f0:	2b40      	cmp	r3, #64	; 0x40
 80065f2:	d014      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80065f4:	e079      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f6:	4b3f      	ldr	r3, [pc, #252]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006602:	d108      	bne.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ff67 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006612:	f000 bc9c 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006616:	2300      	movs	r3, #0
 8006618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800661a:	f000 bc98 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800661e:	4b35      	ldr	r3, [pc, #212]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006626:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800662a:	d108      	bne.n	800663e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800662c:	f107 0318 	add.w	r3, r7, #24
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fcab 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800663a:	f000 bc88 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800663e:	2300      	movs	r3, #0
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006642:	f000 bc84 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006646:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800664e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006652:	d108      	bne.n	8006666 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006654:	f107 030c 	add.w	r3, r7, #12
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fdeb 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006662:	f000 bc74 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800666a:	f000 bc70 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800666e:	4b21      	ldr	r3, [pc, #132]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006676:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006678:	4b1e      	ldr	r3, [pc, #120]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b04      	cmp	r3, #4
 8006682:	d10c      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	2b00      	cmp	r3, #0
 8006688:	d109      	bne.n	800669e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800668a:	4b1a      	ldr	r3, [pc, #104]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	08db      	lsrs	r3, r3, #3
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	4a18      	ldr	r2, [pc, #96]	; (80066f8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006696:	fa22 f303 	lsr.w	r3, r2, r3
 800669a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800669c:	e01f      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066aa:	d106      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066b2:	d102      	bne.n	80066ba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80066b4:	4b11      	ldr	r3, [pc, #68]	; (80066fc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80066b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066b8:	e011      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c6:	d106      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80066c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066ce:	d102      	bne.n	80066d6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80066d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066d4:	e003      	b.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80066da:	f000 bc38 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066de:	f000 bc36 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80066e2:	4b08      	ldr	r3, [pc, #32]	; (8006704 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80066e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066e6:	f000 bc32 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80066ea:	2300      	movs	r3, #0
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80066ee:	f000 bc2e 	b.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80066f2:	bf00      	nop
 80066f4:	58024400 	.word	0x58024400
 80066f8:	03d09000 	.word	0x03d09000
 80066fc:	003d0900 	.word	0x003d0900
 8006700:	007a1200 	.word	0x007a1200
 8006704:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800670c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006710:	430b      	orrs	r3, r1
 8006712:	f040 809c 	bne.w	800684e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006716:	4b9e      	ldr	r3, [pc, #632]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800671e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006726:	d054      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8006728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800672a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800672e:	f200 808b 	bhi.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006734:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006738:	f000 8083 	beq.w	8006842 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006742:	f200 8081 	bhi.w	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674c:	d02f      	beq.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800674e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006754:	d878      	bhi.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006762:	d012      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006764:	e070      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006766:	4b8a      	ldr	r3, [pc, #552]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006772:	d107      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006778:	4618      	mov	r0, r3
 800677a:	f000 feaf 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800677e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006782:	e3e4      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006784:	2300      	movs	r3, #0
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006788:	e3e1      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800678a:	4b81      	ldr	r3, [pc, #516]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006796:	d107      	bne.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006798:	f107 0318 	add.w	r3, r7, #24
 800679c:	4618      	mov	r0, r3
 800679e:	f000 fbf5 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067a6:	e3d2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067ac:	e3cf      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067ae:	4b78      	ldr	r3, [pc, #480]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067ba:	d107      	bne.n	80067cc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fd37 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80067ca:	e3c0      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80067cc:	2300      	movs	r3, #0
 80067ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067d0:	e3bd      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80067d2:	4b6f      	ldr	r3, [pc, #444]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067dc:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d10c      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067ee:	4b68      	ldr	r3, [pc, #416]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	4a66      	ldr	r2, [pc, #408]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006800:	e01e      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006802:	4b63      	ldr	r3, [pc, #396]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800680e:	d106      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006812:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006816:	d102      	bne.n	800681e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006818:	4b5f      	ldr	r3, [pc, #380]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800681a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681c:	e010      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800681e:	4b5c      	ldr	r3, [pc, #368]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800682a:	d106      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800682c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006832:	d102      	bne.n	800683a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006834:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006838:	e002      	b.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800683a:	2300      	movs	r3, #0
 800683c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800683e:	e386      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006840:	e385      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006842:	4b57      	ldr	r3, [pc, #348]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8006844:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006846:	e382      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800684c:	e37f      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800684e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006852:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006856:	430b      	orrs	r3, r1
 8006858:	f040 80a7 	bne.w	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800685c:	4b4c      	ldr	r3, [pc, #304]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006864:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800686c:	d055      	beq.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800686e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006874:	f200 8096 	bhi.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800687e:	f000 8084 	beq.w	800698a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006884:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006888:	f200 808c 	bhi.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006892:	d030      	beq.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800689a:	f200 8083 	bhi.w	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800689e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d004      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068aa:	d012      	beq.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80068ac:	e07a      	b.n	80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80068ae:	4b38      	ldr	r3, [pc, #224]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068ba:	d107      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fe0b 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ca:	e340      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068d0:	e33d      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80068d2:	4b2f      	ldr	r3, [pc, #188]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068de:	d107      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068e0:	f107 0318 	add.w	r3, r7, #24
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb51 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80068ee:	e32e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80068f4:	e32b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006902:	d107      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006904:	f107 030c 	add.w	r3, r7, #12
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fc93 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006912:	e31c      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006918:	e319      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800691a:	4b1d      	ldr	r3, [pc, #116]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800691c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800691e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006922:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006924:	4b1a      	ldr	r3, [pc, #104]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0304 	and.w	r3, r3, #4
 800692c:	2b04      	cmp	r3, #4
 800692e:	d10c      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8006930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006932:	2b00      	cmp	r3, #0
 8006934:	d109      	bne.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006936:	4b16      	ldr	r3, [pc, #88]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	08db      	lsrs	r3, r3, #3
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006942:	fa22 f303 	lsr.w	r3, r2, r3
 8006946:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006948:	e01e      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d106      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695e:	d102      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006960:	4b0d      	ldr	r3, [pc, #52]	; (8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	e010      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006972:	d106      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800697a:	d102      	bne.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800697c:	4b07      	ldr	r3, [pc, #28]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	e002      	b.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006986:	e2e2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006988:	e2e1      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800698c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800698e:	e2de      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006990:	58024400 	.word	0x58024400
 8006994:	03d09000 	.word	0x03d09000
 8006998:	003d0900 	.word	0x003d0900
 800699c:	007a1200 	.word	0x007a1200
 80069a0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069a8:	e2d1      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80069aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80069b2:	430b      	orrs	r3, r1
 80069b4:	f040 809c 	bne.w	8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80069b8:	4b93      	ldr	r3, [pc, #588]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80069ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069bc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80069c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069c8:	d054      	beq.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d0:	f200 808b 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069da:	f000 8083 	beq.w	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069e4:	f200 8081 	bhi.w	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ee:	d02f      	beq.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f6:	d878      	bhi.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80069f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d004      	beq.n	8006a08 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a04:	d012      	beq.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006a06:	e070      	b.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006a08:	4b7f      	ldr	r3, [pc, #508]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a10:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a14:	d107      	bne.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fd5e 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a24:	e293      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a26:	2300      	movs	r3, #0
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a2a:	e290      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a2c:	4b76      	ldr	r3, [pc, #472]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a38:	d107      	bne.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a3a:	f107 0318 	add.w	r3, r7, #24
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 faa4 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a48:	e281      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a4e:	e27e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a50:	4b6d      	ldr	r3, [pc, #436]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a5e:	f107 030c 	add.w	r3, r7, #12
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 fbe6 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006a6c:	e26f      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006a72:	e26c      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006a74:	4b64      	ldr	r3, [pc, #400]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006a7c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006a7e:	4b62      	ldr	r3, [pc, #392]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0304 	and.w	r3, r3, #4
 8006a86:	2b04      	cmp	r3, #4
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d109      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a90:	4b5d      	ldr	r3, [pc, #372]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	08db      	lsrs	r3, r3, #3
 8006a96:	f003 0303 	and.w	r3, r3, #3
 8006a9a:	4a5c      	ldr	r2, [pc, #368]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006aa2:	e01e      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006aa4:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab0:	d106      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8006ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab8:	d102      	bne.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006aba:	4b55      	ldr	r3, [pc, #340]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006abc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006abe:	e010      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ac0:	4b51      	ldr	r3, [pc, #324]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006acc:	d106      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad4:	d102      	bne.n	8006adc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006ad6:	4b4f      	ldr	r3, [pc, #316]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006adc:	2300      	movs	r3, #0
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006ae0:	e235      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006ae2:	e234      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ae4:	4b4c      	ldr	r3, [pc, #304]	; (8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ae8:	e231      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006aee:	e22e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8006af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006af4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006af8:	430b      	orrs	r3, r1
 8006afa:	f040 808f 	bne.w	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8006b06:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b0e:	d06b      	beq.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b16:	d874      	bhi.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b1e:	d056      	beq.n	8006bce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8006b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006b26:	d86c      	bhi.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b2e:	d03b      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b36:	d864      	bhi.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3e:	d021      	beq.n	8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b46:	d85c      	bhi.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8006b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b54:	d004      	beq.n	8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8006b56:	e054      	b.n	8006c02 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fe fa4c 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b5e:	e1f6      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b60:	4b29      	ldr	r3, [pc, #164]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b6c:	d107      	bne.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6e:	f107 0318 	add.w	r3, r7, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fa0a 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006b7c:	e1e7      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b82:	e1e4      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b84:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b92:	f107 030c 	add.w	r3, r7, #12
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fb4c 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ba0:	e1d5      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ba6:	e1d2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d109      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb4:	4b14      	ldr	r3, [pc, #80]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bc6:	e1c2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bcc:	e1bf      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006bce:	4b0e      	ldr	r3, [pc, #56]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bda:	d102      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006be0:	e1b5      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be6:	e1b2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006be8:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf4:	d102      	bne.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8006bf6:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006bfa:	e1a8      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c00:	e1a5      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c06:	e1a2      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006c08:	58024400 	.word	0x58024400
 8006c0c:	03d09000 	.word	0x03d09000
 8006c10:	003d0900 	.word	0x003d0900
 8006c14:	007a1200 	.word	0x007a1200
 8006c18:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c20:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8006c24:	430b      	orrs	r3, r1
 8006c26:	d173      	bne.n	8006d10 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006c28:	4b9c      	ldr	r3, [pc, #624]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006c30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c38:	d02f      	beq.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c40:	d863      	bhi.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d004      	beq.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c4e:	d012      	beq.n	8006c76 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006c50:	e05b      	b.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c52:	4b92      	ldr	r3, [pc, #584]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c60:	f107 0318 	add.w	r3, r7, #24
 8006c64:	4618      	mov	r0, r3
 8006c66:	f000 f991 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c6e:	e16e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c74:	e16b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c76:	4b89      	ldr	r3, [pc, #548]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c82:	d107      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c84:	f107 030c 	add.w	r3, r7, #12
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fad3 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c92:	e15c      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c98:	e159      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c9a:	4b80      	ldr	r3, [pc, #512]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ca2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ca4:	4b7d      	ldr	r3, [pc, #500]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	d10c      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cb6:	4b79      	ldr	r3, [pc, #484]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	08db      	lsrs	r3, r3, #3
 8006cbc:	f003 0303 	and.w	r3, r3, #3
 8006cc0:	4a77      	ldr	r2, [pc, #476]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006cc2:	fa22 f303 	lsr.w	r3, r2, r3
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cc8:	e01e      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cca:	4b74      	ldr	r3, [pc, #464]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd6:	d106      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8006cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cde:	d102      	bne.n	8006ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006ce0:	4b70      	ldr	r3, [pc, #448]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	e010      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006ce6:	4b6d      	ldr	r3, [pc, #436]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006cf2:	d106      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cfa:	d102      	bne.n	8006d02 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cfc:	4b6a      	ldr	r3, [pc, #424]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d00:	e002      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006d06:	e122      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006d08:	e121      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d0e:	e11e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d14:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	d133      	bne.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d1c:	4b5f      	ldr	r3, [pc, #380]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d32:	d012      	beq.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8006d34:	e023      	b.n	8006d7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d42:	d107      	bne.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f000 fbc7 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d52:	e0fc      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	e0f9      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d5a:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d66:	d107      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d68:	f107 0318 	add.w	r3, r7, #24
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 f90d 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d76:	e0ea      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d7c:	e0e7      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d82:	e0e4      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d88:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	f040 808d 	bne.w	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8006d92:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006da2:	d06b      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006daa:	d874      	bhi.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d056      	beq.n	8006e62 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dba:	d86c      	bhi.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dc2:	d03b      	beq.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dca:	d864      	bhi.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd2:	d021      	beq.n	8006e18 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8006dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dda:	d85c      	bhi.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006de8:	d004      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8006dea:	e054      	b.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006dec:	f000 f8b8 	bl	8006f60 <HAL_RCCEx_GetD3PCLK1Freq>
 8006df0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006df2:	e0ac      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006df4:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e00:	d107      	bne.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e02:	f107 0318 	add.w	r3, r7, #24
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f8c0 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e10:	e09d      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e12:	2300      	movs	r3, #0
 8006e14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e16:	e09a      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e18:	4b20      	ldr	r3, [pc, #128]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e24:	d107      	bne.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e26:	f107 030c 	add.w	r3, r7, #12
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fa02 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e34:	e08b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e3a:	e088      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e3c:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d109      	bne.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e48:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	f003 0303 	and.w	r3, r3, #3
 8006e52:	4a13      	ldr	r2, [pc, #76]	; (8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
 8006e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e5a:	e078      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e60:	e075      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e62:	4b0e      	ldr	r3, [pc, #56]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6e:	d102      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006e70:	4b0c      	ldr	r3, [pc, #48]	; (8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e74:	e06b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e7a:	e068      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e88:	d102      	bne.n	8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8006e8a:	4b07      	ldr	r3, [pc, #28]	; (8006ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006e8e:	e05e      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e94:	e05b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8006e96:	2300      	movs	r3, #0
 8006e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e9a:	e058      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006e9c:	58024400 	.word	0x58024400
 8006ea0:	03d09000 	.word	0x03d09000
 8006ea4:	003d0900 	.word	0x003d0900
 8006ea8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	d148      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8006eb8:	4b27      	ldr	r3, [pc, #156]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec8:	d02a      	beq.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ed0:	d838      	bhi.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ede:	d00d      	beq.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006ee0:	e030      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eee:	d102      	bne.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	; (8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006ef4:	e02b      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006efa:	e028      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006efc:	4b16      	ldr	r3, [pc, #88]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f08:	d107      	bne.n	8006f1a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fae4 	bl	80074dc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f18:	e019      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f1e:	e016      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f20:	4b0d      	ldr	r3, [pc, #52]	; (8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f2c:	d107      	bne.n	8006f3e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f2e:	f107 0318 	add.w	r3, r7, #24
 8006f32:	4618      	mov	r0, r3
 8006f34:	f000 f82a 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f3c:	e007      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f42:	e004      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8006f44:	2300      	movs	r3, #0
 8006f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f48:	e001      	b.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8006f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3740      	adds	r7, #64	; 0x40
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	58024400 	.word	0x58024400
 8006f5c:	007a1200 	.word	0x007a1200

08006f60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f64:	f7fe f816 	bl	8004f94 <HAL_RCC_GetHCLKFreq>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b06      	ldr	r3, [pc, #24]	; (8006f84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	091b      	lsrs	r3, r3, #4
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	4904      	ldr	r1, [pc, #16]	; (8006f88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f76:	5ccb      	ldrb	r3, [r1, r3]
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	58024400 	.word	0x58024400
 8006f88:	0800bd40 	.word	0x0800bd40

08006f8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b089      	sub	sp, #36	; 0x24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f94:	4ba1      	ldr	r3, [pc, #644]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006f9e:	4b9f      	ldr	r3, [pc, #636]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa2:	0b1b      	lsrs	r3, r3, #12
 8006fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006faa:	4b9c      	ldr	r3, [pc, #624]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fae:	091b      	lsrs	r3, r3, #4
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006fb6:	4b99      	ldr	r3, [pc, #612]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	08db      	lsrs	r3, r3, #3
 8006fbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8111 	beq.w	80071fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	f000 8083 	beq.w	80070e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f200 80a1 	bhi.w	800712c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d003      	beq.n	8006ff8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d056      	beq.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ff6:	e099      	b.n	800712c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff8:	4b88      	ldr	r3, [pc, #544]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0320 	and.w	r3, r3, #32
 8007000:	2b00      	cmp	r3, #0
 8007002:	d02d      	beq.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007004:	4b85      	ldr	r3, [pc, #532]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	08db      	lsrs	r3, r3, #3
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	4a84      	ldr	r2, [pc, #528]	; (8007220 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007010:	fa22 f303 	lsr.w	r3, r2, r3
 8007014:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	ee07 3a90 	vmov	s15, r3
 800701c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702e:	4b7b      	ldr	r3, [pc, #492]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007042:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800705e:	e087      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007228 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800706e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007072:	4b6a      	ldr	r3, [pc, #424]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007082:	ed97 6a03 	vldr	s12, [r7, #12]
 8007086:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070a2:	e065      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800722c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070b6:	4b59      	ldr	r3, [pc, #356]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80070ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070e6:	e043      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80070f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fa:	4b48      	ldr	r3, [pc, #288]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710a:	ed97 6a03 	vldr	s12, [r7, #12]
 800710e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800711e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007126:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800712a:	e021      	b.n	8007170 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	ee07 3a90 	vmov	s15, r3
 8007132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007136:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800722c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800713a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800713e:	4b37      	ldr	r3, [pc, #220]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800714e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007152:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007224 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800715a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800715e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800716a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800716e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007170:	4b2a      	ldr	r3, [pc, #168]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	0a5b      	lsrs	r3, r3, #9
 8007176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800718a:	edd7 6a07 	vldr	s13, [r7, #28]
 800718e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007196:	ee17 2a90 	vmov	r2, s15
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800719e:	4b1f      	ldr	r3, [pc, #124]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	0c1b      	lsrs	r3, r3, #16
 80071a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80071bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071c4:	ee17 2a90 	vmov	r2, s15
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d0:	0e1b      	lsrs	r3, r3, #24
 80071d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80071e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80071ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f2:	ee17 2a90 	vmov	r2, s15
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80071fa:	e008      	b.n	800720e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	609a      	str	r2, [r3, #8]
}
 800720e:	bf00      	nop
 8007210:	3724      	adds	r7, #36	; 0x24
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	58024400 	.word	0x58024400
 8007220:	03d09000 	.word	0x03d09000
 8007224:	46000000 	.word	0x46000000
 8007228:	4c742400 	.word	0x4c742400
 800722c:	4a742400 	.word	0x4a742400
 8007230:	4af42400 	.word	0x4af42400

08007234 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007234:	b480      	push	{r7}
 8007236:	b089      	sub	sp, #36	; 0x24
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800723c:	4ba1      	ldr	r3, [pc, #644]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	f003 0303 	and.w	r3, r3, #3
 8007244:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007246:	4b9f      	ldr	r3, [pc, #636]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724a:	0d1b      	lsrs	r3, r3, #20
 800724c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007250:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007252:	4b9c      	ldr	r3, [pc, #624]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	f003 0301 	and.w	r3, r3, #1
 800725c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800725e:	4b99      	ldr	r3, [pc, #612]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	08db      	lsrs	r3, r3, #3
 8007264:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007268:	693a      	ldr	r2, [r7, #16]
 800726a:	fb02 f303 	mul.w	r3, r2, r3
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 8111 	beq.w	80074a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	2b02      	cmp	r3, #2
 8007286:	f000 8083 	beq.w	8007390 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b02      	cmp	r3, #2
 800728e:	f200 80a1 	bhi.w	80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d056      	beq.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800729e:	e099      	b.n	80073d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072a0:	4b88      	ldr	r3, [pc, #544]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d02d      	beq.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072ac:	4b85      	ldr	r3, [pc, #532]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	08db      	lsrs	r3, r3, #3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	4a84      	ldr	r2, [pc, #528]	; (80074c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80072b8:	fa22 f303 	lsr.w	r3, r2, r3
 80072bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	ee07 3a90 	vmov	s15, r3
 80072c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b7b      	ldr	r3, [pc, #492]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007306:	e087      	b.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731a:	4b6a      	ldr	r3, [pc, #424]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732a:	ed97 6a03 	vldr	s12, [r7, #12]
 800732e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800734a:	e065      	b.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800735a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800735e:	4b59      	ldr	r3, [pc, #356]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800736e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007372:	eddf 5a56 	vldr	s11, [pc, #344]	; 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800737a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800737e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800738a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800738e:	e043      	b.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800739a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80074d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800739e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073a2:	4b48      	ldr	r3, [pc, #288]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80073b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80073d2:	e021      	b.n	8007418 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	ee07 3a90 	vmov	s15, r3
 80073da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80074d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073e6:	4b37      	ldr	r3, [pc, #220]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073ee:	ee07 3a90 	vmov	s15, r3
 80073f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 80074cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800740a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800740e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007416:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007418:	4b2a      	ldr	r3, [pc, #168]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	0a5b      	lsrs	r3, r3, #9
 800741e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800742e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007432:	edd7 6a07 	vldr	s13, [r7, #28]
 8007436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 2a90 	vmov	r2, s15
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007446:	4b1f      	ldr	r3, [pc, #124]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	0c1b      	lsrs	r3, r3, #16
 800744c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800745c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007460:	edd7 6a07 	vldr	s13, [r7, #28]
 8007464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800746c:	ee17 2a90 	vmov	r2, s15
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007474:	4b13      	ldr	r3, [pc, #76]	; (80074c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	0e1b      	lsrs	r3, r3, #24
 800747a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800748a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800748e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800749a:	ee17 2a90 	vmov	r2, s15
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80074a2:	e008      	b.n	80074b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	609a      	str	r2, [r3, #8]
}
 80074b6:	bf00      	nop
 80074b8:	3724      	adds	r7, #36	; 0x24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	58024400 	.word	0x58024400
 80074c8:	03d09000 	.word	0x03d09000
 80074cc:	46000000 	.word	0x46000000
 80074d0:	4c742400 	.word	0x4c742400
 80074d4:	4a742400 	.word	0x4a742400
 80074d8:	4af42400 	.word	0x4af42400

080074dc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80074dc:	b480      	push	{r7}
 80074de:	b089      	sub	sp, #36	; 0x24
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80074e4:	4ba0      	ldr	r3, [pc, #640]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e8:	f003 0303 	and.w	r3, r3, #3
 80074ec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80074ee:	4b9e      	ldr	r3, [pc, #632]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f2:	091b      	lsrs	r3, r3, #4
 80074f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074f8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80074fa:	4b9b      	ldr	r3, [pc, #620]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007504:	4b98      	ldr	r3, [pc, #608]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	08db      	lsrs	r3, r3, #3
 800750a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	fb02 f303 	mul.w	r3, r2, r3
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 8111 	beq.w	800774a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	2b02      	cmp	r3, #2
 800752c:	f000 8083 	beq.w	8007636 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	2b02      	cmp	r3, #2
 8007534:	f200 80a1 	bhi.w	800767a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007538:	69bb      	ldr	r3, [r7, #24]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d056      	beq.n	80075f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007544:	e099      	b.n	800767a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007546:	4b88      	ldr	r3, [pc, #544]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02d      	beq.n	80075ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007552:	4b85      	ldr	r3, [pc, #532]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	08db      	lsrs	r3, r3, #3
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	4a83      	ldr	r2, [pc, #524]	; (800776c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800755e:	fa22 f303 	lsr.w	r3, r2, r3
 8007562:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	ee07 3a90 	vmov	s15, r3
 800756a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	ee07 3a90 	vmov	s15, r3
 8007574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800757c:	4b7a      	ldr	r3, [pc, #488]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800758c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007590:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007594:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007598:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800759c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80075ac:	e087      	b.n	80076be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007774 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80075bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075c0:	4b69      	ldr	r3, [pc, #420]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80075d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075f0:	e065      	b.n	80076be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007778 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007600:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007604:	4b58      	ldr	r3, [pc, #352]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007614:	ed97 6a03 	vldr	s12, [r7, #12]
 8007618:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800761c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007624:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007628:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800762c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007630:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007634:	e043      	b.n	80076be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007640:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800777c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007648:	4b47      	ldr	r3, [pc, #284]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007650:	ee07 3a90 	vmov	s15, r3
 8007654:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007658:	ed97 6a03 	vldr	s12, [r7, #12]
 800765c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007660:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007668:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007674:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007678:	e021      	b.n	80076be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007774 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007688:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768c:	4b36      	ldr	r3, [pc, #216]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800768e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007694:	ee07 3a90 	vmov	s15, r3
 8007698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769c:	ed97 6a03 	vldr	s12, [r7, #12]
 80076a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007770 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80076a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80076be:	4b2a      	ldr	r3, [pc, #168]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	0a5b      	lsrs	r3, r3, #9
 80076c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e4:	ee17 2a90 	vmov	r2, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80076ec:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	0c1b      	lsrs	r3, r3, #16
 80076f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007702:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007706:	edd7 6a07 	vldr	s13, [r7, #28]
 800770a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800770e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007712:	ee17 2a90 	vmov	r2, s15
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800771a:	4b13      	ldr	r3, [pc, #76]	; (8007768 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	0e1b      	lsrs	r3, r3, #24
 8007720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007724:	ee07 3a90 	vmov	s15, r3
 8007728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007734:	edd7 6a07 	vldr	s13, [r7, #28]
 8007738:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800773c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007740:	ee17 2a90 	vmov	r2, s15
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007748:	e008      	b.n	800775c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	3724      	adds	r7, #36	; 0x24
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	58024400 	.word	0x58024400
 800776c:	03d09000 	.word	0x03d09000
 8007770:	46000000 	.word	0x46000000
 8007774:	4c742400 	.word	0x4c742400
 8007778:	4a742400 	.word	0x4a742400
 800777c:	4af42400 	.word	0x4af42400

08007780 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800778e:	4b53      	ldr	r3, [pc, #332]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d101      	bne.n	800779e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e099      	b.n	80078d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800779e:	4b4f      	ldr	r3, [pc, #316]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a4e      	ldr	r2, [pc, #312]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80077a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077aa:	f7f9 fedb 	bl	8001564 <HAL_GetTick>
 80077ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077b0:	e008      	b.n	80077c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077b2:	f7f9 fed7 	bl	8001564 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e086      	b.n	80078d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077c4:	4b45      	ldr	r3, [pc, #276]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1f0      	bne.n	80077b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80077d0:	4b42      	ldr	r3, [pc, #264]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	031b      	lsls	r3, r3, #12
 80077de:	493f      	ldr	r1, [pc, #252]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80077e0:	4313      	orrs	r3, r2
 80077e2:	628b      	str	r3, [r1, #40]	; 0x28
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	3b01      	subs	r3, #1
 80077f4:	025b      	lsls	r3, r3, #9
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	3b01      	subs	r3, #1
 8007800:	041b      	lsls	r3, r3, #16
 8007802:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	3b01      	subs	r3, #1
 800780e:	061b      	lsls	r3, r3, #24
 8007810:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007814:	4931      	ldr	r1, [pc, #196]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007816:	4313      	orrs	r3, r2
 8007818:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800781a:	4b30      	ldr	r3, [pc, #192]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	695b      	ldr	r3, [r3, #20]
 8007826:	492d      	ldr	r1, [pc, #180]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007828:	4313      	orrs	r3, r2
 800782a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800782c:	4b2b      	ldr	r3, [pc, #172]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800782e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007830:	f023 0220 	bic.w	r2, r3, #32
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	4928      	ldr	r1, [pc, #160]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800783a:	4313      	orrs	r3, r2
 800783c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800783e:	4b27      	ldr	r3, [pc, #156]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007842:	4a26      	ldr	r2, [pc, #152]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007844:	f023 0310 	bic.w	r3, r3, #16
 8007848:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800784c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800784e:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <RCCEx_PLL2_Config+0x160>)
 8007850:	4013      	ands	r3, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	69d2      	ldr	r2, [r2, #28]
 8007856:	00d2      	lsls	r2, r2, #3
 8007858:	4920      	ldr	r1, [pc, #128]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800785a:	4313      	orrs	r3, r2
 800785c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800785e:	4b1f      	ldr	r3, [pc, #124]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007862:	4a1e      	ldr	r2, [pc, #120]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007864:	f043 0310 	orr.w	r3, r3, #16
 8007868:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007870:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800787a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800787c:	e00f      	b.n	800789e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d106      	bne.n	8007892 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007884:	4b15      	ldr	r3, [pc, #84]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	4a14      	ldr	r2, [pc, #80]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 800788a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800788e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007890:	e005      	b.n	800789e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007892:	4b12      	ldr	r3, [pc, #72]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	4a11      	ldr	r2, [pc, #68]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 8007898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800789c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800789e:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a0e      	ldr	r2, [pc, #56]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80078a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078aa:	f7f9 fe5b 	bl	8001564 <HAL_GetTick>
 80078ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078b0:	e008      	b.n	80078c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078b2:	f7f9 fe57 	bl	8001564 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e006      	b.n	80078d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <RCCEx_PLL2_Config+0x15c>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0f0      	beq.n	80078b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80078d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	58024400 	.word	0x58024400
 80078e0:	ffff0007 	.word	0xffff0007

080078e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078f2:	4b53      	ldr	r3, [pc, #332]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d101      	bne.n	8007902 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e099      	b.n	8007a36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007902:	4b4f      	ldr	r3, [pc, #316]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a4e      	ldr	r2, [pc, #312]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800790c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800790e:	f7f9 fe29 	bl	8001564 <HAL_GetTick>
 8007912:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007914:	e008      	b.n	8007928 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007916:	f7f9 fe25 	bl	8001564 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e086      	b.n	8007a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007928:	4b45      	ldr	r3, [pc, #276]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1f0      	bne.n	8007916 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007934:	4b42      	ldr	r3, [pc, #264]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007938:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	051b      	lsls	r3, r3, #20
 8007942:	493f      	ldr	r1, [pc, #252]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007944:	4313      	orrs	r3, r2
 8007946:	628b      	str	r3, [r1, #40]	; 0x28
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	3b01      	subs	r3, #1
 800794e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	3b01      	subs	r3, #1
 8007958:	025b      	lsls	r3, r3, #9
 800795a:	b29b      	uxth	r3, r3
 800795c:	431a      	orrs	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	3b01      	subs	r3, #1
 8007964:	041b      	lsls	r3, r3, #16
 8007966:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	3b01      	subs	r3, #1
 8007972:	061b      	lsls	r3, r3, #24
 8007974:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007978:	4931      	ldr	r1, [pc, #196]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 800797a:	4313      	orrs	r3, r2
 800797c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800797e:	4b30      	ldr	r3, [pc, #192]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007982:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	492d      	ldr	r1, [pc, #180]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 800798c:	4313      	orrs	r3, r2
 800798e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007990:	4b2b      	ldr	r3, [pc, #172]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007994:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	4928      	ldr	r1, [pc, #160]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80079a2:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a6:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80079ae:	4b24      	ldr	r3, [pc, #144]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b2:	4b24      	ldr	r3, [pc, #144]	; (8007a44 <RCCEx_PLL3_Config+0x160>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	69d2      	ldr	r2, [r2, #28]
 80079ba:	00d2      	lsls	r2, r2, #3
 80079bc:	4920      	ldr	r1, [pc, #128]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80079c2:	4b1f      	ldr	r3, [pc, #124]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	4a1e      	ldr	r2, [pc, #120]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80079d4:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079e0:	e00f      	b.n	8007a02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d106      	bne.n	80079f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80079e8:	4b15      	ldr	r3, [pc, #84]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a14      	ldr	r2, [pc, #80]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079f4:	e005      	b.n	8007a02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80079f6:	4b12      	ldr	r3, [pc, #72]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079fa:	4a11      	ldr	r2, [pc, #68]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 80079fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a00:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007a02:	4b0f      	ldr	r3, [pc, #60]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a0e      	ldr	r2, [pc, #56]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a0e:	f7f9 fda9 	bl	8001564 <HAL_GetTick>
 8007a12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a14:	e008      	b.n	8007a28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a16:	f7f9 fda5 	bl	8001564 <HAL_GetTick>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	1ad3      	subs	r3, r2, r3
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d901      	bls.n	8007a28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a24:	2303      	movs	r3, #3
 8007a26:	e006      	b.n	8007a36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a28:	4b05      	ldr	r3, [pc, #20]	; (8007a40 <RCCEx_PLL3_Config+0x15c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d0f0      	beq.n	8007a16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	58024400 	.word	0x58024400
 8007a44:	ffff0007 	.word	0xffff0007

08007a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e042      	b.n	8007ae0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d106      	bne.n	8007a72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7f9 fb37 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2224      	movs	r2, #36	; 0x24
 8007a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0201 	bic.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f82c 	bl	8007ae8 <UART_SetConfig>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e022      	b.n	8007ae0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fd88 	bl	80085b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ab6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689a      	ldr	r2, [r3, #8]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ac6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0201 	orr.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fe0f 	bl	80086fc <UART_CheckIdleState>
 8007ade:	4603      	mov	r3, r0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b092      	sub	sp, #72	; 0x48
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4bbe      	ldr	r3, [pc, #760]	; (8007e10 <UART_SetConfig+0x328>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4ab3      	ldr	r2, [pc, #716]	; (8007e14 <UART_SetConfig+0x32c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b50:	4313      	orrs	r3, r2
 8007b52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	4baf      	ldr	r3, [pc, #700]	; (8007e18 <UART_SetConfig+0x330>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f023 010f 	bic.w	r1, r3, #15
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4aa6      	ldr	r2, [pc, #664]	; (8007e1c <UART_SetConfig+0x334>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d177      	bne.n	8007c78 <UART_SetConfig+0x190>
 8007b88:	4ba5      	ldr	r3, [pc, #660]	; (8007e20 <UART_SetConfig+0x338>)
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b90:	2b28      	cmp	r3, #40	; 0x28
 8007b92:	d86d      	bhi.n	8007c70 <UART_SetConfig+0x188>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <UART_SetConfig+0xb4>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c71 	.word	0x08007c71
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c71 	.word	0x08007c71
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c71 	.word	0x08007c71
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c71 	.word	0x08007c71
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c46:	e222      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c4e:	e21e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c56:	e21a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c5e:	e216      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c66:	e212      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c68:	2340      	movs	r3, #64	; 0x40
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c6e:	e20e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c70:	2380      	movs	r3, #128	; 0x80
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007c76:	e20a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a69      	ldr	r2, [pc, #420]	; (8007e24 <UART_SetConfig+0x33c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d130      	bne.n	8007ce4 <UART_SetConfig+0x1fc>
 8007c82:	4b67      	ldr	r3, [pc, #412]	; (8007e20 <UART_SetConfig+0x338>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d826      	bhi.n	8007cdc <UART_SetConfig+0x1f4>
 8007c8e:	a201      	add	r2, pc, #4	; (adr r2, 8007c94 <UART_SetConfig+0x1ac>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cb2:	e1ec      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cba:	e1e8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cc2:	e1e4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cca:	e1e0      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cd2:	e1dc      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007cda:	e1d8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ce2:	e1d4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a4f      	ldr	r2, [pc, #316]	; (8007e28 <UART_SetConfig+0x340>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d130      	bne.n	8007d50 <UART_SetConfig+0x268>
 8007cee:	4b4c      	ldr	r3, [pc, #304]	; (8007e20 <UART_SetConfig+0x338>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d826      	bhi.n	8007d48 <UART_SetConfig+0x260>
 8007cfa:	a201      	add	r2, pc, #4	; (adr r2, 8007d00 <UART_SetConfig+0x218>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d19 	.word	0x08007d19
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d1e:	e1b6      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d20:	2304      	movs	r3, #4
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d26:	e1b2      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d2e:	e1ae      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d30:	2310      	movs	r3, #16
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d36:	e1aa      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d3e:	e1a6      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d40:	2340      	movs	r3, #64	; 0x40
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d46:	e1a2      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d48:	2380      	movs	r3, #128	; 0x80
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d4e:	e19e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a35      	ldr	r2, [pc, #212]	; (8007e2c <UART_SetConfig+0x344>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d130      	bne.n	8007dbc <UART_SetConfig+0x2d4>
 8007d5a:	4b31      	ldr	r3, [pc, #196]	; (8007e20 <UART_SetConfig+0x338>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d826      	bhi.n	8007db4 <UART_SetConfig+0x2cc>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0x284>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007da5 	.word	0x08007da5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e180      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e17c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e178      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e174      	b.n	800808e <UART_SetConfig+0x5a6>
 8007da4:	2320      	movs	r3, #32
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e170      	b.n	800808e <UART_SetConfig+0x5a6>
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e16c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e168      	b.n	800808e <UART_SetConfig+0x5a6>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1b      	ldr	r2, [pc, #108]	; (8007e30 <UART_SetConfig+0x348>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d142      	bne.n	8007e4c <UART_SetConfig+0x364>
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <UART_SetConfig+0x338>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d838      	bhi.n	8007e44 <UART_SetConfig+0x35c>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x2f0>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e14a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e146      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e142      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e13e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e10:	cfff69f3 	.word	0xcfff69f3
 8007e14:	58000c00 	.word	0x58000c00
 8007e18:	11fff4ff 	.word	0x11fff4ff
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	58024400 	.word	0x58024400
 8007e24:	40004400 	.word	0x40004400
 8007e28:	40004800 	.word	0x40004800
 8007e2c:	40004c00 	.word	0x40004c00
 8007e30:	40005000 	.word	0x40005000
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e3a:	e128      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e42:	e124      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e44:	2380      	movs	r3, #128	; 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e4a:	e120      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4acb      	ldr	r2, [pc, #812]	; (8008180 <UART_SetConfig+0x698>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d176      	bne.n	8007f44 <UART_SetConfig+0x45c>
 8007e56:	4bcb      	ldr	r3, [pc, #812]	; (8008184 <UART_SetConfig+0x69c>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e5e:	2b28      	cmp	r3, #40	; 0x28
 8007e60:	d86c      	bhi.n	8007f3c <UART_SetConfig+0x454>
 8007e62:	a201      	add	r2, pc, #4	; (adr r2, 8007e68 <UART_SetConfig+0x380>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007f0d 	.word	0x08007f0d
 8007e6c:	08007f3d 	.word	0x08007f3d
 8007e70:	08007f3d 	.word	0x08007f3d
 8007e74:	08007f3d 	.word	0x08007f3d
 8007e78:	08007f3d 	.word	0x08007f3d
 8007e7c:	08007f3d 	.word	0x08007f3d
 8007e80:	08007f3d 	.word	0x08007f3d
 8007e84:	08007f3d 	.word	0x08007f3d
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f3d 	.word	0x08007f3d
 8007e90:	08007f3d 	.word	0x08007f3d
 8007e94:	08007f3d 	.word	0x08007f3d
 8007e98:	08007f3d 	.word	0x08007f3d
 8007e9c:	08007f3d 	.word	0x08007f3d
 8007ea0:	08007f3d 	.word	0x08007f3d
 8007ea4:	08007f3d 	.word	0x08007f3d
 8007ea8:	08007f1d 	.word	0x08007f1d
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f25 	.word	0x08007f25
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f12:	e0bc      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f14:	2304      	movs	r3, #4
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f1a:	e0b8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f22:	e0b4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f24:	2310      	movs	r3, #16
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f2a:	e0b0      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f32:	e0ac      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f34:	2340      	movs	r3, #64	; 0x40
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e0a8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f3c:	2380      	movs	r3, #128	; 0x80
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e0a4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a8f      	ldr	r2, [pc, #572]	; (8008188 <UART_SetConfig+0x6a0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d130      	bne.n	8007fb0 <UART_SetConfig+0x4c8>
 8007f4e:	4b8d      	ldr	r3, [pc, #564]	; (8008184 <UART_SetConfig+0x69c>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d826      	bhi.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f5a:	a201      	add	r2, pc, #4	; (adr r2, 8007f60 <UART_SetConfig+0x478>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f89 	.word	0x08007f89
 8007f6c:	08007f91 	.word	0x08007f91
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007fa1 	.word	0x08007fa1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7e:	e086      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e082      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e07e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f96:	e07a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f98:	2320      	movs	r3, #32
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f9e:	e076      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fa0:	2340      	movs	r3, #64	; 0x40
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fa6:	e072      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fa8:	2380      	movs	r3, #128	; 0x80
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fae:	e06e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a75      	ldr	r2, [pc, #468]	; (800818c <UART_SetConfig+0x6a4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d130      	bne.n	800801c <UART_SetConfig+0x534>
 8007fba:	4b72      	ldr	r3, [pc, #456]	; (8008184 <UART_SetConfig+0x69c>)
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d826      	bhi.n	8008014 <UART_SetConfig+0x52c>
 8007fc6:	a201      	add	r2, pc, #4	; (adr r2, 8007fcc <UART_SetConfig+0x4e4>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fe5 	.word	0x08007fe5
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007fea:	e050      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ff2:	e04c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ffa:	e048      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008002:	e044      	b.n	800808e <UART_SetConfig+0x5a6>
 8008004:	2320      	movs	r3, #32
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800800a:	e040      	b.n	800808e <UART_SetConfig+0x5a6>
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008012:	e03c      	b.n	800808e <UART_SetConfig+0x5a6>
 8008014:	2380      	movs	r3, #128	; 0x80
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800801a:	e038      	b.n	800808e <UART_SetConfig+0x5a6>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5b      	ldr	r2, [pc, #364]	; (8008190 <UART_SetConfig+0x6a8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d130      	bne.n	8008088 <UART_SetConfig+0x5a0>
 8008026:	4b57      	ldr	r3, [pc, #348]	; (8008184 <UART_SetConfig+0x69c>)
 8008028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b05      	cmp	r3, #5
 8008030:	d826      	bhi.n	8008080 <UART_SetConfig+0x598>
 8008032:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <UART_SetConfig+0x550>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008051 	.word	0x08008051
 800803c:	08008059 	.word	0x08008059
 8008040:	08008061 	.word	0x08008061
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	2302      	movs	r3, #2
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e01a      	b.n	800808e <UART_SetConfig+0x5a6>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e016      	b.n	800808e <UART_SetConfig+0x5a6>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e012      	b.n	800808e <UART_SetConfig+0x5a6>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e00e      	b.n	800808e <UART_SetConfig+0x5a6>
 8008070:	2320      	movs	r3, #32
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e00a      	b.n	800808e <UART_SetConfig+0x5a6>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e006      	b.n	800808e <UART_SetConfig+0x5a6>
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e002      	b.n	800808e <UART_SetConfig+0x5a6>
 8008088:	2380      	movs	r3, #128	; 0x80
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3f      	ldr	r2, [pc, #252]	; (8008190 <UART_SetConfig+0x6a8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	f040 80f8 	bne.w	800828a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800809a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800809e:	2b20      	cmp	r3, #32
 80080a0:	dc46      	bgt.n	8008130 <UART_SetConfig+0x648>
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	f2c0 8082 	blt.w	80081ac <UART_SetConfig+0x6c4>
 80080a8:	3b02      	subs	r3, #2
 80080aa:	2b1e      	cmp	r3, #30
 80080ac:	d87e      	bhi.n	80081ac <UART_SetConfig+0x6c4>
 80080ae:	a201      	add	r2, pc, #4	; (adr r2, 80080b4 <UART_SetConfig+0x5cc>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	08008137 	.word	0x08008137
 80080b8:	080081ad 	.word	0x080081ad
 80080bc:	0800813f 	.word	0x0800813f
 80080c0:	080081ad 	.word	0x080081ad
 80080c4:	080081ad 	.word	0x080081ad
 80080c8:	080081ad 	.word	0x080081ad
 80080cc:	0800814f 	.word	0x0800814f
 80080d0:	080081ad 	.word	0x080081ad
 80080d4:	080081ad 	.word	0x080081ad
 80080d8:	080081ad 	.word	0x080081ad
 80080dc:	080081ad 	.word	0x080081ad
 80080e0:	080081ad 	.word	0x080081ad
 80080e4:	080081ad 	.word	0x080081ad
 80080e8:	080081ad 	.word	0x080081ad
 80080ec:	0800815f 	.word	0x0800815f
 80080f0:	080081ad 	.word	0x080081ad
 80080f4:	080081ad 	.word	0x080081ad
 80080f8:	080081ad 	.word	0x080081ad
 80080fc:	080081ad 	.word	0x080081ad
 8008100:	080081ad 	.word	0x080081ad
 8008104:	080081ad 	.word	0x080081ad
 8008108:	080081ad 	.word	0x080081ad
 800810c:	080081ad 	.word	0x080081ad
 8008110:	080081ad 	.word	0x080081ad
 8008114:	080081ad 	.word	0x080081ad
 8008118:	080081ad 	.word	0x080081ad
 800811c:	080081ad 	.word	0x080081ad
 8008120:	080081ad 	.word	0x080081ad
 8008124:	080081ad 	.word	0x080081ad
 8008128:	080081ad 	.word	0x080081ad
 800812c:	0800819f 	.word	0x0800819f
 8008130:	2b40      	cmp	r3, #64	; 0x40
 8008132:	d037      	beq.n	80081a4 <UART_SetConfig+0x6bc>
 8008134:	e03a      	b.n	80081ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008136:	f7fe ff13 	bl	8006f60 <HAL_RCCEx_GetD3PCLK1Freq>
 800813a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800813c:	e03c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe ff22 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800814c:	e034      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff f86e 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800815c:	e02c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <UART_SetConfig+0x69c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d016      	beq.n	8008198 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800816a:	4b06      	ldr	r3, [pc, #24]	; (8008184 <UART_SetConfig+0x69c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a07      	ldr	r2, [pc, #28]	; (8008194 <UART_SetConfig+0x6ac>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800817c:	e01c      	b.n	80081b8 <UART_SetConfig+0x6d0>
 800817e:	bf00      	nop
 8008180:	40011400 	.word	0x40011400
 8008184:	58024400 	.word	0x58024400
 8008188:	40007800 	.word	0x40007800
 800818c:	40007c00 	.word	0x40007c00
 8008190:	58000c00 	.word	0x58000c00
 8008194:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008198:	4b9d      	ldr	r3, [pc, #628]	; (8008410 <UART_SetConfig+0x928>)
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800819c:	e00c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800819e:	4b9d      	ldr	r3, [pc, #628]	; (8008414 <UART_SetConfig+0x92c>)
 80081a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081a2:	e009      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081aa:	e005      	b.n	80081b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80081b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 81de 	beq.w	800857c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	4a94      	ldr	r2, [pc, #592]	; (8008418 <UART_SetConfig+0x930>)
 80081c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ca:	461a      	mov	r2, r3
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	4413      	add	r3, r2
 80081de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d305      	bcc.n	80081f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d903      	bls.n	80081f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80081f6:	e1c1      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081fa:	2200      	movs	r2, #0
 80081fc:	60bb      	str	r3, [r7, #8]
 80081fe:	60fa      	str	r2, [r7, #12]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008204:	4a84      	ldr	r2, [pc, #528]	; (8008418 <UART_SetConfig+0x930>)
 8008206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820a:	b29b      	uxth	r3, r3
 800820c:	2200      	movs	r2, #0
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800821a:	f7f8 f861 	bl	80002e0 <__aeabi_uldivmod>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4610      	mov	r0, r2
 8008224:	4619      	mov	r1, r3
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	020b      	lsls	r3, r1, #8
 8008230:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008234:	0202      	lsls	r2, r0, #8
 8008236:	6979      	ldr	r1, [r7, #20]
 8008238:	6849      	ldr	r1, [r1, #4]
 800823a:	0849      	lsrs	r1, r1, #1
 800823c:	2000      	movs	r0, #0
 800823e:	460c      	mov	r4, r1
 8008240:	4605      	mov	r5, r0
 8008242:	eb12 0804 	adds.w	r8, r2, r4
 8008246:	eb43 0905 	adc.w	r9, r3, r5
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	469a      	mov	sl, r3
 8008252:	4693      	mov	fp, r2
 8008254:	4652      	mov	r2, sl
 8008256:	465b      	mov	r3, fp
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f840 	bl	80002e0 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800826a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800826e:	d308      	bcc.n	8008282 <UART_SetConfig+0x79a>
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008276:	d204      	bcs.n	8008282 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800827e:	60da      	str	r2, [r3, #12]
 8008280:	e17c      	b.n	800857c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008288:	e178      	b.n	800857c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008292:	f040 80c5 	bne.w	8008420 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008296:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800829a:	2b20      	cmp	r3, #32
 800829c:	dc48      	bgt.n	8008330 <UART_SetConfig+0x848>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	db7b      	blt.n	800839a <UART_SetConfig+0x8b2>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d879      	bhi.n	800839a <UART_SetConfig+0x8b2>
 80082a6:	a201      	add	r2, pc, #4	; (adr r2, 80082ac <UART_SetConfig+0x7c4>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	08008337 	.word	0x08008337
 80082b0:	0800833f 	.word	0x0800833f
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	0800839b 	.word	0x0800839b
 80082bc:	08008347 	.word	0x08008347
 80082c0:	0800839b 	.word	0x0800839b
 80082c4:	0800839b 	.word	0x0800839b
 80082c8:	0800839b 	.word	0x0800839b
 80082cc:	08008357 	.word	0x08008357
 80082d0:	0800839b 	.word	0x0800839b
 80082d4:	0800839b 	.word	0x0800839b
 80082d8:	0800839b 	.word	0x0800839b
 80082dc:	0800839b 	.word	0x0800839b
 80082e0:	0800839b 	.word	0x0800839b
 80082e4:	0800839b 	.word	0x0800839b
 80082e8:	0800839b 	.word	0x0800839b
 80082ec:	08008367 	.word	0x08008367
 80082f0:	0800839b 	.word	0x0800839b
 80082f4:	0800839b 	.word	0x0800839b
 80082f8:	0800839b 	.word	0x0800839b
 80082fc:	0800839b 	.word	0x0800839b
 8008300:	0800839b 	.word	0x0800839b
 8008304:	0800839b 	.word	0x0800839b
 8008308:	0800839b 	.word	0x0800839b
 800830c:	0800839b 	.word	0x0800839b
 8008310:	0800839b 	.word	0x0800839b
 8008314:	0800839b 	.word	0x0800839b
 8008318:	0800839b 	.word	0x0800839b
 800831c:	0800839b 	.word	0x0800839b
 8008320:	0800839b 	.word	0x0800839b
 8008324:	0800839b 	.word	0x0800839b
 8008328:	0800839b 	.word	0x0800839b
 800832c:	0800838d 	.word	0x0800838d
 8008330:	2b40      	cmp	r3, #64	; 0x40
 8008332:	d02e      	beq.n	8008392 <UART_SetConfig+0x8aa>
 8008334:	e031      	b.n	800839a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008336:	f7fc fe5d 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 800833a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800833c:	e033      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800833e:	f7fc fe6f 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 8008342:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008344:	e02f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fe1e 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008354:	e027      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008356:	f107 0318 	add.w	r3, r7, #24
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe ff6a 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008364:	e01f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008366:	4b2d      	ldr	r3, [pc, #180]	; (800841c <UART_SetConfig+0x934>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008372:	4b2a      	ldr	r3, [pc, #168]	; (800841c <UART_SetConfig+0x934>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	4a24      	ldr	r2, [pc, #144]	; (8008410 <UART_SetConfig+0x928>)
 800837e:	fa22 f303 	lsr.w	r3, r2, r3
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008384:	e00f      	b.n	80083a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008386:	4b22      	ldr	r3, [pc, #136]	; (8008410 <UART_SetConfig+0x928>)
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800838a:	e00c      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800838c:	4b21      	ldr	r3, [pc, #132]	; (8008414 <UART_SetConfig+0x92c>)
 800838e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008390:	e009      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008398:	e005      	b.n	80083a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80083a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80e7 	beq.w	800857c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083b2:	4a19      	ldr	r2, [pc, #100]	; (8008418 <UART_SetConfig+0x930>)
 80083b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c0:	005a      	lsls	r2, r3, #1
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	085b      	lsrs	r3, r3, #1
 80083c8:	441a      	add	r2, r3
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d916      	bls.n	8008408 <UART_SetConfig+0x920>
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083e0:	d212      	bcs.n	8008408 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f023 030f 	bic.w	r3, r3, #15
 80083ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80083fa:	4313      	orrs	r3, r2
 80083fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	e0b9      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800840e:	e0b5      	b.n	800857c <UART_SetConfig+0xa94>
 8008410:	03d09000 	.word	0x03d09000
 8008414:	003d0900 	.word	0x003d0900
 8008418:	0800bd50 	.word	0x0800bd50
 800841c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008420:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008424:	2b20      	cmp	r3, #32
 8008426:	dc49      	bgt.n	80084bc <UART_SetConfig+0x9d4>
 8008428:	2b00      	cmp	r3, #0
 800842a:	db7c      	blt.n	8008526 <UART_SetConfig+0xa3e>
 800842c:	2b20      	cmp	r3, #32
 800842e:	d87a      	bhi.n	8008526 <UART_SetConfig+0xa3e>
 8008430:	a201      	add	r2, pc, #4	; (adr r2, 8008438 <UART_SetConfig+0x950>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	080084c3 	.word	0x080084c3
 800843c:	080084cb 	.word	0x080084cb
 8008440:	08008527 	.word	0x08008527
 8008444:	08008527 	.word	0x08008527
 8008448:	080084d3 	.word	0x080084d3
 800844c:	08008527 	.word	0x08008527
 8008450:	08008527 	.word	0x08008527
 8008454:	08008527 	.word	0x08008527
 8008458:	080084e3 	.word	0x080084e3
 800845c:	08008527 	.word	0x08008527
 8008460:	08008527 	.word	0x08008527
 8008464:	08008527 	.word	0x08008527
 8008468:	08008527 	.word	0x08008527
 800846c:	08008527 	.word	0x08008527
 8008470:	08008527 	.word	0x08008527
 8008474:	08008527 	.word	0x08008527
 8008478:	080084f3 	.word	0x080084f3
 800847c:	08008527 	.word	0x08008527
 8008480:	08008527 	.word	0x08008527
 8008484:	08008527 	.word	0x08008527
 8008488:	08008527 	.word	0x08008527
 800848c:	08008527 	.word	0x08008527
 8008490:	08008527 	.word	0x08008527
 8008494:	08008527 	.word	0x08008527
 8008498:	08008527 	.word	0x08008527
 800849c:	08008527 	.word	0x08008527
 80084a0:	08008527 	.word	0x08008527
 80084a4:	08008527 	.word	0x08008527
 80084a8:	08008527 	.word	0x08008527
 80084ac:	08008527 	.word	0x08008527
 80084b0:	08008527 	.word	0x08008527
 80084b4:	08008527 	.word	0x08008527
 80084b8:	08008519 	.word	0x08008519
 80084bc:	2b40      	cmp	r3, #64	; 0x40
 80084be:	d02e      	beq.n	800851e <UART_SetConfig+0xa36>
 80084c0:	e031      	b.n	8008526 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c2:	f7fc fd97 	bl	8004ff4 <HAL_RCC_GetPCLK1Freq>
 80084c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084c8:	e033      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084ca:	f7fc fda9 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 80084ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80084d0:	e02f      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fd58 	bl	8006f8c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084e0:	e027      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e2:	f107 0318 	add.w	r3, r7, #24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fea4 	bl	8007234 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084f0:	e01f      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084f2:	4b2d      	ldr	r3, [pc, #180]	; (80085a8 <UART_SetConfig+0xac0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084fe:	4b2a      	ldr	r3, [pc, #168]	; (80085a8 <UART_SetConfig+0xac0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a28      	ldr	r2, [pc, #160]	; (80085ac <UART_SetConfig+0xac4>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008510:	e00f      	b.n	8008532 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008512:	4b26      	ldr	r3, [pc, #152]	; (80085ac <UART_SetConfig+0xac4>)
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008516:	e00c      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008518:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <UART_SetConfig+0xac8>)
 800851a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800851c:	e009      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800851e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008524:	e005      	b.n	8008532 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008530:	bf00      	nop
    }

    if (pclk != 0U)
 8008532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d021      	beq.n	800857c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853c:	4a1d      	ldr	r2, [pc, #116]	; (80085b4 <UART_SetConfig+0xacc>)
 800853e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008542:	461a      	mov	r2, r3
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	fbb3 f2f2 	udiv	r2, r3, r2
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	441a      	add	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d909      	bls.n	8008576 <UART_SetConfig+0xa8e>
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008568:	d205      	bcs.n	8008576 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	b29a      	uxth	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	e002      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008598:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800859c:	4618      	mov	r0, r3
 800859e:	3748      	adds	r7, #72	; 0x48
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
 80085ac:	03d09000 	.word	0x03d09000
 80085b0:	003d0900 	.word	0x003d0900
 80085b4:	0800bd50 	.word	0x0800bd50

080085b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c4:	f003 0301 	and.w	r3, r3, #1
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01a      	beq.n	80086ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086b6:	d10a      	bne.n	80086ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b098      	sub	sp, #96	; 0x60
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800870c:	f7f8 ff2a 	bl	8001564 <HAL_GetTick>
 8008710:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b08      	cmp	r3, #8
 800871e:	d12f      	bne.n	8008780 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f88e 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d022      	beq.n	8008780 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800874a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800874e:	653b      	str	r3, [r7, #80]	; 0x50
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008758:	647b      	str	r3, [r7, #68]	; 0x44
 800875a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800875e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e063      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d149      	bne.n	8008822 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008796:	2200      	movs	r2, #0
 8008798:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f857 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d03c      	beq.n	8008822 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087c6:	633b      	str	r3, [r7, #48]	; 0x30
 80087c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fa:	61fa      	str	r2, [r7, #28]
 80087fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	69b9      	ldr	r1, [r7, #24]
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	617b      	str	r3, [r7, #20]
   return(result);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e012      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3758      	adds	r7, #88	; 0x58
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e049      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d045      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7f8 fe7b 	bl	8001564 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e048      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d031      	beq.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	69db      	ldr	r3, [r3, #28]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d110      	bne.n	80088c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2208      	movs	r2, #8
 80088a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 f839 	bl	8008920 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2208      	movs	r2, #8
 80088b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e029      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088d0:	d111      	bne.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088dc:	68f8      	ldr	r0, [r7, #12]
 80088de:	f000 f81f 	bl	8008920 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e00f      	b.n	8008916 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	69da      	ldr	r2, [r3, #28]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	4013      	ands	r3, r2
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	429a      	cmp	r2, r3
 8008904:	bf0c      	ite	eq
 8008906:	2301      	moveq	r3, #1
 8008908:	2300      	movne	r3, #0
 800890a:	b2db      	uxtb	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	79fb      	ldrb	r3, [r7, #7]
 8008910:	429a      	cmp	r2, r3
 8008912:	d0a6      	beq.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b095      	sub	sp, #84	; 0x54
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800893c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008946:	643b      	str	r3, [r7, #64]	; 0x40
 8008948:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800894c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e6      	bne.n	8008928 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	61fb      	str	r3, [r7, #28]
   return(result);
 800896a:	69fa      	ldr	r2, [r7, #28]
 800896c:	4b1e      	ldr	r3, [pc, #120]	; (80089e8 <UART_EndRxTransfer+0xc8>)
 800896e:	4013      	ands	r3, r2
 8008970:	64bb      	str	r3, [r7, #72]	; 0x48
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800897a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800897c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008992:	2b01      	cmp	r3, #1
 8008994:	d118      	bne.n	80089c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	647b      	str	r3, [r7, #68]	; 0x44
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6979      	ldr	r1, [r7, #20]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2220      	movs	r2, #32
 80089cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2200      	movs	r2, #0
 80089d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80089dc:	bf00      	nop
 80089de:	3754      	adds	r7, #84	; 0x54
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	effffffe 	.word	0xeffffffe

080089ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b085      	sub	sp, #20
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d101      	bne.n	8008a02 <HAL_UARTEx_DisableFifoMode+0x16>
 80089fe:	2302      	movs	r3, #2
 8008a00:	e027      	b.n	8008a52 <HAL_UARTEx_DisableFifoMode+0x66>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2224      	movs	r2, #36	; 0x24
 8008a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681a      	ldr	r2, [r3, #0]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f022 0201 	bic.w	r2, r2, #1
 8008a28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68fa      	ldr	r2, [r7, #12]
 8008a3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d101      	bne.n	8008a76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a72:	2302      	movs	r3, #2
 8008a74:	e02d      	b.n	8008ad2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2224      	movs	r2, #36	; 0x24
 8008a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0201 	bic.w	r2, r2, #1
 8008a9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 f850 	bl	8008b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008aee:	2302      	movs	r3, #2
 8008af0:	e02d      	b.n	8008b4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2224      	movs	r2, #36	; 0x24
 8008afe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f022 0201 	bic.w	r2, r2, #1
 8008b18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 f812 	bl	8008b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2220      	movs	r2, #32
 8008b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d108      	bne.n	8008b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b78:	e031      	b.n	8008bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b7a:	2310      	movs	r3, #16
 8008b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b7e:	2310      	movs	r3, #16
 8008b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	0e5b      	lsrs	r3, r3, #25
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	f003 0307 	and.w	r3, r3, #7
 8008b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	0f5b      	lsrs	r3, r3, #29
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	f003 0307 	and.w	r3, r3, #7
 8008ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ba2:	7bbb      	ldrb	r3, [r7, #14]
 8008ba4:	7b3a      	ldrb	r2, [r7, #12]
 8008ba6:	4911      	ldr	r1, [pc, #68]	; (8008bec <UARTEx_SetNbDataToProcess+0x94>)
 8008ba8:	5c8a      	ldrb	r2, [r1, r2]
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bae:	7b3a      	ldrb	r2, [r7, #12]
 8008bb0:	490f      	ldr	r1, [pc, #60]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	7b7a      	ldrb	r2, [r7, #13]
 8008bc4:	4909      	ldr	r1, [pc, #36]	; (8008bec <UARTEx_SetNbDataToProcess+0x94>)
 8008bc6:	5c8a      	ldrb	r2, [r1, r2]
 8008bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bcc:	7b7a      	ldrb	r2, [r7, #13]
 8008bce:	4908      	ldr	r1, [pc, #32]	; (8008bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8008bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bde:	bf00      	nop
 8008be0:	3714      	adds	r7, #20
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	0800bd68 	.word	0x0800bd68
 8008bf0:	0800bd70 	.word	0x0800bd70

08008bf4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008bf4:	b084      	sub	sp, #16
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
 8008bfe:	f107 001c 	add.w	r0, r7, #28
 8008c02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d120      	bne.n	8008c4e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68da      	ldr	r2, [r3, #12]
 8008c1c:	4b2a      	ldr	r3, [pc, #168]	; (8008cc8 <USB_CoreInit+0xd4>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d105      	bne.n	8008c42 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68db      	ldr	r3, [r3, #12]
 8008c3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 faac 	bl	80091a0 <USB_CoreReset>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
 8008c4c:	e01a      	b.n	8008c84 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 faa0 	bl	80091a0 <USB_CoreReset>
 8008c60:	4603      	mov	r3, r0
 8008c62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	639a      	str	r2, [r3, #56]	; 0x38
 8008c76:	e005      	b.n	8008c84 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d116      	bne.n	8008cb8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <USB_CoreInit+0xd8>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f043 0206 	orr.w	r2, r3, #6
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	f043 0220 	orr.w	r2, r3, #32
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008cc4:	b004      	add	sp, #16
 8008cc6:	4770      	bx	lr
 8008cc8:	ffbdffbf 	.word	0xffbdffbf
 8008ccc:	03ee0000 	.word	0x03ee0000

08008cd0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f023 0201 	bic.w	r2, r3, #1
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008cf2:	b580      	push	{r7, lr}
 8008cf4:	b084      	sub	sp, #16
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d0e:	78fb      	ldrb	r3, [r7, #3]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d115      	bne.n	8008d40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d20:	2001      	movs	r0, #1
 8008d22:	f7f8 fc2b 	bl	800157c <HAL_Delay>
      ms++;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa29 	bl	8009184 <USB_GetMode>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d01e      	beq.n	8008d76 <USB_SetCurrentMode+0x84>
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b31      	cmp	r3, #49	; 0x31
 8008d3c:	d9f0      	bls.n	8008d20 <USB_SetCurrentMode+0x2e>
 8008d3e:	e01a      	b.n	8008d76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d115      	bne.n	8008d72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d52:	2001      	movs	r0, #1
 8008d54:	f7f8 fc12 	bl	800157c <HAL_Delay>
      ms++;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa10 	bl	8009184 <USB_GetMode>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d005      	beq.n	8008d76 <USB_SetCurrentMode+0x84>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b31      	cmp	r3, #49	; 0x31
 8008d6e:	d9f0      	bls.n	8008d52 <USB_SetCurrentMode+0x60>
 8008d70:	e001      	b.n	8008d76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e005      	b.n	8008d82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b32      	cmp	r3, #50	; 0x32
 8008d7a:	d101      	bne.n	8008d80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	e000      	b.n	8008d82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
 8008d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	613b      	str	r3, [r7, #16]
 8008daa:	e009      	b.n	8008dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	3340      	adds	r3, #64	; 0x40
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4413      	add	r3, r2
 8008db6:	2200      	movs	r2, #0
 8008db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	613b      	str	r3, [r7, #16]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	2b0e      	cmp	r3, #14
 8008dc4:	d9f2      	bls.n	8008dac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d11c      	bne.n	8008e06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dda:	f043 0302 	orr.w	r3, r3, #2
 8008dde:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e005      	b.n	8008e12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e18:	461a      	mov	r2, r3
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e24:	4619      	mov	r1, r3
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	680b      	ldr	r3, [r1, #0]
 8008e30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d10c      	bne.n	8008e52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d104      	bne.n	8008e48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f965 	bl	8009110 <USB_SetDevSpeed>
 8008e46:	e008      	b.n	8008e5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e48:	2101      	movs	r1, #1
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f960 	bl	8009110 <USB_SetDevSpeed>
 8008e50:	e003      	b.n	8008e5a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e52:	2103      	movs	r1, #3
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f95b 	bl	8009110 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e5a:	2110      	movs	r1, #16
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 f8f3 	bl	8009048 <USB_FlushTxFifo>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f91f 	bl	80090b0 <USB_FlushRxFifo>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e82:	461a      	mov	r2, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	461a      	mov	r2, r3
 8008e90:	2300      	movs	r3, #0
 8008e92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
 8008ea4:	e043      	b.n	8008f2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	015a      	lsls	r2, r3, #5
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4413      	add	r3, r2
 8008eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ebc:	d118      	bne.n	8008ef0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	e013      	b.n	8008f02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	e008      	b.n	8008f02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	015a      	lsls	r2, r3, #5
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efc:	461a      	mov	r2, r3
 8008efe:	2300      	movs	r3, #0
 8008f00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	015a      	lsls	r2, r3, #5
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4413      	add	r3, r2
 8008f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2300      	movs	r3, #0
 8008f12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f14:	693b      	ldr	r3, [r7, #16]
 8008f16:	015a      	lsls	r2, r3, #5
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	4413      	add	r3, r2
 8008f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f20:	461a      	mov	r2, r3
 8008f22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d3b7      	bcc.n	8008ea6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f36:	2300      	movs	r3, #0
 8008f38:	613b      	str	r3, [r7, #16]
 8008f3a:	e043      	b.n	8008fc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f52:	d118      	bne.n	8008f86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f66:	461a      	mov	r2, r3
 8008f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f6c:	6013      	str	r3, [r2, #0]
 8008f6e:	e013      	b.n	8008f98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	015a      	lsls	r2, r3, #5
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4413      	add	r3, r2
 8008f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f82:	6013      	str	r3, [r2, #0]
 8008f84:	e008      	b.n	8008f98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	015a      	lsls	r2, r3, #5
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f92:	461a      	mov	r2, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008fbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d3b7      	bcc.n	8008f3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	691b      	ldr	r3, [r3, #16]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008fec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d105      	bne.n	8009000 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	f043 0210 	orr.w	r2, r3, #16
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699a      	ldr	r2, [r3, #24]
 8009004:	4b0e      	ldr	r3, [pc, #56]	; (8009040 <USB_DevInit+0x2b4>)
 8009006:	4313      	orrs	r3, r2
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	2b00      	cmp	r3, #0
 8009010:	d005      	beq.n	800901e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f043 0208 	orr.w	r2, r3, #8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800901e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009020:	2b01      	cmp	r3, #1
 8009022:	d105      	bne.n	8009030 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	4b06      	ldr	r3, [pc, #24]	; (8009044 <USB_DevInit+0x2b8>)
 800902a:	4313      	orrs	r3, r2
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009030:	7dfb      	ldrb	r3, [r7, #23]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3718      	adds	r7, #24
 8009036:	46bd      	mov	sp, r7
 8009038:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800903c:	b004      	add	sp, #16
 800903e:	4770      	bx	lr
 8009040:	803c3800 	.word	0x803c3800
 8009044:	40000004 	.word	0x40000004

08009048 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009052:	2300      	movs	r3, #0
 8009054:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	3301      	adds	r3, #1
 800905a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	4a13      	ldr	r2, [pc, #76]	; (80090ac <USB_FlushTxFifo+0x64>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d901      	bls.n	8009068 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e01b      	b.n	80090a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	daf2      	bge.n	8009056 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009070:	2300      	movs	r3, #0
 8009072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	019b      	lsls	r3, r3, #6
 8009078:	f043 0220 	orr.w	r2, r3, #32
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3301      	adds	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4a08      	ldr	r2, [pc, #32]	; (80090ac <USB_FlushTxFifo+0x64>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d901      	bls.n	8009092 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e006      	b.n	80090a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b20      	cmp	r3, #32
 800909c:	d0f0      	beq.n	8009080 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	00030d40 	.word	0x00030d40

080090b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	3301      	adds	r3, #1
 80090c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4a11      	ldr	r2, [pc, #68]	; (800910c <USB_FlushRxFifo+0x5c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d901      	bls.n	80090ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e018      	b.n	8009100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	691b      	ldr	r3, [r3, #16]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	daf2      	bge.n	80090bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2210      	movs	r2, #16
 80090de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	4a08      	ldr	r2, [pc, #32]	; (800910c <USB_FlushRxFifo+0x5c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d901      	bls.n	80090f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e006      	b.n	8009100 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	f003 0310 	and.w	r3, r3, #16
 80090fa:	2b10      	cmp	r3, #16
 80090fc:	d0f0      	beq.n	80090e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80090fe:	2300      	movs	r3, #0
}
 8009100:	4618      	mov	r0, r3
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr
 800910c:	00030d40 	.word	0x00030d40

08009110 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	78fb      	ldrb	r3, [r7, #3]
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009130:	4313      	orrs	r3, r2
 8009132:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800915c:	f023 0303 	bic.w	r3, r3, #3
 8009160:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009176:	2300      	movs	r3, #0
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009184:	b480      	push	{r7}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	f003 0301 	and.w	r3, r3, #1
}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091a8:	2300      	movs	r3, #0
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	3301      	adds	r3, #1
 80091b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4a13      	ldr	r2, [pc, #76]	; (8009204 <USB_CoreReset+0x64>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d901      	bls.n	80091be <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e01b      	b.n	80091f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	daf2      	bge.n	80091ac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	691b      	ldr	r3, [r3, #16]
 80091ce:	f043 0201 	orr.w	r2, r3, #1
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	3301      	adds	r3, #1
 80091da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	4a09      	ldr	r2, [pc, #36]	; (8009204 <USB_CoreReset+0x64>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d901      	bls.n	80091e8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e006      	b.n	80091f6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d0f0      	beq.n	80091d6 <USB_CoreReset+0x36>

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr
 8009202:	bf00      	nop
 8009204:	00030d40 	.word	0x00030d40

08009208 <__NVIC_SetPriority>:
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	4603      	mov	r3, r0
 8009210:	6039      	str	r1, [r7, #0]
 8009212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009218:	2b00      	cmp	r3, #0
 800921a:	db0a      	blt.n	8009232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	b2da      	uxtb	r2, r3
 8009220:	490c      	ldr	r1, [pc, #48]	; (8009254 <__NVIC_SetPriority+0x4c>)
 8009222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009226:	0112      	lsls	r2, r2, #4
 8009228:	b2d2      	uxtb	r2, r2
 800922a:	440b      	add	r3, r1
 800922c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009230:	e00a      	b.n	8009248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	b2da      	uxtb	r2, r3
 8009236:	4908      	ldr	r1, [pc, #32]	; (8009258 <__NVIC_SetPriority+0x50>)
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	3b04      	subs	r3, #4
 8009240:	0112      	lsls	r2, r2, #4
 8009242:	b2d2      	uxtb	r2, r2
 8009244:	440b      	add	r3, r1
 8009246:	761a      	strb	r2, [r3, #24]
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	e000e100 	.word	0xe000e100
 8009258:	e000ed00 	.word	0xe000ed00

0800925c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009260:	2100      	movs	r1, #0
 8009262:	f06f 0004 	mvn.w	r0, #4
 8009266:	f7ff ffcf 	bl	8009208 <__NVIC_SetPriority>
#endif
}
 800926a:	bf00      	nop
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009276:	f3ef 8305 	mrs	r3, IPSR
 800927a:	603b      	str	r3, [r7, #0]
  return(result);
 800927c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927e:	2b00      	cmp	r3, #0
 8009280:	d003      	beq.n	800928a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009282:	f06f 0305 	mvn.w	r3, #5
 8009286:	607b      	str	r3, [r7, #4]
 8009288:	e00c      	b.n	80092a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800928a:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <osKernelInitialize+0x44>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d105      	bne.n	800929e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009292:	4b08      	ldr	r3, [pc, #32]	; (80092b4 <osKernelInitialize+0x44>)
 8009294:	2201      	movs	r2, #1
 8009296:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009298:	2300      	movs	r3, #0
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	e002      	b.n	80092a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800929e:	f04f 33ff 	mov.w	r3, #4294967295
 80092a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092a4:	687b      	ldr	r3, [r7, #4]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	240007f4 	.word	0x240007f4

080092b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092be:	f3ef 8305 	mrs	r3, IPSR
 80092c2:	603b      	str	r3, [r7, #0]
  return(result);
 80092c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80092ca:	f06f 0305 	mvn.w	r3, #5
 80092ce:	607b      	str	r3, [r7, #4]
 80092d0:	e010      	b.n	80092f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092d2:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <osKernelStart+0x48>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d109      	bne.n	80092ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092da:	f7ff ffbf 	bl	800925c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092de:	4b08      	ldr	r3, [pc, #32]	; (8009300 <osKernelStart+0x48>)
 80092e0:	2202      	movs	r2, #2
 80092e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092e4:	f001 f816 	bl	800a314 <vTaskStartScheduler>
      stat = osOK;
 80092e8:	2300      	movs	r3, #0
 80092ea:	607b      	str	r3, [r7, #4]
 80092ec:	e002      	b.n	80092f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092ee:	f04f 33ff 	mov.w	r3, #4294967295
 80092f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092f4:	687b      	ldr	r3, [r7, #4]
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	240007f4 	.word	0x240007f4

08009304 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009304:	b580      	push	{r7, lr}
 8009306:	b08e      	sub	sp, #56	; 0x38
 8009308:	af04      	add	r7, sp, #16
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009310:	2300      	movs	r3, #0
 8009312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009314:	f3ef 8305 	mrs	r3, IPSR
 8009318:	617b      	str	r3, [r7, #20]
  return(result);
 800931a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800931c:	2b00      	cmp	r3, #0
 800931e:	d17e      	bne.n	800941e <osThreadNew+0x11a>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d07b      	beq.n	800941e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009326:	2380      	movs	r3, #128	; 0x80
 8009328:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800932a:	2318      	movs	r3, #24
 800932c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800932e:	2300      	movs	r3, #0
 8009330:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009332:	f04f 33ff 	mov.w	r3, #4294967295
 8009336:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d045      	beq.n	80093ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d002      	beq.n	800934c <osThreadNew+0x48>
        name = attr->name;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699b      	ldr	r3, [r3, #24]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	699b      	ldr	r3, [r3, #24]
 8009358:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d008      	beq.n	8009372 <osThreadNew+0x6e>
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	2b38      	cmp	r3, #56	; 0x38
 8009364:	d805      	bhi.n	8009372 <osThreadNew+0x6e>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <osThreadNew+0x72>
        return (NULL);
 8009372:	2300      	movs	r3, #0
 8009374:	e054      	b.n	8009420 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	089b      	lsrs	r3, r3, #2
 8009384:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d00e      	beq.n	80093ac <osThreadNew+0xa8>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	2b5b      	cmp	r3, #91	; 0x5b
 8009394:	d90a      	bls.n	80093ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800939a:	2b00      	cmp	r3, #0
 800939c:	d006      	beq.n	80093ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d002      	beq.n	80093ac <osThreadNew+0xa8>
        mem = 1;
 80093a6:	2301      	movs	r3, #1
 80093a8:	61bb      	str	r3, [r7, #24]
 80093aa:	e010      	b.n	80093ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10c      	bne.n	80093ce <osThreadNew+0xca>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d108      	bne.n	80093ce <osThreadNew+0xca>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	691b      	ldr	r3, [r3, #16]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d104      	bne.n	80093ce <osThreadNew+0xca>
          mem = 0;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61bb      	str	r3, [r7, #24]
 80093c8:	e001      	b.n	80093ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093ca:	2300      	movs	r3, #0
 80093cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d110      	bne.n	80093f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093dc:	9202      	str	r2, [sp, #8]
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	69fb      	ldr	r3, [r7, #28]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	6a3a      	ldr	r2, [r7, #32]
 80093e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fdf0 	bl	8009fd0 <xTaskCreateStatic>
 80093f0:	4603      	mov	r3, r0
 80093f2:	613b      	str	r3, [r7, #16]
 80093f4:	e013      	b.n	800941e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d110      	bne.n	800941e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093fc:	6a3b      	ldr	r3, [r7, #32]
 80093fe:	b29a      	uxth	r2, r3
 8009400:	f107 0310 	add.w	r3, r7, #16
 8009404:	9301      	str	r3, [sp, #4]
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fe3b 	bl	800a08a <xTaskCreate>
 8009414:	4603      	mov	r3, r0
 8009416:	2b01      	cmp	r3, #1
 8009418:	d001      	beq.n	800941e <osThreadNew+0x11a>
            hTask = NULL;
 800941a:	2300      	movs	r3, #0
 800941c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800941e:	693b      	ldr	r3, [r7, #16]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3728      	adds	r7, #40	; 0x28
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a07      	ldr	r2, [pc, #28]	; (8009454 <vApplicationGetIdleTaskMemory+0x2c>)
 8009438:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	4a06      	ldr	r2, [pc, #24]	; (8009458 <vApplicationGetIdleTaskMemory+0x30>)
 800943e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2280      	movs	r2, #128	; 0x80
 8009444:	601a      	str	r2, [r3, #0]
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	240007f8 	.word	0x240007f8
 8009458:	24000854 	.word	0x24000854

0800945c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4a07      	ldr	r2, [pc, #28]	; (8009488 <vApplicationGetTimerTaskMemory+0x2c>)
 800946c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4a06      	ldr	r2, [pc, #24]	; (800948c <vApplicationGetTimerTaskMemory+0x30>)
 8009472:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800947a:	601a      	str	r2, [r3, #0]
}
 800947c:	bf00      	nop
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	24000a54 	.word	0x24000a54
 800948c:	24000ab0 	.word	0x24000ab0

08009490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f103 0208 	add.w	r2, r3, #8
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f103 0208 	add.w	r2, r3, #8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f103 0208 	add.w	r2, r3, #8
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e8:	4770      	bx	lr

080094ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094ea:	b480      	push	{r7}
 80094ec:	b085      	sub	sp, #20
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
 80094f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	689a      	ldr	r2, [r3, #8]
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	683a      	ldr	r2, [r7, #0]
 800950e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009532:	b480      	push	{r7}
 8009534:	b085      	sub	sp, #20
 8009536:	af00      	add	r7, sp, #0
 8009538:	6078      	str	r0, [r7, #4]
 800953a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009548:	d103      	bne.n	8009552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	691b      	ldr	r3, [r3, #16]
 800954e:	60fb      	str	r3, [r7, #12]
 8009550:	e00c      	b.n	800956c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3308      	adds	r3, #8
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e002      	b.n	8009560 <vListInsert+0x2e>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68ba      	ldr	r2, [r7, #8]
 8009568:	429a      	cmp	r2, r3
 800956a:	d2f6      	bcs.n	800955a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	683a      	ldr	r2, [r7, #0]
 8009586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	601a      	str	r2, [r3, #0]
}
 8009598:	bf00      	nop
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80095a4:	b480      	push	{r7}
 80095a6:	b085      	sub	sp, #20
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	6892      	ldr	r2, [r2, #8]
 80095ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	6852      	ldr	r2, [r2, #4]
 80095c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d103      	bne.n	80095d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1e5a      	subs	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3714      	adds	r7, #20
 80095f0:	46bd      	mov	sp, r7
 80095f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f6:	4770      	bx	lr

080095f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
 8009600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d10a      	bne.n	8009622 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800960c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009610:	f383 8811 	msr	BASEPRI, r3
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	f3bf 8f4f 	dsb	sy
 800961c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800961e:	bf00      	nop
 8009620:	e7fe      	b.n	8009620 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009622:	f002 f817 	bl	800b654 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	441a      	add	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2200      	movs	r2, #0
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009652:	3b01      	subs	r3, #1
 8009654:	68f9      	ldr	r1, [r7, #12]
 8009656:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009658:	fb01 f303 	mul.w	r3, r1, r3
 800965c:	441a      	add	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	22ff      	movs	r2, #255	; 0xff
 8009666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d114      	bne.n	80096a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d01a      	beq.n	80096b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3310      	adds	r3, #16
 8009684:	4618      	mov	r0, r3
 8009686:	f001 f8cf 	bl	800a828 <xTaskRemoveFromEventList>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d012      	beq.n	80096b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009690:	4b0c      	ldr	r3, [pc, #48]	; (80096c4 <xQueueGenericReset+0xcc>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	e009      	b.n	80096b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3310      	adds	r3, #16
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fef2 	bl	8009490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff feed 	bl	8009490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80096b6:	f001 fffd 	bl	800b6b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80096ba:	2301      	movs	r3, #1
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3710      	adds	r7, #16
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed04 	.word	0xe000ed04

080096c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	627b      	str	r3, [r7, #36]	; 0x24
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <xQueueGenericCreateStatic+0x52>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <xQueueGenericCreateStatic+0x56>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueGenericCreateStatic+0x58>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	623b      	str	r3, [r7, #32]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d102      	bne.n	8009746 <xQueueGenericCreateStatic+0x7e>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <xQueueGenericCreateStatic+0x82>
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <xQueueGenericCreateStatic+0x84>
 800974a:	2300      	movs	r3, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10a      	bne.n	8009766 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	61fb      	str	r3, [r7, #28]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009766:	2350      	movs	r3, #80	; 0x50
 8009768:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b50      	cmp	r3, #80	; 0x50
 800976e:	d00a      	beq.n	8009786 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	61bb      	str	r3, [r7, #24]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009786:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800978c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00d      	beq.n	80097ae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800979a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	4613      	mov	r3, r2
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	68b9      	ldr	r1, [r7, #8]
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f805 	bl	80097b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80097ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3730      	adds	r7, #48	; 0x30
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	60f8      	str	r0, [r7, #12]
 80097c0:	60b9      	str	r1, [r7, #8]
 80097c2:	607a      	str	r2, [r7, #4]
 80097c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d103      	bne.n	80097d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	69ba      	ldr	r2, [r7, #24]
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	e002      	b.n	80097da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80097d4:	69bb      	ldr	r3, [r7, #24]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097e6:	2101      	movs	r1, #1
 80097e8:	69b8      	ldr	r0, [r7, #24]
 80097ea:	f7ff ff05 	bl	80095f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097ee:	69bb      	ldr	r3, [r7, #24]
 80097f0:	78fa      	ldrb	r2, [r7, #3]
 80097f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097f6:	bf00      	nop
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
	...

08009800 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b08e      	sub	sp, #56	; 0x38
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	607a      	str	r2, [r7, #4]
 800980c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800980e:	2300      	movs	r3, #0
 8009810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009818:	2b00      	cmp	r3, #0
 800981a:	d10a      	bne.n	8009832 <xQueueGenericSend+0x32>
	__asm volatile
 800981c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009820:	f383 8811 	msr	BASEPRI, r3
 8009824:	f3bf 8f6f 	isb	sy
 8009828:	f3bf 8f4f 	dsb	sy
 800982c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800982e:	bf00      	nop
 8009830:	e7fe      	b.n	8009830 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d103      	bne.n	8009840 <xQueueGenericSend+0x40>
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983c:	2b00      	cmp	r3, #0
 800983e:	d101      	bne.n	8009844 <xQueueGenericSend+0x44>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <xQueueGenericSend+0x46>
 8009844:	2300      	movs	r3, #0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10a      	bne.n	8009860 <xQueueGenericSend+0x60>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b02      	cmp	r3, #2
 8009864:	d103      	bne.n	800986e <xQueueGenericSend+0x6e>
 8009866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986a:	2b01      	cmp	r3, #1
 800986c:	d101      	bne.n	8009872 <xQueueGenericSend+0x72>
 800986e:	2301      	movs	r3, #1
 8009870:	e000      	b.n	8009874 <xQueueGenericSend+0x74>
 8009872:	2300      	movs	r3, #0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10a      	bne.n	800988e <xQueueGenericSend+0x8e>
	__asm volatile
 8009878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987c:	f383 8811 	msr	BASEPRI, r3
 8009880:	f3bf 8f6f 	isb	sy
 8009884:	f3bf 8f4f 	dsb	sy
 8009888:	623b      	str	r3, [r7, #32]
}
 800988a:	bf00      	nop
 800988c:	e7fe      	b.n	800988c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800988e:	f001 f989 	bl	800aba4 <xTaskGetSchedulerState>
 8009892:	4603      	mov	r3, r0
 8009894:	2b00      	cmp	r3, #0
 8009896:	d102      	bne.n	800989e <xQueueGenericSend+0x9e>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueGenericSend+0xa2>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueGenericSend+0xa4>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueGenericSend+0xbe>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	61fb      	str	r3, [r7, #28]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098be:	f001 fec9 	bl	800b654 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d302      	bcc.n	80098d4 <xQueueGenericSend+0xd4>
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b02      	cmp	r3, #2
 80098d2:	d129      	bne.n	8009928 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098da:	f000 fa0b 	bl	8009cf4 <prvCopyDataToQueue>
 80098de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d010      	beq.n	800990a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	3324      	adds	r3, #36	; 0x24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f000 ff9b 	bl	800a828 <xTaskRemoveFromEventList>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d013      	beq.n	8009920 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098f8:	4b3f      	ldr	r3, [pc, #252]	; (80099f8 <xQueueGenericSend+0x1f8>)
 80098fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fe:	601a      	str	r2, [r3, #0]
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	e00a      	b.n	8009920 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800990a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009910:	4b39      	ldr	r3, [pc, #228]	; (80099f8 <xQueueGenericSend+0x1f8>)
 8009912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009920:	f001 fec8 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009924:	2301      	movs	r3, #1
 8009926:	e063      	b.n	80099f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d103      	bne.n	8009936 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800992e:	f001 fec1 	bl	800b6b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009932:	2300      	movs	r3, #0
 8009934:	e05c      	b.n	80099f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009938:	2b00      	cmp	r3, #0
 800993a:	d106      	bne.n	800994a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800993c:	f107 0314 	add.w	r3, r7, #20
 8009940:	4618      	mov	r0, r3
 8009942:	f000 ffd5 	bl	800a8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009946:	2301      	movs	r3, #1
 8009948:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800994a:	f001 feb3 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800994e:	f000 fd47 	bl	800a3e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009952:	f001 fe7f 	bl	800b654 <vPortEnterCritical>
 8009956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009958:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800995c:	b25b      	sxtb	r3, r3
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d103      	bne.n	800996c <xQueueGenericSend+0x16c>
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009972:	b25b      	sxtb	r3, r3
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009978:	d103      	bne.n	8009982 <xQueueGenericSend+0x182>
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	2200      	movs	r2, #0
 800997e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009982:	f001 fe97 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009986:	1d3a      	adds	r2, r7, #4
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f000 ffc4 	bl	800a91c <xTaskCheckForTimeOut>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d124      	bne.n	80099e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800999a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800999c:	f000 faa2 	bl	8009ee4 <prvIsQueueFull>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d018      	beq.n	80099d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	3310      	adds	r3, #16
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 feea 	bl	800a788 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099b6:	f000 fa2d 	bl	8009e14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80099ba:	f000 fd1f 	bl	800a3fc <xTaskResumeAll>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f47f af7c 	bne.w	80098be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80099c6:	4b0c      	ldr	r3, [pc, #48]	; (80099f8 <xQueueGenericSend+0x1f8>)
 80099c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099cc:	601a      	str	r2, [r3, #0]
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	e772      	b.n	80098be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099da:	f000 fa1b 	bl	8009e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099de:	f000 fd0d 	bl	800a3fc <xTaskResumeAll>
 80099e2:	e76c      	b.n	80098be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099e6:	f000 fa15 	bl	8009e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ea:	f000 fd07 	bl	800a3fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3738      	adds	r7, #56	; 0x38
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	e000ed04 	.word	0xe000ed04

080099fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b090      	sub	sp, #64	; 0x40
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	60f8      	str	r0, [r7, #12]
 8009a04:	60b9      	str	r1, [r7, #8]
 8009a06:	607a      	str	r2, [r7, #4]
 8009a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d103      	bne.n	8009a38 <xQueueGenericSendFromISR+0x3c>
 8009a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <xQueueGenericSendFromISR+0x40>
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <xQueueGenericSendFromISR+0x42>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d10a      	bne.n	8009a58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	d103      	bne.n	8009a66 <xQueueGenericSendFromISR+0x6a>
 8009a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d101      	bne.n	8009a6a <xQueueGenericSendFromISR+0x6e>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e000      	b.n	8009a6c <xQueueGenericSendFromISR+0x70>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	623b      	str	r3, [r7, #32]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a86:	f001 fec7 	bl	800b818 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a8a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	61fa      	str	r2, [r7, #28]
 8009aa0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d302      	bcc.n	8009ab8 <xQueueGenericSendFromISR+0xbc>
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	2b02      	cmp	r3, #2
 8009ab6:	d12f      	bne.n	8009b18 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ac8:	683a      	ldr	r2, [r7, #0]
 8009aca:	68b9      	ldr	r1, [r7, #8]
 8009acc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ace:	f000 f911 	bl	8009cf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ad2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ada:	d112      	bne.n	8009b02 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d016      	beq.n	8009b12 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	3324      	adds	r3, #36	; 0x24
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f000 fe9d 	bl	800a828 <xTaskRemoveFromEventList>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00e      	beq.n	8009b12 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d00b      	beq.n	8009b12 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	601a      	str	r2, [r3, #0]
 8009b00:	e007      	b.n	8009b12 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b06:	3301      	adds	r3, #1
 8009b08:	b2db      	uxtb	r3, r3
 8009b0a:	b25a      	sxtb	r2, r3
 8009b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b12:	2301      	movs	r3, #1
 8009b14:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b16:	e001      	b.n	8009b1c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b1e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3740      	adds	r7, #64	; 0x40
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
	...

08009b34 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b08c      	sub	sp, #48	; 0x30
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b40:	2300      	movs	r3, #0
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10a      	bne.n	8009b64 <xQueueReceive+0x30>
	__asm volatile
 8009b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b52:	f383 8811 	msr	BASEPRI, r3
 8009b56:	f3bf 8f6f 	isb	sy
 8009b5a:	f3bf 8f4f 	dsb	sy
 8009b5e:	623b      	str	r3, [r7, #32]
}
 8009b60:	bf00      	nop
 8009b62:	e7fe      	b.n	8009b62 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d103      	bne.n	8009b72 <xQueueReceive+0x3e>
 8009b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <xQueueReceive+0x42>
 8009b72:	2301      	movs	r3, #1
 8009b74:	e000      	b.n	8009b78 <xQueueReceive+0x44>
 8009b76:	2300      	movs	r3, #0
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <xQueueReceive+0x5e>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	61fb      	str	r3, [r7, #28]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b92:	f001 f807 	bl	800aba4 <xTaskGetSchedulerState>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d102      	bne.n	8009ba2 <xQueueReceive+0x6e>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <xQueueReceive+0x72>
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e000      	b.n	8009ba8 <xQueueReceive+0x74>
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10a      	bne.n	8009bc2 <xQueueReceive+0x8e>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	61bb      	str	r3, [r7, #24]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bc2:	f001 fd47 	bl	800b654 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d01f      	beq.n	8009c12 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bd2:	68b9      	ldr	r1, [r7, #8]
 8009bd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd6:	f000 f8f7 	bl	8009dc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	1e5a      	subs	r2, r3, #1
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	691b      	ldr	r3, [r3, #16]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00f      	beq.n	8009c0a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bec:	3310      	adds	r3, #16
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f000 fe1a 	bl	800a828 <xTaskRemoveFromEventList>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d007      	beq.n	8009c0a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bfa:	4b3d      	ldr	r3, [pc, #244]	; (8009cf0 <xQueueReceive+0x1bc>)
 8009bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c00:	601a      	str	r2, [r3, #0]
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c0a:	f001 fd53 	bl	800b6b4 <vPortExitCritical>
				return pdPASS;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e069      	b.n	8009ce6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d103      	bne.n	8009c20 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c18:	f001 fd4c 	bl	800b6b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e062      	b.n	8009ce6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d106      	bne.n	8009c34 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c26:	f107 0310 	add.w	r3, r7, #16
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 fe60 	bl	800a8f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c30:	2301      	movs	r3, #1
 8009c32:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c34:	f001 fd3e 	bl	800b6b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c38:	f000 fbd2 	bl	800a3e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c3c:	f001 fd0a 	bl	800b654 <vPortEnterCritical>
 8009c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c46:	b25b      	sxtb	r3, r3
 8009c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4c:	d103      	bne.n	8009c56 <xQueueReceive+0x122>
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c5c:	b25b      	sxtb	r3, r3
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d103      	bne.n	8009c6c <xQueueReceive+0x138>
 8009c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c6c:	f001 fd22 	bl	800b6b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c70:	1d3a      	adds	r2, r7, #4
 8009c72:	f107 0310 	add.w	r3, r7, #16
 8009c76:	4611      	mov	r1, r2
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f000 fe4f 	bl	800a91c <xTaskCheckForTimeOut>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d123      	bne.n	8009ccc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c86:	f000 f917 	bl	8009eb8 <prvIsQueueEmpty>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d017      	beq.n	8009cc0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c92:	3324      	adds	r3, #36	; 0x24
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	4611      	mov	r1, r2
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fd75 	bl	800a788 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca0:	f000 f8b8 	bl	8009e14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ca4:	f000 fbaa 	bl	800a3fc <xTaskResumeAll>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d189      	bne.n	8009bc2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009cae:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <xQueueReceive+0x1bc>)
 8009cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	e780      	b.n	8009bc2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f000 f8a7 	bl	8009e14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cc6:	f000 fb99 	bl	800a3fc <xTaskResumeAll>
 8009cca:	e77a      	b.n	8009bc2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cce:	f000 f8a1 	bl	8009e14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cd2:	f000 fb93 	bl	800a3fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd8:	f000 f8ee 	bl	8009eb8 <prvIsQueueEmpty>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f43f af6f 	beq.w	8009bc2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ce4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3730      	adds	r7, #48	; 0x30
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b086      	sub	sp, #24
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10d      	bne.n	8009d2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d14d      	bne.n	8009db6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 ff5e 	bl	800abe0 <xTaskPriorityDisinherit>
 8009d24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	609a      	str	r2, [r3, #8]
 8009d2c:	e043      	b.n	8009db6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d119      	bne.n	8009d68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6858      	ldr	r0, [r3, #4]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	f001 ffc0 	bl	800bcc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	441a      	add	r2, r3
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d32b      	bcc.n	8009db6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	605a      	str	r2, [r3, #4]
 8009d66:	e026      	b.n	8009db6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	68d8      	ldr	r0, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d70:	461a      	mov	r2, r3
 8009d72:	68b9      	ldr	r1, [r7, #8]
 8009d74:	f001 ffa6 	bl	800bcc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	68da      	ldr	r2, [r3, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d80:	425b      	negs	r3, r3
 8009d82:	441a      	add	r2, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	68da      	ldr	r2, [r3, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d207      	bcs.n	8009da4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9c:	425b      	negs	r3, r3
 8009d9e:	441a      	add	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b02      	cmp	r3, #2
 8009da8:	d105      	bne.n	8009db6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	3b01      	subs	r3, #1
 8009db4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	1c5a      	adds	r2, r3, #1
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009dbe:	697b      	ldr	r3, [r7, #20]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d018      	beq.n	8009e0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	68da      	ldr	r2, [r3, #12]
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	441a      	add	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	68da      	ldr	r2, [r3, #12]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d303      	bcc.n	8009dfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68d9      	ldr	r1, [r3, #12]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e04:	461a      	mov	r2, r3
 8009e06:	6838      	ldr	r0, [r7, #0]
 8009e08:	f001 ff5c 	bl	800bcc4 <memcpy>
	}
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e1c:	f001 fc1a 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e28:	e011      	b.n	8009e4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d012      	beq.n	8009e58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3324      	adds	r3, #36	; 0x24
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 fcf6 	bl	800a828 <xTaskRemoveFromEventList>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d001      	beq.n	8009e46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e42:	f000 fdcd 	bl	800a9e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	b2db      	uxtb	r3, r3
 8009e4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	dce9      	bgt.n	8009e2a <prvUnlockQueue+0x16>
 8009e56:	e000      	b.n	8009e5a <prvUnlockQueue+0x46>
					break;
 8009e58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	22ff      	movs	r2, #255	; 0xff
 8009e5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e62:	f001 fc27 	bl	800b6b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e66:	f001 fbf5 	bl	800b654 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e72:	e011      	b.n	8009e98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d012      	beq.n	8009ea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3310      	adds	r3, #16
 8009e80:	4618      	mov	r0, r3
 8009e82:	f000 fcd1 	bl	800a828 <xTaskRemoveFromEventList>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d001      	beq.n	8009e90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e8c:	f000 fda8 	bl	800a9e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e90:	7bbb      	ldrb	r3, [r7, #14]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	dce9      	bgt.n	8009e74 <prvUnlockQueue+0x60>
 8009ea0:	e000      	b.n	8009ea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	22ff      	movs	r2, #255	; 0xff
 8009ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009eac:	f001 fc02 	bl	800b6b4 <vPortExitCritical>
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b084      	sub	sp, #16
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec0:	f001 fbc8 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e001      	b.n	8009ed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ed6:	f001 fbed 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009eda:	68fb      	ldr	r3, [r7, #12]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eec:	f001 fbb2 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d102      	bne.n	8009f02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009efc:	2301      	movs	r3, #1
 8009efe:	60fb      	str	r3, [r7, #12]
 8009f00:	e001      	b.n	8009f06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f06:	f001 fbd5 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f1e:	2300      	movs	r3, #0
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e014      	b.n	8009f4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f24:	4a0f      	ldr	r2, [pc, #60]	; (8009f64 <vQueueAddToRegistry+0x50>)
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f30:	490c      	ldr	r1, [pc, #48]	; (8009f64 <vQueueAddToRegistry+0x50>)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <vQueueAddToRegistry+0x50>)
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	4413      	add	r3, r2
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f46:	e006      	b.n	8009f56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b07      	cmp	r3, #7
 8009f52:	d9e7      	bls.n	8009f24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	24000eb0 	.word	0x24000eb0

08009f68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	60b9      	str	r1, [r7, #8]
 8009f72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f78:	f001 fb6c 	bl	800b654 <vPortEnterCritical>
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f82:	b25b      	sxtb	r3, r3
 8009f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f88:	d103      	bne.n	8009f92 <vQueueWaitForMessageRestricted+0x2a>
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f98:	b25b      	sxtb	r3, r3
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9e:	d103      	bne.n	8009fa8 <vQueueWaitForMessageRestricted+0x40>
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fa8:	f001 fb84 	bl	800b6b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d106      	bne.n	8009fc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fb4:	697b      	ldr	r3, [r7, #20]
 8009fb6:	3324      	adds	r3, #36	; 0x24
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fc07 	bl	800a7d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009fc2:	6978      	ldr	r0, [r7, #20]
 8009fc4:	f7ff ff26 	bl	8009e14 <prvUnlockQueue>
	}
 8009fc8:	bf00      	nop
 8009fca:	3718      	adds	r7, #24
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af04      	add	r7, sp, #16
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	623b      	str	r3, [r7, #32]
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <xTaskCreateStatic+0x46>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	61fb      	str	r3, [r7, #28]
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a016:	235c      	movs	r3, #92	; 0x5c
 800a018:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b5c      	cmp	r3, #92	; 0x5c
 800a01e:	d00a      	beq.n	800a036 <xTaskCreateStatic+0x66>
	__asm volatile
 800a020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a024:	f383 8811 	msr	BASEPRI, r3
 800a028:	f3bf 8f6f 	isb	sy
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	61bb      	str	r3, [r7, #24]
}
 800a032:	bf00      	nop
 800a034:	e7fe      	b.n	800a034 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a036:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d01e      	beq.n	800a07c <xTaskCreateStatic+0xac>
 800a03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01b      	beq.n	800a07c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a04c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a050:	2202      	movs	r2, #2
 800a052:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a056:	2300      	movs	r3, #0
 800a058:	9303      	str	r3, [sp, #12]
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	9302      	str	r3, [sp, #8]
 800a05e:	f107 0314 	add.w	r3, r7, #20
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a066:	9300      	str	r3, [sp, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 f850 	bl	800a114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a074:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a076:	f000 f8dd 	bl	800a234 <prvAddNewTaskToReadyList>
 800a07a:	e001      	b.n	800a080 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a080:	697b      	ldr	r3, [r7, #20]
	}
 800a082:	4618      	mov	r0, r3
 800a084:	3728      	adds	r7, #40	; 0x28
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b08c      	sub	sp, #48	; 0x30
 800a08e:	af04      	add	r7, sp, #16
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	603b      	str	r3, [r7, #0]
 800a096:	4613      	mov	r3, r2
 800a098:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a09a:	88fb      	ldrh	r3, [r7, #6]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 fbfa 	bl	800b898 <pvPortMalloc>
 800a0a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00e      	beq.n	800a0ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a0ac:	205c      	movs	r0, #92	; 0x5c
 800a0ae:	f001 fbf3 	bl	800b898 <pvPortMalloc>
 800a0b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	631a      	str	r2, [r3, #48]	; 0x30
 800a0c0:	e005      	b.n	800a0ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f001 fcb4 	bl	800ba30 <vPortFree>
 800a0c8:	e001      	b.n	800a0ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d017      	beq.n	800a104 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0dc:	88fa      	ldrh	r2, [r7, #6]
 800a0de:	2300      	movs	r3, #0
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	68b9      	ldr	r1, [r7, #8]
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 f80e 	bl	800a114 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0f8:	69f8      	ldr	r0, [r7, #28]
 800a0fa:	f000 f89b 	bl	800a234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0fe:	2301      	movs	r3, #1
 800a100:	61bb      	str	r3, [r7, #24]
 800a102:	e002      	b.n	800a10a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a104:	f04f 33ff 	mov.w	r3, #4294967295
 800a108:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a10a:	69bb      	ldr	r3, [r7, #24]
	}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3720      	adds	r7, #32
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	461a      	mov	r2, r3
 800a12c:	21a5      	movs	r1, #165	; 0xa5
 800a12e:	f001 fd9d 	bl	800bc6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a136:	6879      	ldr	r1, [r7, #4]
 800a138:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a13c:	440b      	add	r3, r1
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	4413      	add	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	f023 0307 	bic.w	r3, r3, #7
 800a14a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a14c:	69bb      	ldr	r3, [r7, #24]
 800a14e:	f003 0307 	and.w	r3, r3, #7
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	617b      	str	r3, [r7, #20]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d01f      	beq.n	800a1b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a172:	2300      	movs	r3, #0
 800a174:	61fb      	str	r3, [r7, #28]
 800a176:	e012      	b.n	800a19e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a178:	68ba      	ldr	r2, [r7, #8]
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	7819      	ldrb	r1, [r3, #0]
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	4413      	add	r3, r2
 800a186:	3334      	adds	r3, #52	; 0x34
 800a188:	460a      	mov	r2, r1
 800a18a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a18c:	68ba      	ldr	r2, [r7, #8]
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d006      	beq.n	800a1a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	3301      	adds	r3, #1
 800a19c:	61fb      	str	r3, [r7, #28]
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	2b0f      	cmp	r3, #15
 800a1a2:	d9e9      	bls.n	800a178 <prvInitialiseNewTask+0x64>
 800a1a4:	e000      	b.n	800a1a8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a1a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1b0:	e003      	b.n	800a1ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1bc:	2b37      	cmp	r3, #55	; 0x37
 800a1be:	d901      	bls.n	800a1c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1c0:	2337      	movs	r3, #55	; 0x37
 800a1c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d8:	3304      	adds	r3, #4
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff f978 	bl	80094d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e2:	3318      	adds	r3, #24
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7ff f973 	bl	80094d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	2200      	movs	r2, #0
 800a204:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	68f9      	ldr	r1, [r7, #12]
 800a212:	69b8      	ldr	r0, [r7, #24]
 800a214:	f001 f8f4 	bl	800b400 <pxPortInitialiseStack>
 800a218:	4602      	mov	r2, r0
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a22a:	bf00      	nop
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a23c:	f001 fa0a 	bl	800b654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a240:	4b2d      	ldr	r3, [pc, #180]	; (800a2f8 <prvAddNewTaskToReadyList+0xc4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	3301      	adds	r3, #1
 800a246:	4a2c      	ldr	r2, [pc, #176]	; (800a2f8 <prvAddNewTaskToReadyList+0xc4>)
 800a248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a24a:	4b2c      	ldr	r3, [pc, #176]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d109      	bne.n	800a266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a252:	4a2a      	ldr	r2, [pc, #168]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a258:	4b27      	ldr	r3, [pc, #156]	; (800a2f8 <prvAddNewTaskToReadyList+0xc4>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d110      	bne.n	800a282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a260:	f000 fbe2 	bl	800aa28 <prvInitialiseTaskLists>
 800a264:	e00d      	b.n	800a282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a266:	4b26      	ldr	r3, [pc, #152]	; (800a300 <prvAddNewTaskToReadyList+0xcc>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d109      	bne.n	800a282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a26e:	4b23      	ldr	r3, [pc, #140]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a278:	429a      	cmp	r2, r3
 800a27a:	d802      	bhi.n	800a282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a27c:	4a1f      	ldr	r2, [pc, #124]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a282:	4b20      	ldr	r3, [pc, #128]	; (800a304 <prvAddNewTaskToReadyList+0xd0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	3301      	adds	r3, #1
 800a288:	4a1e      	ldr	r2, [pc, #120]	; (800a304 <prvAddNewTaskToReadyList+0xd0>)
 800a28a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a28c:	4b1d      	ldr	r3, [pc, #116]	; (800a304 <prvAddNewTaskToReadyList+0xd0>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a298:	4b1b      	ldr	r3, [pc, #108]	; (800a308 <prvAddNewTaskToReadyList+0xd4>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d903      	bls.n	800a2a8 <prvAddNewTaskToReadyList+0x74>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2a4:	4a18      	ldr	r2, [pc, #96]	; (800a308 <prvAddNewTaskToReadyList+0xd4>)
 800a2a6:	6013      	str	r3, [r2, #0]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4a15      	ldr	r2, [pc, #84]	; (800a30c <prvAddNewTaskToReadyList+0xd8>)
 800a2b6:	441a      	add	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3304      	adds	r3, #4
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4610      	mov	r0, r2
 800a2c0:	f7ff f913 	bl	80094ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2c4:	f001 f9f6 	bl	800b6b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2c8:	4b0d      	ldr	r3, [pc, #52]	; (800a300 <prvAddNewTaskToReadyList+0xcc>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d00e      	beq.n	800a2ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <prvAddNewTaskToReadyList+0xc8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d207      	bcs.n	800a2ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2de:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <prvAddNewTaskToReadyList+0xdc>)
 800a2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	240013c4 	.word	0x240013c4
 800a2fc:	24000ef0 	.word	0x24000ef0
 800a300:	240013d0 	.word	0x240013d0
 800a304:	240013e0 	.word	0x240013e0
 800a308:	240013cc 	.word	0x240013cc
 800a30c:	24000ef4 	.word	0x24000ef4
 800a310:	e000ed04 	.word	0xe000ed04

0800a314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08a      	sub	sp, #40	; 0x28
 800a318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a322:	463a      	mov	r2, r7
 800a324:	1d39      	adds	r1, r7, #4
 800a326:	f107 0308 	add.w	r3, r7, #8
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7ff f87c 	bl	8009428 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	9202      	str	r2, [sp, #8]
 800a338:	9301      	str	r3, [sp, #4]
 800a33a:	2300      	movs	r3, #0
 800a33c:	9300      	str	r3, [sp, #0]
 800a33e:	2300      	movs	r3, #0
 800a340:	460a      	mov	r2, r1
 800a342:	4921      	ldr	r1, [pc, #132]	; (800a3c8 <vTaskStartScheduler+0xb4>)
 800a344:	4821      	ldr	r0, [pc, #132]	; (800a3cc <vTaskStartScheduler+0xb8>)
 800a346:	f7ff fe43 	bl	8009fd0 <xTaskCreateStatic>
 800a34a:	4603      	mov	r3, r0
 800a34c:	4a20      	ldr	r2, [pc, #128]	; (800a3d0 <vTaskStartScheduler+0xbc>)
 800a34e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a350:	4b1f      	ldr	r3, [pc, #124]	; (800a3d0 <vTaskStartScheduler+0xbc>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a358:	2301      	movs	r3, #1
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	e001      	b.n	800a362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a35e:	2300      	movs	r3, #0
 800a360:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d102      	bne.n	800a36e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a368:	f000 fcfc 	bl	800ad64 <xTimerCreateTimerTask>
 800a36c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d116      	bne.n	800a3a2 <vTaskStartScheduler+0x8e>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	613b      	str	r3, [r7, #16]
}
 800a386:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a388:	4b12      	ldr	r3, [pc, #72]	; (800a3d4 <vTaskStartScheduler+0xc0>)
 800a38a:	f04f 32ff 	mov.w	r2, #4294967295
 800a38e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a390:	4b11      	ldr	r3, [pc, #68]	; (800a3d8 <vTaskStartScheduler+0xc4>)
 800a392:	2201      	movs	r2, #1
 800a394:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a396:	4b11      	ldr	r3, [pc, #68]	; (800a3dc <vTaskStartScheduler+0xc8>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a39c:	f001 f8b8 	bl	800b510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a3a0:	e00e      	b.n	800a3c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a8:	d10a      	bne.n	800a3c0 <vTaskStartScheduler+0xac>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	60fb      	str	r3, [r7, #12]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <vTaskStartScheduler+0xaa>
}
 800a3c0:	bf00      	nop
 800a3c2:	3718      	adds	r7, #24
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	0800bd04 	.word	0x0800bd04
 800a3cc:	0800a9f9 	.word	0x0800a9f9
 800a3d0:	240013e8 	.word	0x240013e8
 800a3d4:	240013e4 	.word	0x240013e4
 800a3d8:	240013d0 	.word	0x240013d0
 800a3dc:	240013c8 	.word	0x240013c8

0800a3e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a3e4:	4b04      	ldr	r3, [pc, #16]	; (800a3f8 <vTaskSuspendAll+0x18>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	4a03      	ldr	r2, [pc, #12]	; (800a3f8 <vTaskSuspendAll+0x18>)
 800a3ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a3ee:	bf00      	nop
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr
 800a3f8:	240013ec 	.word	0x240013ec

0800a3fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a402:	2300      	movs	r3, #0
 800a404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a40a:	4b42      	ldr	r3, [pc, #264]	; (800a514 <xTaskResumeAll+0x118>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10a      	bne.n	800a428 <xTaskResumeAll+0x2c>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	603b      	str	r3, [r7, #0]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a428:	f001 f914 	bl	800b654 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a42c:	4b39      	ldr	r3, [pc, #228]	; (800a514 <xTaskResumeAll+0x118>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3b01      	subs	r3, #1
 800a432:	4a38      	ldr	r2, [pc, #224]	; (800a514 <xTaskResumeAll+0x118>)
 800a434:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a436:	4b37      	ldr	r3, [pc, #220]	; (800a514 <xTaskResumeAll+0x118>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d162      	bne.n	800a504 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a43e:	4b36      	ldr	r3, [pc, #216]	; (800a518 <xTaskResumeAll+0x11c>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d05e      	beq.n	800a504 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a446:	e02f      	b.n	800a4a8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a448:	4b34      	ldr	r3, [pc, #208]	; (800a51c <xTaskResumeAll+0x120>)
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	68db      	ldr	r3, [r3, #12]
 800a44e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	3318      	adds	r3, #24
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff f8a5 	bl	80095a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3304      	adds	r3, #4
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff f8a0 	bl	80095a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a468:	4b2d      	ldr	r3, [pc, #180]	; (800a520 <xTaskResumeAll+0x124>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d903      	bls.n	800a478 <xTaskResumeAll+0x7c>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a474:	4a2a      	ldr	r2, [pc, #168]	; (800a520 <xTaskResumeAll+0x124>)
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4a27      	ldr	r2, [pc, #156]	; (800a524 <xTaskResumeAll+0x128>)
 800a486:	441a      	add	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3304      	adds	r3, #4
 800a48c:	4619      	mov	r1, r3
 800a48e:	4610      	mov	r0, r2
 800a490:	f7ff f82b 	bl	80094ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a498:	4b23      	ldr	r3, [pc, #140]	; (800a528 <xTaskResumeAll+0x12c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d302      	bcc.n	800a4a8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a4a2:	4b22      	ldr	r3, [pc, #136]	; (800a52c <xTaskResumeAll+0x130>)
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4a8:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <xTaskResumeAll+0x120>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1cb      	bne.n	800a448 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d001      	beq.n	800a4ba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a4b6:	f000 fb55 	bl	800ab64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a4ba:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <xTaskResumeAll+0x134>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d010      	beq.n	800a4e8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a4c6:	f000 f847 	bl	800a558 <xTaskIncrementTick>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d002      	beq.n	800a4d6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a4d0:	4b16      	ldr	r3, [pc, #88]	; (800a52c <xTaskResumeAll+0x130>)
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d1f1      	bne.n	800a4c6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a4e2:	4b13      	ldr	r3, [pc, #76]	; (800a530 <xTaskResumeAll+0x134>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a4e8:	4b10      	ldr	r3, [pc, #64]	; (800a52c <xTaskResumeAll+0x130>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d009      	beq.n	800a504 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a4f4:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <xTaskResumeAll+0x138>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a504:	f001 f8d6 	bl	800b6b4 <vPortExitCritical>

	return xAlreadyYielded;
 800a508:	68bb      	ldr	r3, [r7, #8]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	240013ec 	.word	0x240013ec
 800a518:	240013c4 	.word	0x240013c4
 800a51c:	24001384 	.word	0x24001384
 800a520:	240013cc 	.word	0x240013cc
 800a524:	24000ef4 	.word	0x24000ef4
 800a528:	24000ef0 	.word	0x24000ef0
 800a52c:	240013d8 	.word	0x240013d8
 800a530:	240013d4 	.word	0x240013d4
 800a534:	e000ed04 	.word	0xe000ed04

0800a538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <xTaskGetTickCount+0x1c>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a544:	687b      	ldr	r3, [r7, #4]
}
 800a546:	4618      	mov	r0, r3
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
 800a552:	bf00      	nop
 800a554:	240013c8 	.word	0x240013c8

0800a558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a55e:	2300      	movs	r3, #0
 800a560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a562:	4b4f      	ldr	r3, [pc, #316]	; (800a6a0 <xTaskIncrementTick+0x148>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f040 808f 	bne.w	800a68a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a56c:	4b4d      	ldr	r3, [pc, #308]	; (800a6a4 <xTaskIncrementTick+0x14c>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	3301      	adds	r3, #1
 800a572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a574:	4a4b      	ldr	r2, [pc, #300]	; (800a6a4 <xTaskIncrementTick+0x14c>)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d120      	bne.n	800a5c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a580:	4b49      	ldr	r3, [pc, #292]	; (800a6a8 <xTaskIncrementTick+0x150>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00a      	beq.n	800a5a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	603b      	str	r3, [r7, #0]
}
 800a59c:	bf00      	nop
 800a59e:	e7fe      	b.n	800a59e <xTaskIncrementTick+0x46>
 800a5a0:	4b41      	ldr	r3, [pc, #260]	; (800a6a8 <xTaskIncrementTick+0x150>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	60fb      	str	r3, [r7, #12]
 800a5a6:	4b41      	ldr	r3, [pc, #260]	; (800a6ac <xTaskIncrementTick+0x154>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a3f      	ldr	r2, [pc, #252]	; (800a6a8 <xTaskIncrementTick+0x150>)
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	4a3f      	ldr	r2, [pc, #252]	; (800a6ac <xTaskIncrementTick+0x154>)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	4b3e      	ldr	r3, [pc, #248]	; (800a6b0 <xTaskIncrementTick+0x158>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	4a3d      	ldr	r2, [pc, #244]	; (800a6b0 <xTaskIncrementTick+0x158>)
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	f000 fad1 	bl	800ab64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a5c2:	4b3c      	ldr	r3, [pc, #240]	; (800a6b4 <xTaskIncrementTick+0x15c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d349      	bcc.n	800a660 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5cc:	4b36      	ldr	r3, [pc, #216]	; (800a6a8 <xTaskIncrementTick+0x150>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d104      	bne.n	800a5e0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d6:	4b37      	ldr	r3, [pc, #220]	; (800a6b4 <xTaskIncrementTick+0x15c>)
 800a5d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5dc:	601a      	str	r2, [r3, #0]
					break;
 800a5de:	e03f      	b.n	800a660 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5e0:	4b31      	ldr	r3, [pc, #196]	; (800a6a8 <xTaskIncrementTick+0x150>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	685b      	ldr	r3, [r3, #4]
 800a5ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a5f0:	693a      	ldr	r2, [r7, #16]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d203      	bcs.n	800a600 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a5f8:	4a2e      	ldr	r2, [pc, #184]	; (800a6b4 <xTaskIncrementTick+0x15c>)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a5fe:	e02f      	b.n	800a660 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	3304      	adds	r3, #4
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe ffcd 	bl	80095a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	3318      	adds	r3, #24
 800a616:	4618      	mov	r0, r3
 800a618:	f7fe ffc4 	bl	80095a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a620:	4b25      	ldr	r3, [pc, #148]	; (800a6b8 <xTaskIncrementTick+0x160>)
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d903      	bls.n	800a630 <xTaskIncrementTick+0xd8>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62c:	4a22      	ldr	r2, [pc, #136]	; (800a6b8 <xTaskIncrementTick+0x160>)
 800a62e:	6013      	str	r3, [r2, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a634:	4613      	mov	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	4413      	add	r3, r2
 800a63a:	009b      	lsls	r3, r3, #2
 800a63c:	4a1f      	ldr	r2, [pc, #124]	; (800a6bc <xTaskIncrementTick+0x164>)
 800a63e:	441a      	add	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	3304      	adds	r3, #4
 800a644:	4619      	mov	r1, r3
 800a646:	4610      	mov	r0, r2
 800a648:	f7fe ff4f 	bl	80094ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a650:	4b1b      	ldr	r3, [pc, #108]	; (800a6c0 <xTaskIncrementTick+0x168>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	429a      	cmp	r2, r3
 800a658:	d3b8      	bcc.n	800a5cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a65a:	2301      	movs	r3, #1
 800a65c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a65e:	e7b5      	b.n	800a5cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a660:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <xTaskIncrementTick+0x168>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a666:	4915      	ldr	r1, [pc, #84]	; (800a6bc <xTaskIncrementTick+0x164>)
 800a668:	4613      	mov	r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	4413      	add	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	440b      	add	r3, r1
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b01      	cmp	r3, #1
 800a676:	d901      	bls.n	800a67c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a67c:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <xTaskIncrementTick+0x16c>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d007      	beq.n	800a694 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a684:	2301      	movs	r3, #1
 800a686:	617b      	str	r3, [r7, #20]
 800a688:	e004      	b.n	800a694 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a68a:	4b0f      	ldr	r3, [pc, #60]	; (800a6c8 <xTaskIncrementTick+0x170>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	3301      	adds	r3, #1
 800a690:	4a0d      	ldr	r2, [pc, #52]	; (800a6c8 <xTaskIncrementTick+0x170>)
 800a692:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a694:	697b      	ldr	r3, [r7, #20]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	240013ec 	.word	0x240013ec
 800a6a4:	240013c8 	.word	0x240013c8
 800a6a8:	2400137c 	.word	0x2400137c
 800a6ac:	24001380 	.word	0x24001380
 800a6b0:	240013dc 	.word	0x240013dc
 800a6b4:	240013e4 	.word	0x240013e4
 800a6b8:	240013cc 	.word	0x240013cc
 800a6bc:	24000ef4 	.word	0x24000ef4
 800a6c0:	24000ef0 	.word	0x24000ef0
 800a6c4:	240013d8 	.word	0x240013d8
 800a6c8:	240013d4 	.word	0x240013d4

0800a6cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b085      	sub	sp, #20
 800a6d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a6d2:	4b28      	ldr	r3, [pc, #160]	; (800a774 <vTaskSwitchContext+0xa8>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a6da:	4b27      	ldr	r3, [pc, #156]	; (800a778 <vTaskSwitchContext+0xac>)
 800a6dc:	2201      	movs	r2, #1
 800a6de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a6e0:	e041      	b.n	800a766 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a6e2:	4b25      	ldr	r3, [pc, #148]	; (800a778 <vTaskSwitchContext+0xac>)
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6e8:	4b24      	ldr	r3, [pc, #144]	; (800a77c <vTaskSwitchContext+0xb0>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	60fb      	str	r3, [r7, #12]
 800a6ee:	e010      	b.n	800a712 <vTaskSwitchContext+0x46>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10a      	bne.n	800a70c <vTaskSwitchContext+0x40>
	__asm volatile
 800a6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	607b      	str	r3, [r7, #4]
}
 800a708:	bf00      	nop
 800a70a:	e7fe      	b.n	800a70a <vTaskSwitchContext+0x3e>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	3b01      	subs	r3, #1
 800a710:	60fb      	str	r3, [r7, #12]
 800a712:	491b      	ldr	r1, [pc, #108]	; (800a780 <vTaskSwitchContext+0xb4>)
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	4613      	mov	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	4413      	add	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	440b      	add	r3, r1
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0e4      	beq.n	800a6f0 <vTaskSwitchContext+0x24>
 800a726:	68fa      	ldr	r2, [r7, #12]
 800a728:	4613      	mov	r3, r2
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4413      	add	r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	4a13      	ldr	r2, [pc, #76]	; (800a780 <vTaskSwitchContext+0xb4>)
 800a732:	4413      	add	r3, r2
 800a734:	60bb      	str	r3, [r7, #8]
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	605a      	str	r2, [r3, #4]
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	685a      	ldr	r2, [r3, #4]
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	3308      	adds	r3, #8
 800a748:	429a      	cmp	r2, r3
 800a74a:	d104      	bne.n	800a756 <vTaskSwitchContext+0x8a>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	685b      	ldr	r3, [r3, #4]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	605a      	str	r2, [r3, #4]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	68db      	ldr	r3, [r3, #12]
 800a75c:	4a09      	ldr	r2, [pc, #36]	; (800a784 <vTaskSwitchContext+0xb8>)
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	4a06      	ldr	r2, [pc, #24]	; (800a77c <vTaskSwitchContext+0xb0>)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6013      	str	r3, [r2, #0]
}
 800a766:	bf00      	nop
 800a768:	3714      	adds	r7, #20
 800a76a:	46bd      	mov	sp, r7
 800a76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop
 800a774:	240013ec 	.word	0x240013ec
 800a778:	240013d8 	.word	0x240013d8
 800a77c:	240013cc 	.word	0x240013cc
 800a780:	24000ef4 	.word	0x24000ef4
 800a784:	24000ef0 	.word	0x24000ef0

0800a788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	60fb      	str	r3, [r7, #12]
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7ae:	4b07      	ldr	r3, [pc, #28]	; (800a7cc <vTaskPlaceOnEventList+0x44>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3318      	adds	r3, #24
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7fe febb 	bl	8009532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a7bc:	2101      	movs	r1, #1
 800a7be:	6838      	ldr	r0, [r7, #0]
 800a7c0:	f000 fa7c 	bl	800acbc <prvAddCurrentTaskToDelayedList>
}
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	24000ef0 	.word	0x24000ef0

0800a7d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	617b      	str	r3, [r7, #20]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a7f8:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <vTaskPlaceOnEventListRestricted+0x54>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	3318      	adds	r3, #24
 800a7fe:	4619      	mov	r1, r3
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7fe fe72 	bl	80094ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a80c:	f04f 33ff 	mov.w	r3, #4294967295
 800a810:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	68b8      	ldr	r0, [r7, #8]
 800a816:	f000 fa51 	bl	800acbc <prvAddCurrentTaskToDelayedList>
	}
 800a81a:	bf00      	nop
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop
 800a824:	24000ef0 	.word	0x24000ef0

0800a828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b086      	sub	sp, #24
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a842:	f383 8811 	msr	BASEPRI, r3
 800a846:	f3bf 8f6f 	isb	sy
 800a84a:	f3bf 8f4f 	dsb	sy
 800a84e:	60fb      	str	r3, [r7, #12]
}
 800a850:	bf00      	nop
 800a852:	e7fe      	b.n	800a852 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	3318      	adds	r3, #24
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe fea3 	bl	80095a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a85e:	4b1e      	ldr	r3, [pc, #120]	; (800a8d8 <xTaskRemoveFromEventList+0xb0>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d11d      	bne.n	800a8a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	3304      	adds	r3, #4
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fe9a 	bl	80095a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a874:	4b19      	ldr	r3, [pc, #100]	; (800a8dc <xTaskRemoveFromEventList+0xb4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d903      	bls.n	800a884 <xTaskRemoveFromEventList+0x5c>
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a880:	4a16      	ldr	r2, [pc, #88]	; (800a8dc <xTaskRemoveFromEventList+0xb4>)
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4613      	mov	r3, r2
 800a88a:	009b      	lsls	r3, r3, #2
 800a88c:	4413      	add	r3, r2
 800a88e:	009b      	lsls	r3, r3, #2
 800a890:	4a13      	ldr	r2, [pc, #76]	; (800a8e0 <xTaskRemoveFromEventList+0xb8>)
 800a892:	441a      	add	r2, r3
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	3304      	adds	r3, #4
 800a898:	4619      	mov	r1, r3
 800a89a:	4610      	mov	r0, r2
 800a89c:	f7fe fe25 	bl	80094ea <vListInsertEnd>
 800a8a0:	e005      	b.n	800a8ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	3318      	adds	r3, #24
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	480e      	ldr	r0, [pc, #56]	; (800a8e4 <xTaskRemoveFromEventList+0xbc>)
 800a8aa:	f7fe fe1e 	bl	80094ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <xTaskRemoveFromEventList+0xc0>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d905      	bls.n	800a8c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <xTaskRemoveFromEventList+0xc4>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
 800a8c6:	e001      	b.n	800a8cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a8cc:	697b      	ldr	r3, [r7, #20]
}
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	240013ec 	.word	0x240013ec
 800a8dc:	240013cc 	.word	0x240013cc
 800a8e0:	24000ef4 	.word	0x24000ef4
 800a8e4:	24001384 	.word	0x24001384
 800a8e8:	24000ef0 	.word	0x24000ef0
 800a8ec:	240013d8 	.word	0x240013d8

0800a8f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a8f8:	4b06      	ldr	r3, [pc, #24]	; (800a914 <vTaskInternalSetTimeOutState+0x24>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a900:	4b05      	ldr	r3, [pc, #20]	; (800a918 <vTaskInternalSetTimeOutState+0x28>)
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	605a      	str	r2, [r3, #4]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	240013dc 	.word	0x240013dc
 800a918:	240013c8 	.word	0x240013c8

0800a91c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d10a      	bne.n	800a942 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a930:	f383 8811 	msr	BASEPRI, r3
 800a934:	f3bf 8f6f 	isb	sy
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	613b      	str	r3, [r7, #16]
}
 800a93e:	bf00      	nop
 800a940:	e7fe      	b.n	800a940 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d10a      	bne.n	800a95e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94c:	f383 8811 	msr	BASEPRI, r3
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	f3bf 8f4f 	dsb	sy
 800a958:	60fb      	str	r3, [r7, #12]
}
 800a95a:	bf00      	nop
 800a95c:	e7fe      	b.n	800a95c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a95e:	f000 fe79 	bl	800b654 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a962:	4b1d      	ldr	r3, [pc, #116]	; (800a9d8 <xTaskCheckForTimeOut+0xbc>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	1ad3      	subs	r3, r2, r3
 800a970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a97a:	d102      	bne.n	800a982 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a97c:	2300      	movs	r3, #0
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	e023      	b.n	800a9ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	4b15      	ldr	r3, [pc, #84]	; (800a9dc <xTaskCheckForTimeOut+0xc0>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d007      	beq.n	800a99e <xTaskCheckForTimeOut+0x82>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	69ba      	ldr	r2, [r7, #24]
 800a994:	429a      	cmp	r2, r3
 800a996:	d302      	bcc.n	800a99e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	61fb      	str	r3, [r7, #28]
 800a99c:	e015      	b.n	800a9ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d20b      	bcs.n	800a9c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	1ad2      	subs	r2, r2, r3
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f7ff ff9b 	bl	800a8f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61fb      	str	r3, [r7, #28]
 800a9be:	e004      	b.n	800a9ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a9ca:	f000 fe73 	bl	800b6b4 <vPortExitCritical>

	return xReturn;
 800a9ce:	69fb      	ldr	r3, [r7, #28]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3720      	adds	r7, #32
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	240013c8 	.word	0x240013c8
 800a9dc:	240013dc 	.word	0x240013dc

0800a9e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a9e4:	4b03      	ldr	r3, [pc, #12]	; (800a9f4 <vTaskMissedYield+0x14>)
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	601a      	str	r2, [r3, #0]
}
 800a9ea:	bf00      	nop
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	240013d8 	.word	0x240013d8

0800a9f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa00:	f000 f852 	bl	800aaa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa04:	4b06      	ldr	r3, [pc, #24]	; (800aa20 <prvIdleTask+0x28>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b01      	cmp	r3, #1
 800aa0a:	d9f9      	bls.n	800aa00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa0c:	4b05      	ldr	r3, [pc, #20]	; (800aa24 <prvIdleTask+0x2c>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa1c:	e7f0      	b.n	800aa00 <prvIdleTask+0x8>
 800aa1e:	bf00      	nop
 800aa20:	24000ef4 	.word	0x24000ef4
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa2e:	2300      	movs	r3, #0
 800aa30:	607b      	str	r3, [r7, #4]
 800aa32:	e00c      	b.n	800aa4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	4613      	mov	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	009b      	lsls	r3, r3, #2
 800aa3e:	4a12      	ldr	r2, [pc, #72]	; (800aa88 <prvInitialiseTaskLists+0x60>)
 800aa40:	4413      	add	r3, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7fe fd24 	bl	8009490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	607b      	str	r3, [r7, #4]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2b37      	cmp	r3, #55	; 0x37
 800aa52:	d9ef      	bls.n	800aa34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aa54:	480d      	ldr	r0, [pc, #52]	; (800aa8c <prvInitialiseTaskLists+0x64>)
 800aa56:	f7fe fd1b 	bl	8009490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aa5a:	480d      	ldr	r0, [pc, #52]	; (800aa90 <prvInitialiseTaskLists+0x68>)
 800aa5c:	f7fe fd18 	bl	8009490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa60:	480c      	ldr	r0, [pc, #48]	; (800aa94 <prvInitialiseTaskLists+0x6c>)
 800aa62:	f7fe fd15 	bl	8009490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa66:	480c      	ldr	r0, [pc, #48]	; (800aa98 <prvInitialiseTaskLists+0x70>)
 800aa68:	f7fe fd12 	bl	8009490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa6c:	480b      	ldr	r0, [pc, #44]	; (800aa9c <prvInitialiseTaskLists+0x74>)
 800aa6e:	f7fe fd0f 	bl	8009490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa72:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <prvInitialiseTaskLists+0x78>)
 800aa74:	4a05      	ldr	r2, [pc, #20]	; (800aa8c <prvInitialiseTaskLists+0x64>)
 800aa76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <prvInitialiseTaskLists+0x7c>)
 800aa7a:	4a05      	ldr	r2, [pc, #20]	; (800aa90 <prvInitialiseTaskLists+0x68>)
 800aa7c:	601a      	str	r2, [r3, #0]
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	24000ef4 	.word	0x24000ef4
 800aa8c:	24001354 	.word	0x24001354
 800aa90:	24001368 	.word	0x24001368
 800aa94:	24001384 	.word	0x24001384
 800aa98:	24001398 	.word	0x24001398
 800aa9c:	240013b0 	.word	0x240013b0
 800aaa0:	2400137c 	.word	0x2400137c
 800aaa4:	24001380 	.word	0x24001380

0800aaa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aaae:	e019      	b.n	800aae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aab0:	f000 fdd0 	bl	800b654 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aab4:	4b10      	ldr	r3, [pc, #64]	; (800aaf8 <prvCheckTasksWaitingTermination+0x50>)
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	3304      	adds	r3, #4
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fd6f 	bl	80095a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aac6:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <prvCheckTasksWaitingTermination+0x54>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	4a0b      	ldr	r2, [pc, #44]	; (800aafc <prvCheckTasksWaitingTermination+0x54>)
 800aace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <prvCheckTasksWaitingTermination+0x58>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	3b01      	subs	r3, #1
 800aad6:	4a0a      	ldr	r2, [pc, #40]	; (800ab00 <prvCheckTasksWaitingTermination+0x58>)
 800aad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aada:	f000 fdeb 	bl	800b6b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f810 	bl	800ab04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aae4:	4b06      	ldr	r3, [pc, #24]	; (800ab00 <prvCheckTasksWaitingTermination+0x58>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d1e1      	bne.n	800aab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	3708      	adds	r7, #8
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	24001398 	.word	0x24001398
 800aafc:	240013c4 	.word	0x240013c4
 800ab00:	240013ac 	.word	0x240013ac

0800ab04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b084      	sub	sp, #16
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d108      	bne.n	800ab28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 ff88 	bl	800ba30 <vPortFree>
				vPortFree( pxTCB );
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f000 ff85 	bl	800ba30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ab26:	e018      	b.n	800ab5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d103      	bne.n	800ab3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 ff7c 	bl	800ba30 <vPortFree>
	}
 800ab38:	e00f      	b.n	800ab5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	d00a      	beq.n	800ab5a <prvDeleteTCB+0x56>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	60fb      	str	r3, [r7, #12]
}
 800ab56:	bf00      	nop
 800ab58:	e7fe      	b.n	800ab58 <prvDeleteTCB+0x54>
	}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <prvResetNextTaskUnblockTime+0x38>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d104      	bne.n	800ab7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab74:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <prvResetNextTaskUnblockTime+0x3c>)
 800ab76:	f04f 32ff 	mov.w	r2, #4294967295
 800ab7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab7c:	e008      	b.n	800ab90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7e:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <prvResetNextTaskUnblockTime+0x38>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	68db      	ldr	r3, [r3, #12]
 800ab86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	4a04      	ldr	r2, [pc, #16]	; (800aba0 <prvResetNextTaskUnblockTime+0x3c>)
 800ab8e:	6013      	str	r3, [r2, #0]
}
 800ab90:	bf00      	nop
 800ab92:	370c      	adds	r7, #12
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	2400137c 	.word	0x2400137c
 800aba0:	240013e4 	.word	0x240013e4

0800aba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800abaa:	4b0b      	ldr	r3, [pc, #44]	; (800abd8 <xTaskGetSchedulerState+0x34>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800abb2:	2301      	movs	r3, #1
 800abb4:	607b      	str	r3, [r7, #4]
 800abb6:	e008      	b.n	800abca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abb8:	4b08      	ldr	r3, [pc, #32]	; (800abdc <xTaskGetSchedulerState+0x38>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800abc0:	2302      	movs	r3, #2
 800abc2:	607b      	str	r3, [r7, #4]
 800abc4:	e001      	b.n	800abca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800abc6:	2300      	movs	r3, #0
 800abc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800abca:	687b      	ldr	r3, [r7, #4]
	}
 800abcc:	4618      	mov	r0, r3
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr
 800abd8:	240013d0 	.word	0x240013d0
 800abdc:	240013ec 	.word	0x240013ec

0800abe0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d056      	beq.n	800aca4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abf6:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <xTaskPriorityDisinherit+0xd0>)
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d00a      	beq.n	800ac16 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	60fb      	str	r3, [r7, #12]
}
 800ac12:	bf00      	nop
 800ac14:	e7fe      	b.n	800ac14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10a      	bne.n	800ac34 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	60bb      	str	r3, [r7, #8]
}
 800ac30:	bf00      	nop
 800ac32:	e7fe      	b.n	800ac32 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac38:	1e5a      	subs	r2, r3, #1
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d02c      	beq.n	800aca4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d128      	bne.n	800aca4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7fe fca4 	bl	80095a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac70:	693b      	ldr	r3, [r7, #16]
 800ac72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac74:	4b0f      	ldr	r3, [pc, #60]	; (800acb4 <xTaskPriorityDisinherit+0xd4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d903      	bls.n	800ac84 <xTaskPriorityDisinherit+0xa4>
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac80:	4a0c      	ldr	r2, [pc, #48]	; (800acb4 <xTaskPriorityDisinherit+0xd4>)
 800ac82:	6013      	str	r3, [r2, #0]
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4a09      	ldr	r2, [pc, #36]	; (800acb8 <xTaskPriorityDisinherit+0xd8>)
 800ac92:	441a      	add	r2, r3
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	3304      	adds	r3, #4
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	f7fe fc25 	bl	80094ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aca0:	2301      	movs	r3, #1
 800aca2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aca4:	697b      	ldr	r3, [r7, #20]
	}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	24000ef0 	.word	0x24000ef0
 800acb4:	240013cc 	.word	0x240013cc
 800acb8:	24000ef4 	.word	0x24000ef4

0800acbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
 800acc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acc6:	4b21      	ldr	r3, [pc, #132]	; (800ad4c <prvAddCurrentTaskToDelayedList+0x90>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800accc:	4b20      	ldr	r3, [pc, #128]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x94>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	3304      	adds	r3, #4
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fe fc66 	bl	80095a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acde:	d10a      	bne.n	800acf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d007      	beq.n	800acf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ace6:	4b1a      	ldr	r3, [pc, #104]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	3304      	adds	r3, #4
 800acec:	4619      	mov	r1, r3
 800acee:	4819      	ldr	r0, [pc, #100]	; (800ad54 <prvAddCurrentTaskToDelayedList+0x98>)
 800acf0:	f7fe fbfb 	bl	80094ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acf4:	e026      	b.n	800ad44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acf6:	68fa      	ldr	r2, [r7, #12]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4413      	add	r3, r2
 800acfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acfe:	4b14      	ldr	r3, [pc, #80]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad06:	68ba      	ldr	r2, [r7, #8]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d209      	bcs.n	800ad22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad0e:	4b12      	ldr	r3, [pc, #72]	; (800ad58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	3304      	adds	r3, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	4610      	mov	r0, r2
 800ad1c:	f7fe fc09 	bl	8009532 <vListInsert>
}
 800ad20:	e010      	b.n	800ad44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad22:	4b0e      	ldr	r3, [pc, #56]	; (800ad5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	4b0a      	ldr	r3, [pc, #40]	; (800ad50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	4610      	mov	r0, r2
 800ad30:	f7fe fbff 	bl	8009532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad34:	4b0a      	ldr	r3, [pc, #40]	; (800ad60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d202      	bcs.n	800ad44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad3e:	4a08      	ldr	r2, [pc, #32]	; (800ad60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	6013      	str	r3, [r2, #0]
}
 800ad44:	bf00      	nop
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	240013c8 	.word	0x240013c8
 800ad50:	24000ef0 	.word	0x24000ef0
 800ad54:	240013b0 	.word	0x240013b0
 800ad58:	24001380 	.word	0x24001380
 800ad5c:	2400137c 	.word	0x2400137c
 800ad60:	240013e4 	.word	0x240013e4

0800ad64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b08a      	sub	sp, #40	; 0x28
 800ad68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad6e:	f000 fb07 	bl	800b380 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad72:	4b1c      	ldr	r3, [pc, #112]	; (800ade4 <xTimerCreateTimerTask+0x80>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d021      	beq.n	800adbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad82:	1d3a      	adds	r2, r7, #4
 800ad84:	f107 0108 	add.w	r1, r7, #8
 800ad88:	f107 030c 	add.w	r3, r7, #12
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7fe fb65 	bl	800945c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	9202      	str	r2, [sp, #8]
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	2300      	movs	r3, #0
 800ada2:	460a      	mov	r2, r1
 800ada4:	4910      	ldr	r1, [pc, #64]	; (800ade8 <xTimerCreateTimerTask+0x84>)
 800ada6:	4811      	ldr	r0, [pc, #68]	; (800adec <xTimerCreateTimerTask+0x88>)
 800ada8:	f7ff f912 	bl	8009fd0 <xTaskCreateStatic>
 800adac:	4603      	mov	r3, r0
 800adae:	4a10      	ldr	r2, [pc, #64]	; (800adf0 <xTimerCreateTimerTask+0x8c>)
 800adb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800adb2:	4b0f      	ldr	r3, [pc, #60]	; (800adf0 <xTimerCreateTimerTask+0x8c>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d001      	beq.n	800adbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adba:	2301      	movs	r3, #1
 800adbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xTimerCreateTimerTask+0x76>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	613b      	str	r3, [r7, #16]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	24001420 	.word	0x24001420
 800ade8:	0800bd0c 	.word	0x0800bd0c
 800adec:	0800af29 	.word	0x0800af29
 800adf0:	24001424 	.word	0x24001424

0800adf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b08a      	sub	sp, #40	; 0x28
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
 800ae00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d10a      	bne.n	800ae22 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae10:	f383 8811 	msr	BASEPRI, r3
 800ae14:	f3bf 8f6f 	isb	sy
 800ae18:	f3bf 8f4f 	dsb	sy
 800ae1c:	623b      	str	r3, [r7, #32]
}
 800ae1e:	bf00      	nop
 800ae20:	e7fe      	b.n	800ae20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae22:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <xTimerGenericCommand+0x98>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d02a      	beq.n	800ae80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	2b05      	cmp	r3, #5
 800ae3a:	dc18      	bgt.n	800ae6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae3c:	f7ff feb2 	bl	800aba4 <xTaskGetSchedulerState>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d109      	bne.n	800ae5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae46:	4b11      	ldr	r3, [pc, #68]	; (800ae8c <xTimerGenericCommand+0x98>)
 800ae48:	6818      	ldr	r0, [r3, #0]
 800ae4a:	f107 0110 	add.w	r1, r7, #16
 800ae4e:	2300      	movs	r3, #0
 800ae50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae52:	f7fe fcd5 	bl	8009800 <xQueueGenericSend>
 800ae56:	6278      	str	r0, [r7, #36]	; 0x24
 800ae58:	e012      	b.n	800ae80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <xTimerGenericCommand+0x98>)
 800ae5c:	6818      	ldr	r0, [r3, #0]
 800ae5e:	f107 0110 	add.w	r1, r7, #16
 800ae62:	2300      	movs	r3, #0
 800ae64:	2200      	movs	r2, #0
 800ae66:	f7fe fccb 	bl	8009800 <xQueueGenericSend>
 800ae6a:	6278      	str	r0, [r7, #36]	; 0x24
 800ae6c:	e008      	b.n	800ae80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <xTimerGenericCommand+0x98>)
 800ae70:	6818      	ldr	r0, [r3, #0]
 800ae72:	f107 0110 	add.w	r1, r7, #16
 800ae76:	2300      	movs	r3, #0
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	f7fe fdbf 	bl	80099fc <xQueueGenericSendFromISR>
 800ae7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3728      	adds	r7, #40	; 0x28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	24001420 	.word	0x24001420

0800ae90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b088      	sub	sp, #32
 800ae94:	af02      	add	r7, sp, #8
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9a:	4b22      	ldr	r3, [pc, #136]	; (800af24 <prvProcessExpiredTimer+0x94>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	3304      	adds	r3, #4
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe fb7b 	bl	80095a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aeb4:	f003 0304 	and.w	r3, r3, #4
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d022      	beq.n	800af02 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	699a      	ldr	r2, [r3, #24]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	18d1      	adds	r1, r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	683a      	ldr	r2, [r7, #0]
 800aec8:	6978      	ldr	r0, [r7, #20]
 800aeca:	f000 f8d1 	bl	800b070 <prvInsertTimerInActiveList>
 800aece:	4603      	mov	r3, r0
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d01f      	beq.n	800af14 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aed4:	2300      	movs	r3, #0
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	2100      	movs	r1, #0
 800aede:	6978      	ldr	r0, [r7, #20]
 800aee0:	f7ff ff88 	bl	800adf4 <xTimerGenericCommand>
 800aee4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d113      	bne.n	800af14 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aeec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef0:	f383 8811 	msr	BASEPRI, r3
 800aef4:	f3bf 8f6f 	isb	sy
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	60fb      	str	r3, [r7, #12]
}
 800aefe:	bf00      	nop
 800af00:	e7fe      	b.n	800af00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af08:	f023 0301 	bic.w	r3, r3, #1
 800af0c:	b2da      	uxtb	r2, r3
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	6a1b      	ldr	r3, [r3, #32]
 800af18:	6978      	ldr	r0, [r7, #20]
 800af1a:	4798      	blx	r3
}
 800af1c:	bf00      	nop
 800af1e:	3718      	adds	r7, #24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	24001418 	.word	0x24001418

0800af28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af30:	f107 0308 	add.w	r3, r7, #8
 800af34:	4618      	mov	r0, r3
 800af36:	f000 f857 	bl	800afe8 <prvGetNextExpireTime>
 800af3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	4619      	mov	r1, r3
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 f803 	bl	800af4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af46:	f000 f8d5 	bl	800b0f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af4a:	e7f1      	b.n	800af30 <prvTimerTask+0x8>

0800af4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af56:	f7ff fa43 	bl	800a3e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af5a:	f107 0308 	add.w	r3, r7, #8
 800af5e:	4618      	mov	r0, r3
 800af60:	f000 f866 	bl	800b030 <prvSampleTimeNow>
 800af64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d130      	bne.n	800afce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d10a      	bne.n	800af88 <prvProcessTimerOrBlockTask+0x3c>
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d806      	bhi.n	800af88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af7a:	f7ff fa3f 	bl	800a3fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af7e:	68f9      	ldr	r1, [r7, #12]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f7ff ff85 	bl	800ae90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af86:	e024      	b.n	800afd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d008      	beq.n	800afa0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af8e:	4b13      	ldr	r3, [pc, #76]	; (800afdc <prvProcessTimerOrBlockTask+0x90>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d101      	bne.n	800af9c <prvProcessTimerOrBlockTask+0x50>
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <prvProcessTimerOrBlockTask+0x52>
 800af9c:	2300      	movs	r3, #0
 800af9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afa0:	4b0f      	ldr	r3, [pc, #60]	; (800afe0 <prvProcessTimerOrBlockTask+0x94>)
 800afa2:	6818      	ldr	r0, [r3, #0]
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	1ad3      	subs	r3, r2, r3
 800afaa:	683a      	ldr	r2, [r7, #0]
 800afac:	4619      	mov	r1, r3
 800afae:	f7fe ffdb 	bl	8009f68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afb2:	f7ff fa23 	bl	800a3fc <xTaskResumeAll>
 800afb6:	4603      	mov	r3, r0
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d10a      	bne.n	800afd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800afbc:	4b09      	ldr	r3, [pc, #36]	; (800afe4 <prvProcessTimerOrBlockTask+0x98>)
 800afbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	f3bf 8f6f 	isb	sy
}
 800afcc:	e001      	b.n	800afd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800afce:	f7ff fa15 	bl	800a3fc <xTaskResumeAll>
}
 800afd2:	bf00      	nop
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	2400141c 	.word	0x2400141c
 800afe0:	24001420 	.word	0x24001420
 800afe4:	e000ed04 	.word	0xe000ed04

0800afe8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aff0:	4b0e      	ldr	r3, [pc, #56]	; (800b02c <prvGetNextExpireTime+0x44>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <prvGetNextExpireTime+0x16>
 800affa:	2201      	movs	r2, #1
 800affc:	e000      	b.n	800b000 <prvGetNextExpireTime+0x18>
 800affe:	2200      	movs	r2, #0
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d105      	bne.n	800b018 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b00c:	4b07      	ldr	r3, [pc, #28]	; (800b02c <prvGetNextExpireTime+0x44>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	60fb      	str	r3, [r7, #12]
 800b016:	e001      	b.n	800b01c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b01c:	68fb      	ldr	r3, [r7, #12]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	24001418 	.word	0x24001418

0800b030 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b038:	f7ff fa7e 	bl	800a538 <xTaskGetTickCount>
 800b03c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b03e:	4b0b      	ldr	r3, [pc, #44]	; (800b06c <prvSampleTimeNow+0x3c>)
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	429a      	cmp	r2, r3
 800b046:	d205      	bcs.n	800b054 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b048:	f000 f936 	bl	800b2b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2201      	movs	r2, #1
 800b050:	601a      	str	r2, [r3, #0]
 800b052:	e002      	b.n	800b05a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b05a:	4a04      	ldr	r2, [pc, #16]	; (800b06c <prvSampleTimeNow+0x3c>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b060:	68fb      	ldr	r3, [r7, #12]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	24001428 	.word	0x24001428

0800b070 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
 800b07c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d812      	bhi.n	800b0bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	1ad2      	subs	r2, r2, r3
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	699b      	ldr	r3, [r3, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d302      	bcc.n	800b0aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	617b      	str	r3, [r7, #20]
 800b0a8:	e01b      	b.n	800b0e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0aa:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <prvInsertTimerInActiveList+0x7c>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7fe fa3c 	bl	8009532 <vListInsert>
 800b0ba:	e012      	b.n	800b0e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d206      	bcs.n	800b0d2 <prvInsertTimerInActiveList+0x62>
 800b0c4:	68ba      	ldr	r2, [r7, #8]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d302      	bcc.n	800b0d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	617b      	str	r3, [r7, #20]
 800b0d0:	e007      	b.n	800b0e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0d2:	4b07      	ldr	r3, [pc, #28]	; (800b0f0 <prvInsertTimerInActiveList+0x80>)
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3304      	adds	r3, #4
 800b0da:	4619      	mov	r1, r3
 800b0dc:	4610      	mov	r0, r2
 800b0de:	f7fe fa28 	bl	8009532 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0e2:	697b      	ldr	r3, [r7, #20]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3718      	adds	r7, #24
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	2400141c 	.word	0x2400141c
 800b0f0:	24001418 	.word	0x24001418

0800b0f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b08e      	sub	sp, #56	; 0x38
 800b0f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0fa:	e0ca      	b.n	800b292 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	da18      	bge.n	800b134 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b102:	1d3b      	adds	r3, r7, #4
 800b104:	3304      	adds	r3, #4
 800b106:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	61fb      	str	r3, [r7, #28]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b12a:	6850      	ldr	r0, [r2, #4]
 800b12c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b12e:	6892      	ldr	r2, [r2, #8]
 800b130:	4611      	mov	r1, r2
 800b132:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f2c0 80ab 	blt.w	800b292 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b142:	695b      	ldr	r3, [r3, #20]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d004      	beq.n	800b152 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14a:	3304      	adds	r3, #4
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fe fa29 	bl	80095a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b152:	463b      	mov	r3, r7
 800b154:	4618      	mov	r0, r3
 800b156:	f7ff ff6b 	bl	800b030 <prvSampleTimeNow>
 800b15a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b09      	cmp	r3, #9
 800b160:	f200 8096 	bhi.w	800b290 <prvProcessReceivedCommands+0x19c>
 800b164:	a201      	add	r2, pc, #4	; (adr r2, 800b16c <prvProcessReceivedCommands+0x78>)
 800b166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16a:	bf00      	nop
 800b16c:	0800b195 	.word	0x0800b195
 800b170:	0800b195 	.word	0x0800b195
 800b174:	0800b195 	.word	0x0800b195
 800b178:	0800b209 	.word	0x0800b209
 800b17c:	0800b21d 	.word	0x0800b21d
 800b180:	0800b267 	.word	0x0800b267
 800b184:	0800b195 	.word	0x0800b195
 800b188:	0800b195 	.word	0x0800b195
 800b18c:	0800b209 	.word	0x0800b209
 800b190:	0800b21d 	.word	0x0800b21d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b19a:	f043 0301 	orr.w	r3, r3, #1
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1a6:	68ba      	ldr	r2, [r7, #8]
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	18d1      	adds	r1, r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b4:	f7ff ff5c 	bl	800b070 <prvInsertTimerInActiveList>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d069      	beq.n	800b292 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	6a1b      	ldr	r3, [r3, #32]
 800b1c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1cc:	f003 0304 	and.w	r3, r3, #4
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d05e      	beq.n	800b292 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	441a      	add	r2, r3
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9300      	str	r3, [sp, #0]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	2100      	movs	r1, #0
 800b1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e6:	f7ff fe05 	bl	800adf4 <xTimerGenericCommand>
 800b1ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d14f      	bne.n	800b292 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	61bb      	str	r3, [r7, #24]
}
 800b204:	bf00      	nop
 800b206:	e7fe      	b.n	800b206 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b20e:	f023 0301 	bic.w	r3, r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b21a:	e03a      	b.n	800b292 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b222:	f043 0301 	orr.w	r3, r3, #1
 800b226:	b2da      	uxtb	r2, r3
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10a      	bne.n	800b252 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	617b      	str	r3, [r7, #20]
}
 800b24e:	bf00      	nop
 800b250:	e7fe      	b.n	800b250 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	18d1      	adds	r1, r2, r3
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b25e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b260:	f7ff ff06 	bl	800b070 <prvInsertTimerInActiveList>
					break;
 800b264:	e015      	b.n	800b292 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d103      	bne.n	800b27c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b276:	f000 fbdb 	bl	800ba30 <vPortFree>
 800b27a:	e00a      	b.n	800b292 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b282:	f023 0301 	bic.w	r3, r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b28e:	e000      	b.n	800b292 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b290:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b292:	4b08      	ldr	r3, [pc, #32]	; (800b2b4 <prvProcessReceivedCommands+0x1c0>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	1d39      	adds	r1, r7, #4
 800b298:	2200      	movs	r2, #0
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe fc4a 	bl	8009b34 <xQueueReceive>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f47f af2a 	bne.w	800b0fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b2a8:	bf00      	nop
 800b2aa:	bf00      	nop
 800b2ac:	3730      	adds	r7, #48	; 0x30
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	24001420 	.word	0x24001420

0800b2b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b088      	sub	sp, #32
 800b2bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b2be:	e048      	b.n	800b352 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b2c0:	4b2d      	ldr	r3, [pc, #180]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2ca:	4b2b      	ldr	r3, [pc, #172]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fe f963 	bl	80095a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	68f8      	ldr	r0, [r7, #12]
 800b2e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ec:	f003 0304 	and.w	r3, r3, #4
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d02e      	beq.n	800b352 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	693a      	ldr	r2, [r7, #16]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2fe:	68ba      	ldr	r2, [r7, #8]
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	429a      	cmp	r2, r3
 800b304:	d90e      	bls.n	800b324 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	68ba      	ldr	r2, [r7, #8]
 800b30a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b312:	4b19      	ldr	r3, [pc, #100]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3304      	adds	r3, #4
 800b31a:	4619      	mov	r1, r3
 800b31c:	4610      	mov	r0, r2
 800b31e:	f7fe f908 	bl	8009532 <vListInsert>
 800b322:	e016      	b.n	800b352 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b324:	2300      	movs	r3, #0
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	2300      	movs	r3, #0
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	2100      	movs	r1, #0
 800b32e:	68f8      	ldr	r0, [r7, #12]
 800b330:	f7ff fd60 	bl	800adf4 <xTimerGenericCommand>
 800b334:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10a      	bne.n	800b352 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	603b      	str	r3, [r7, #0]
}
 800b34e:	bf00      	nop
 800b350:	e7fe      	b.n	800b350 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b352:	4b09      	ldr	r3, [pc, #36]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1b1      	bne.n	800b2c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b35c:	4b06      	ldr	r3, [pc, #24]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b362:	4b06      	ldr	r3, [pc, #24]	; (800b37c <prvSwitchTimerLists+0xc4>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a04      	ldr	r2, [pc, #16]	; (800b378 <prvSwitchTimerLists+0xc0>)
 800b368:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b36a:	4a04      	ldr	r2, [pc, #16]	; (800b37c <prvSwitchTimerLists+0xc4>)
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	6013      	str	r3, [r2, #0]
}
 800b370:	bf00      	nop
 800b372:	3718      	adds	r7, #24
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	24001418 	.word	0x24001418
 800b37c:	2400141c 	.word	0x2400141c

0800b380 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b386:	f000 f965 	bl	800b654 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b38a:	4b15      	ldr	r3, [pc, #84]	; (800b3e0 <prvCheckForValidListAndQueue+0x60>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d120      	bne.n	800b3d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b392:	4814      	ldr	r0, [pc, #80]	; (800b3e4 <prvCheckForValidListAndQueue+0x64>)
 800b394:	f7fe f87c 	bl	8009490 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b398:	4813      	ldr	r0, [pc, #76]	; (800b3e8 <prvCheckForValidListAndQueue+0x68>)
 800b39a:	f7fe f879 	bl	8009490 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b39e:	4b13      	ldr	r3, [pc, #76]	; (800b3ec <prvCheckForValidListAndQueue+0x6c>)
 800b3a0:	4a10      	ldr	r2, [pc, #64]	; (800b3e4 <prvCheckForValidListAndQueue+0x64>)
 800b3a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3a4:	4b12      	ldr	r3, [pc, #72]	; (800b3f0 <prvCheckForValidListAndQueue+0x70>)
 800b3a6:	4a10      	ldr	r2, [pc, #64]	; (800b3e8 <prvCheckForValidListAndQueue+0x68>)
 800b3a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	4b11      	ldr	r3, [pc, #68]	; (800b3f4 <prvCheckForValidListAndQueue+0x74>)
 800b3b0:	4a11      	ldr	r2, [pc, #68]	; (800b3f8 <prvCheckForValidListAndQueue+0x78>)
 800b3b2:	2110      	movs	r1, #16
 800b3b4:	200a      	movs	r0, #10
 800b3b6:	f7fe f987 	bl	80096c8 <xQueueGenericCreateStatic>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	4a08      	ldr	r2, [pc, #32]	; (800b3e0 <prvCheckForValidListAndQueue+0x60>)
 800b3be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <prvCheckForValidListAndQueue+0x60>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d005      	beq.n	800b3d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <prvCheckForValidListAndQueue+0x60>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	490b      	ldr	r1, [pc, #44]	; (800b3fc <prvCheckForValidListAndQueue+0x7c>)
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fe fda0 	bl	8009f14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3d4:	f000 f96e 	bl	800b6b4 <vPortExitCritical>
}
 800b3d8:	bf00      	nop
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	24001420 	.word	0x24001420
 800b3e4:	240013f0 	.word	0x240013f0
 800b3e8:	24001404 	.word	0x24001404
 800b3ec:	24001418 	.word	0x24001418
 800b3f0:	2400141c 	.word	0x2400141c
 800b3f4:	240014cc 	.word	0x240014cc
 800b3f8:	2400142c 	.word	0x2400142c
 800b3fc:	0800bd14 	.word	0x0800bd14

0800b400 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3b04      	subs	r3, #4
 800b410:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3b04      	subs	r3, #4
 800b41e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	f023 0201 	bic.w	r2, r3, #1
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3b04      	subs	r3, #4
 800b42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b430:	4a0c      	ldr	r2, [pc, #48]	; (800b464 <pxPortInitialiseStack+0x64>)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	3b14      	subs	r3, #20
 800b43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	3b04      	subs	r3, #4
 800b446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f06f 0202 	mvn.w	r2, #2
 800b44e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3b20      	subs	r3, #32
 800b454:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b456:	68fb      	ldr	r3, [r7, #12]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	0800b469 	.word	0x0800b469

0800b468 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b472:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <prvTaskExitError+0x54>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b47a:	d00a      	beq.n	800b492 <prvTaskExitError+0x2a>
	__asm volatile
 800b47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b480:	f383 8811 	msr	BASEPRI, r3
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	f3bf 8f4f 	dsb	sy
 800b48c:	60fb      	str	r3, [r7, #12]
}
 800b48e:	bf00      	nop
 800b490:	e7fe      	b.n	800b490 <prvTaskExitError+0x28>
	__asm volatile
 800b492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b496:	f383 8811 	msr	BASEPRI, r3
 800b49a:	f3bf 8f6f 	isb	sy
 800b49e:	f3bf 8f4f 	dsb	sy
 800b4a2:	60bb      	str	r3, [r7, #8]
}
 800b4a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4a6:	bf00      	nop
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d0fc      	beq.n	800b4a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4ae:	bf00      	nop
 800b4b0:	bf00      	nop
 800b4b2:	3714      	adds	r7, #20
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	24000010 	.word	0x24000010

0800b4c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b4c0:	4b07      	ldr	r3, [pc, #28]	; (800b4e0 <pxCurrentTCBConst2>)
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	6808      	ldr	r0, [r1, #0]
 800b4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ca:	f380 8809 	msr	PSP, r0
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f04f 0000 	mov.w	r0, #0
 800b4d6:	f380 8811 	msr	BASEPRI, r0
 800b4da:	4770      	bx	lr
 800b4dc:	f3af 8000 	nop.w

0800b4e0 <pxCurrentTCBConst2>:
 800b4e0:	24000ef0 	.word	0x24000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop

0800b4e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4e8:	4808      	ldr	r0, [pc, #32]	; (800b50c <prvPortStartFirstTask+0x24>)
 800b4ea:	6800      	ldr	r0, [r0, #0]
 800b4ec:	6800      	ldr	r0, [r0, #0]
 800b4ee:	f380 8808 	msr	MSP, r0
 800b4f2:	f04f 0000 	mov.w	r0, #0
 800b4f6:	f380 8814 	msr	CONTROL, r0
 800b4fa:	b662      	cpsie	i
 800b4fc:	b661      	cpsie	f
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	df00      	svc	0
 800b508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b50a:	bf00      	nop
 800b50c:	e000ed08 	.word	0xe000ed08

0800b510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b086      	sub	sp, #24
 800b514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b516:	4b46      	ldr	r3, [pc, #280]	; (800b630 <xPortStartScheduler+0x120>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a46      	ldr	r2, [pc, #280]	; (800b634 <xPortStartScheduler+0x124>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d10a      	bne.n	800b536 <xPortStartScheduler+0x26>
	__asm volatile
 800b520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b524:	f383 8811 	msr	BASEPRI, r3
 800b528:	f3bf 8f6f 	isb	sy
 800b52c:	f3bf 8f4f 	dsb	sy
 800b530:	613b      	str	r3, [r7, #16]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b536:	4b3e      	ldr	r3, [pc, #248]	; (800b630 <xPortStartScheduler+0x120>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a3f      	ldr	r2, [pc, #252]	; (800b638 <xPortStartScheduler+0x128>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d10a      	bne.n	800b556 <xPortStartScheduler+0x46>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	f383 8811 	msr	BASEPRI, r3
 800b548:	f3bf 8f6f 	isb	sy
 800b54c:	f3bf 8f4f 	dsb	sy
 800b550:	60fb      	str	r3, [r7, #12]
}
 800b552:	bf00      	nop
 800b554:	e7fe      	b.n	800b554 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b556:	4b39      	ldr	r3, [pc, #228]	; (800b63c <xPortStartScheduler+0x12c>)
 800b558:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	22ff      	movs	r2, #255	; 0xff
 800b566:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b570:	78fb      	ldrb	r3, [r7, #3]
 800b572:	b2db      	uxtb	r3, r3
 800b574:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b578:	b2da      	uxtb	r2, r3
 800b57a:	4b31      	ldr	r3, [pc, #196]	; (800b640 <xPortStartScheduler+0x130>)
 800b57c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b57e:	4b31      	ldr	r3, [pc, #196]	; (800b644 <xPortStartScheduler+0x134>)
 800b580:	2207      	movs	r2, #7
 800b582:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b584:	e009      	b.n	800b59a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b586:	4b2f      	ldr	r3, [pc, #188]	; (800b644 <xPortStartScheduler+0x134>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	4a2d      	ldr	r2, [pc, #180]	; (800b644 <xPortStartScheduler+0x134>)
 800b58e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b590:	78fb      	ldrb	r3, [r7, #3]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b2db      	uxtb	r3, r3
 800b598:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b59a:	78fb      	ldrb	r3, [r7, #3]
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	d0ef      	beq.n	800b586 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5a6:	4b27      	ldr	r3, [pc, #156]	; (800b644 <xPortStartScheduler+0x134>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1c3 0307 	rsb	r3, r3, #7
 800b5ae:	2b04      	cmp	r3, #4
 800b5b0:	d00a      	beq.n	800b5c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	f383 8811 	msr	BASEPRI, r3
 800b5ba:	f3bf 8f6f 	isb	sy
 800b5be:	f3bf 8f4f 	dsb	sy
 800b5c2:	60bb      	str	r3, [r7, #8]
}
 800b5c4:	bf00      	nop
 800b5c6:	e7fe      	b.n	800b5c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b5c8:	4b1e      	ldr	r3, [pc, #120]	; (800b644 <xPortStartScheduler+0x134>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	021b      	lsls	r3, r3, #8
 800b5ce:	4a1d      	ldr	r2, [pc, #116]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5d2:	4b1c      	ldr	r3, [pc, #112]	; (800b644 <xPortStartScheduler+0x134>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5da:	4a1a      	ldr	r2, [pc, #104]	; (800b644 <xPortStartScheduler+0x134>)
 800b5dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	b2da      	uxtb	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5e6:	4b18      	ldr	r3, [pc, #96]	; (800b648 <xPortStartScheduler+0x138>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a17      	ldr	r2, [pc, #92]	; (800b648 <xPortStartScheduler+0x138>)
 800b5ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5f2:	4b15      	ldr	r3, [pc, #84]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a14      	ldr	r2, [pc, #80]	; (800b648 <xPortStartScheduler+0x138>)
 800b5f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5fe:	f000 f8dd 	bl	800b7bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <xPortStartScheduler+0x13c>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b608:	f000 f8fc 	bl	800b804 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b60c:	4b10      	ldr	r3, [pc, #64]	; (800b650 <xPortStartScheduler+0x140>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0f      	ldr	r2, [pc, #60]	; (800b650 <xPortStartScheduler+0x140>)
 800b612:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b616:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b618:	f7ff ff66 	bl	800b4e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b61c:	f7ff f856 	bl	800a6cc <vTaskSwitchContext>
	prvTaskExitError();
 800b620:	f7ff ff22 	bl	800b468 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3718      	adds	r7, #24
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	e000ed00 	.word	0xe000ed00
 800b634:	410fc271 	.word	0x410fc271
 800b638:	410fc270 	.word	0x410fc270
 800b63c:	e000e400 	.word	0xe000e400
 800b640:	2400151c 	.word	0x2400151c
 800b644:	24001520 	.word	0x24001520
 800b648:	e000ed20 	.word	0xe000ed20
 800b64c:	24000010 	.word	0x24000010
 800b650:	e000ef34 	.word	0xe000ef34

0800b654 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b083      	sub	sp, #12
 800b658:	af00      	add	r7, sp, #0
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	607b      	str	r3, [r7, #4]
}
 800b66c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b66e:	4b0f      	ldr	r3, [pc, #60]	; (800b6ac <vPortEnterCritical+0x58>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a0d      	ldr	r2, [pc, #52]	; (800b6ac <vPortEnterCritical+0x58>)
 800b676:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b678:	4b0c      	ldr	r3, [pc, #48]	; (800b6ac <vPortEnterCritical+0x58>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d10f      	bne.n	800b6a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b680:	4b0b      	ldr	r3, [pc, #44]	; (800b6b0 <vPortEnterCritical+0x5c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b00      	cmp	r3, #0
 800b688:	d00a      	beq.n	800b6a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	603b      	str	r3, [r7, #0]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <vPortEnterCritical+0x4a>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr
 800b6ac:	24000010 	.word	0x24000010
 800b6b0:	e000ed04 	.word	0xe000ed04

0800b6b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b6ba:	4b12      	ldr	r3, [pc, #72]	; (800b704 <vPortExitCritical+0x50>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10a      	bne.n	800b6d8 <vPortExitCritical+0x24>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	607b      	str	r3, [r7, #4]
}
 800b6d4:	bf00      	nop
 800b6d6:	e7fe      	b.n	800b6d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6d8:	4b0a      	ldr	r3, [pc, #40]	; (800b704 <vPortExitCritical+0x50>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	4a09      	ldr	r2, [pc, #36]	; (800b704 <vPortExitCritical+0x50>)
 800b6e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6e2:	4b08      	ldr	r3, [pc, #32]	; (800b704 <vPortExitCritical+0x50>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d105      	bne.n	800b6f6 <vPortExitCritical+0x42>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	f383 8811 	msr	BASEPRI, r3
}
 800b6f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	24000010 	.word	0x24000010
	...

0800b710 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b710:	f3ef 8009 	mrs	r0, PSP
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4b15      	ldr	r3, [pc, #84]	; (800b770 <pxCurrentTCBConst>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	f01e 0f10 	tst.w	lr, #16
 800b720:	bf08      	it	eq
 800b722:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b726:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72a:	6010      	str	r0, [r2, #0]
 800b72c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b730:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b734:	f380 8811 	msr	BASEPRI, r0
 800b738:	f3bf 8f4f 	dsb	sy
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f7fe ffc4 	bl	800a6cc <vTaskSwitchContext>
 800b744:	f04f 0000 	mov.w	r0, #0
 800b748:	f380 8811 	msr	BASEPRI, r0
 800b74c:	bc09      	pop	{r0, r3}
 800b74e:	6819      	ldr	r1, [r3, #0]
 800b750:	6808      	ldr	r0, [r1, #0]
 800b752:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b756:	f01e 0f10 	tst.w	lr, #16
 800b75a:	bf08      	it	eq
 800b75c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b760:	f380 8809 	msr	PSP, r0
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4770      	bx	lr
 800b76a:	bf00      	nop
 800b76c:	f3af 8000 	nop.w

0800b770 <pxCurrentTCBConst>:
 800b770:	24000ef0 	.word	0x24000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b774:	bf00      	nop
 800b776:	bf00      	nop

0800b778 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
	__asm volatile
 800b77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b782:	f383 8811 	msr	BASEPRI, r3
 800b786:	f3bf 8f6f 	isb	sy
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	607b      	str	r3, [r7, #4]
}
 800b790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b792:	f7fe fee1 	bl	800a558 <xTaskIncrementTick>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b79c:	4b06      	ldr	r3, [pc, #24]	; (800b7b8 <xPortSysTickHandler+0x40>)
 800b79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a2:	601a      	str	r2, [r3, #0]
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	f383 8811 	msr	BASEPRI, r3
}
 800b7ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	e000ed04 	.word	0xe000ed04

0800b7bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b7c0:	4b0b      	ldr	r3, [pc, #44]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b7c6:	4b0b      	ldr	r3, [pc, #44]	; (800b7f4 <vPortSetupTimerInterrupt+0x38>)
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <vPortSetupTimerInterrupt+0x3c>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a0a      	ldr	r2, [pc, #40]	; (800b7fc <vPortSetupTimerInterrupt+0x40>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	099b      	lsrs	r3, r3, #6
 800b7d8:	4a09      	ldr	r2, [pc, #36]	; (800b800 <vPortSetupTimerInterrupt+0x44>)
 800b7da:	3b01      	subs	r3, #1
 800b7dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7de:	4b04      	ldr	r3, [pc, #16]	; (800b7f0 <vPortSetupTimerInterrupt+0x34>)
 800b7e0:	2207      	movs	r2, #7
 800b7e2:	601a      	str	r2, [r3, #0]
}
 800b7e4:	bf00      	nop
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	e000e010 	.word	0xe000e010
 800b7f4:	e000e018 	.word	0xe000e018
 800b7f8:	24000000 	.word	0x24000000
 800b7fc:	10624dd3 	.word	0x10624dd3
 800b800:	e000e014 	.word	0xe000e014

0800b804 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b804:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b814 <vPortEnableVFP+0x10>
 800b808:	6801      	ldr	r1, [r0, #0]
 800b80a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b80e:	6001      	str	r1, [r0, #0]
 800b810:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b812:	bf00      	nop
 800b814:	e000ed88 	.word	0xe000ed88

0800b818 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b818:	b480      	push	{r7}
 800b81a:	b085      	sub	sp, #20
 800b81c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b81e:	f3ef 8305 	mrs	r3, IPSR
 800b822:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2b0f      	cmp	r3, #15
 800b828:	d914      	bls.n	800b854 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b82a:	4a17      	ldr	r2, [pc, #92]	; (800b888 <vPortValidateInterruptPriority+0x70>)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b834:	4b15      	ldr	r3, [pc, #84]	; (800b88c <vPortValidateInterruptPriority+0x74>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	7afa      	ldrb	r2, [r7, #11]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d20a      	bcs.n	800b854 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b83e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b842:	f383 8811 	msr	BASEPRI, r3
 800b846:	f3bf 8f6f 	isb	sy
 800b84a:	f3bf 8f4f 	dsb	sy
 800b84e:	607b      	str	r3, [r7, #4]
}
 800b850:	bf00      	nop
 800b852:	e7fe      	b.n	800b852 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b854:	4b0e      	ldr	r3, [pc, #56]	; (800b890 <vPortValidateInterruptPriority+0x78>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b85c:	4b0d      	ldr	r3, [pc, #52]	; (800b894 <vPortValidateInterruptPriority+0x7c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d90a      	bls.n	800b87a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b868:	f383 8811 	msr	BASEPRI, r3
 800b86c:	f3bf 8f6f 	isb	sy
 800b870:	f3bf 8f4f 	dsb	sy
 800b874:	603b      	str	r3, [r7, #0]
}
 800b876:	bf00      	nop
 800b878:	e7fe      	b.n	800b878 <vPortValidateInterruptPriority+0x60>
	}
 800b87a:	bf00      	nop
 800b87c:	3714      	adds	r7, #20
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop
 800b888:	e000e3f0 	.word	0xe000e3f0
 800b88c:	2400151c 	.word	0x2400151c
 800b890:	e000ed0c 	.word	0xe000ed0c
 800b894:	24001520 	.word	0x24001520

0800b898 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b08a      	sub	sp, #40	; 0x28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8a4:	f7fe fd9c 	bl	800a3e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8a8:	4b5b      	ldr	r3, [pc, #364]	; (800ba18 <pvPortMalloc+0x180>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d101      	bne.n	800b8b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b8b0:	f000 f920 	bl	800baf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b8b4:	4b59      	ldr	r3, [pc, #356]	; (800ba1c <pvPortMalloc+0x184>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4013      	ands	r3, r2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f040 8093 	bne.w	800b9e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d01d      	beq.n	800b904 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b8c8:	2208      	movs	r2, #8
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d014      	beq.n	800b904 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f023 0307 	bic.w	r3, r3, #7
 800b8e0:	3308      	adds	r3, #8
 800b8e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f003 0307 	and.w	r3, r3, #7
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <pvPortMalloc+0x6c>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	617b      	str	r3, [r7, #20]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d06e      	beq.n	800b9e8 <pvPortMalloc+0x150>
 800b90a:	4b45      	ldr	r3, [pc, #276]	; (800ba20 <pvPortMalloc+0x188>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	429a      	cmp	r2, r3
 800b912:	d869      	bhi.n	800b9e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b914:	4b43      	ldr	r3, [pc, #268]	; (800ba24 <pvPortMalloc+0x18c>)
 800b916:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b918:	4b42      	ldr	r3, [pc, #264]	; (800ba24 <pvPortMalloc+0x18c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b91e:	e004      	b.n	800b92a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	429a      	cmp	r2, r3
 800b932:	d903      	bls.n	800b93c <pvPortMalloc+0xa4>
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d1f1      	bne.n	800b920 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b93c:	4b36      	ldr	r3, [pc, #216]	; (800ba18 <pvPortMalloc+0x180>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b942:	429a      	cmp	r2, r3
 800b944:	d050      	beq.n	800b9e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b946:	6a3b      	ldr	r3, [r7, #32]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2208      	movs	r2, #8
 800b94c:	4413      	add	r3, r2
 800b94e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	6a3b      	ldr	r3, [r7, #32]
 800b956:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	2308      	movs	r3, #8
 800b962:	005b      	lsls	r3, r3, #1
 800b964:	429a      	cmp	r2, r3
 800b966:	d91f      	bls.n	800b9a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <pvPortMalloc+0xf8>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	613b      	str	r3, [r7, #16]
}
 800b98c:	bf00      	nop
 800b98e:	e7fe      	b.n	800b98e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	685a      	ldr	r2, [r3, #4]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	1ad2      	subs	r2, r2, r3
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9a2:	69b8      	ldr	r0, [r7, #24]
 800b9a4:	f000 f908 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ba20 <pvPortMalloc+0x188>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	1ad3      	subs	r3, r2, r3
 800b9b2:	4a1b      	ldr	r2, [pc, #108]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b9b6:	4b1a      	ldr	r3, [pc, #104]	; (800ba20 <pvPortMalloc+0x188>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4b1b      	ldr	r3, [pc, #108]	; (800ba28 <pvPortMalloc+0x190>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	429a      	cmp	r2, r3
 800b9c0:	d203      	bcs.n	800b9ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b9c2:	4b17      	ldr	r3, [pc, #92]	; (800ba20 <pvPortMalloc+0x188>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a18      	ldr	r2, [pc, #96]	; (800ba28 <pvPortMalloc+0x190>)
 800b9c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	4b13      	ldr	r3, [pc, #76]	; (800ba1c <pvPortMalloc+0x184>)
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	431a      	orrs	r2, r3
 800b9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9de:	4b13      	ldr	r3, [pc, #76]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	4a11      	ldr	r2, [pc, #68]	; (800ba2c <pvPortMalloc+0x194>)
 800b9e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9e8:	f7fe fd08 	bl	800a3fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d00a      	beq.n	800ba0c <pvPortMalloc+0x174>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60fb      	str	r3, [r7, #12]
}
 800ba08:	bf00      	nop
 800ba0a:	e7fe      	b.n	800ba0a <pvPortMalloc+0x172>
	return pvReturn;
 800ba0c:	69fb      	ldr	r3, [r7, #28]
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3728      	adds	r7, #40	; 0x28
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	2400512c 	.word	0x2400512c
 800ba1c:	24005140 	.word	0x24005140
 800ba20:	24005130 	.word	0x24005130
 800ba24:	24005124 	.word	0x24005124
 800ba28:	24005134 	.word	0x24005134
 800ba2c:	24005138 	.word	0x24005138

0800ba30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d04d      	beq.n	800bade <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba42:	2308      	movs	r3, #8
 800ba44:	425b      	negs	r3, r3
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	4413      	add	r3, r2
 800ba4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	4b24      	ldr	r3, [pc, #144]	; (800bae8 <vPortFree+0xb8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4013      	ands	r3, r2
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10a      	bne.n	800ba74 <vPortFree+0x44>
	__asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60fb      	str	r3, [r7, #12]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00a      	beq.n	800ba92 <vPortFree+0x62>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60bb      	str	r3, [r7, #8]
}
 800ba8e:	bf00      	nop
 800ba90:	e7fe      	b.n	800ba90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	4b14      	ldr	r3, [pc, #80]	; (800bae8 <vPortFree+0xb8>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4013      	ands	r3, r2
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d01e      	beq.n	800bade <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11a      	bne.n	800bade <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	4b0e      	ldr	r3, [pc, #56]	; (800bae8 <vPortFree+0xb8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	43db      	mvns	r3, r3
 800bab2:	401a      	ands	r2, r3
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bab8:	f7fe fc92 	bl	800a3e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	4b0a      	ldr	r3, [pc, #40]	; (800baec <vPortFree+0xbc>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4413      	add	r3, r2
 800bac6:	4a09      	ldr	r2, [pc, #36]	; (800baec <vPortFree+0xbc>)
 800bac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800baca:	6938      	ldr	r0, [r7, #16]
 800bacc:	f000 f874 	bl	800bbb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bad0:	4b07      	ldr	r3, [pc, #28]	; (800baf0 <vPortFree+0xc0>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3301      	adds	r3, #1
 800bad6:	4a06      	ldr	r2, [pc, #24]	; (800baf0 <vPortFree+0xc0>)
 800bad8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bada:	f7fe fc8f 	bl	800a3fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bade:	bf00      	nop
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	24005140 	.word	0x24005140
 800baec:	24005130 	.word	0x24005130
 800baf0:	2400513c 	.word	0x2400513c

0800baf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bafa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bafe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb00:	4b27      	ldr	r3, [pc, #156]	; (800bba0 <prvHeapInit+0xac>)
 800bb02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0307 	and.w	r3, r3, #7
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00c      	beq.n	800bb28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	3307      	adds	r3, #7
 800bb12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0307 	bic.w	r3, r3, #7
 800bb1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb1c:	68ba      	ldr	r2, [r7, #8]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	4a1f      	ldr	r2, [pc, #124]	; (800bba0 <prvHeapInit+0xac>)
 800bb24:	4413      	add	r3, r2
 800bb26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	; (800bba4 <prvHeapInit+0xb0>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb32:	4b1c      	ldr	r3, [pc, #112]	; (800bba4 <prvHeapInit+0xb0>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb40:	2208      	movs	r2, #8
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	1a9b      	subs	r3, r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0307 	bic.w	r3, r3, #7
 800bb4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a15      	ldr	r2, [pc, #84]	; (800bba8 <prvHeapInit+0xb4>)
 800bb54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb56:	4b14      	ldr	r3, [pc, #80]	; (800bba8 <prvHeapInit+0xb4>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb5e:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvHeapInit+0xb4>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	1ad2      	subs	r2, r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb74:	4b0c      	ldr	r3, [pc, #48]	; (800bba8 <prvHeapInit+0xb4>)
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a0a      	ldr	r2, [pc, #40]	; (800bbac <prvHeapInit+0xb8>)
 800bb82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	4a09      	ldr	r2, [pc, #36]	; (800bbb0 <prvHeapInit+0xbc>)
 800bb8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <prvHeapInit+0xc0>)
 800bb8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb92:	601a      	str	r2, [r3, #0]
}
 800bb94:	bf00      	nop
 800bb96:	3714      	adds	r7, #20
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9e:	4770      	bx	lr
 800bba0:	24001524 	.word	0x24001524
 800bba4:	24005124 	.word	0x24005124
 800bba8:	2400512c 	.word	0x2400512c
 800bbac:	24005134 	.word	0x24005134
 800bbb0:	24005130 	.word	0x24005130
 800bbb4:	24005140 	.word	0x24005140

0800bbb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbc0:	4b28      	ldr	r3, [pc, #160]	; (800bc64 <prvInsertBlockIntoFreeList+0xac>)
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	e002      	b.n	800bbcc <prvInsertBlockIntoFreeList+0x14>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d8f7      	bhi.n	800bbc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d108      	bne.n	800bbfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	685b      	ldr	r3, [r3, #4]
 800bbf0:	441a      	add	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	441a      	add	r2, r3
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d118      	bne.n	800bc40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d00d      	beq.n	800bc36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	685a      	ldr	r2, [r3, #4]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	441a      	add	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]
 800bc34:	e008      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc36:	4b0c      	ldr	r3, [pc, #48]	; (800bc68 <prvInsertBlockIntoFreeList+0xb0>)
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	601a      	str	r2, [r3, #0]
 800bc3e:	e003      	b.n	800bc48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d002      	beq.n	800bc56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc56:	bf00      	nop
 800bc58:	3714      	adds	r7, #20
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	24005124 	.word	0x24005124
 800bc68:	2400512c 	.word	0x2400512c

0800bc6c <memset>:
 800bc6c:	4402      	add	r2, r0
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d100      	bne.n	800bc76 <memset+0xa>
 800bc74:	4770      	bx	lr
 800bc76:	f803 1b01 	strb.w	r1, [r3], #1
 800bc7a:	e7f9      	b.n	800bc70 <memset+0x4>

0800bc7c <__libc_init_array>:
 800bc7c:	b570      	push	{r4, r5, r6, lr}
 800bc7e:	4d0d      	ldr	r5, [pc, #52]	; (800bcb4 <__libc_init_array+0x38>)
 800bc80:	4c0d      	ldr	r4, [pc, #52]	; (800bcb8 <__libc_init_array+0x3c>)
 800bc82:	1b64      	subs	r4, r4, r5
 800bc84:	10a4      	asrs	r4, r4, #2
 800bc86:	2600      	movs	r6, #0
 800bc88:	42a6      	cmp	r6, r4
 800bc8a:	d109      	bne.n	800bca0 <__libc_init_array+0x24>
 800bc8c:	4d0b      	ldr	r5, [pc, #44]	; (800bcbc <__libc_init_array+0x40>)
 800bc8e:	4c0c      	ldr	r4, [pc, #48]	; (800bcc0 <__libc_init_array+0x44>)
 800bc90:	f000 f826 	bl	800bce0 <_init>
 800bc94:	1b64      	subs	r4, r4, r5
 800bc96:	10a4      	asrs	r4, r4, #2
 800bc98:	2600      	movs	r6, #0
 800bc9a:	42a6      	cmp	r6, r4
 800bc9c:	d105      	bne.n	800bcaa <__libc_init_array+0x2e>
 800bc9e:	bd70      	pop	{r4, r5, r6, pc}
 800bca0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bca4:	4798      	blx	r3
 800bca6:	3601      	adds	r6, #1
 800bca8:	e7ee      	b.n	800bc88 <__libc_init_array+0xc>
 800bcaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcae:	4798      	blx	r3
 800bcb0:	3601      	adds	r6, #1
 800bcb2:	e7f2      	b.n	800bc9a <__libc_init_array+0x1e>
 800bcb4:	0800bd80 	.word	0x0800bd80
 800bcb8:	0800bd80 	.word	0x0800bd80
 800bcbc:	0800bd80 	.word	0x0800bd80
 800bcc0:	0800bd84 	.word	0x0800bd84

0800bcc4 <memcpy>:
 800bcc4:	440a      	add	r2, r1
 800bcc6:	4291      	cmp	r1, r2
 800bcc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bccc:	d100      	bne.n	800bcd0 <memcpy+0xc>
 800bcce:	4770      	bx	lr
 800bcd0:	b510      	push	{r4, lr}
 800bcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcda:	4291      	cmp	r1, r2
 800bcdc:	d1f9      	bne.n	800bcd2 <memcpy+0xe>
 800bcde:	bd10      	pop	{r4, pc}

0800bce0 <_init>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	bf00      	nop
 800bce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce6:	bc08      	pop	{r3}
 800bce8:	469e      	mov	lr, r3
 800bcea:	4770      	bx	lr

0800bcec <_fini>:
 800bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcee:	bf00      	nop
 800bcf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcf2:	bc08      	pop	{r3}
 800bcf4:	469e      	mov	lr, r3
 800bcf6:	4770      	bx	lr
